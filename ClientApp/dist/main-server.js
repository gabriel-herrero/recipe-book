!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="dist/",r.w={},r(r.s=57)}([function(e,t,r){e.exports=r(2)(3)},function(e,t,r){e.exports=r(2)(37)},function(e,t){e.exports=require("./vendor")},function(e,t,r){"use strict";var n=r(46),i=n,o=r(45).isApiWritable;t.NAMESPACE={HTML:"http://www.w3.org/1999/xhtml",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/",MATHML:"http://www.w3.org/1998/Math/MathML",SVG:"http://www.w3.org/2000/svg",XLINK:"http://www.w3.org/1999/xlink"},t.IndexSizeError=function(){throw new n(i.INDEX_SIZE_ERR)},t.HierarchyRequestError=function(){throw new n(i.HIERARCHY_REQUEST_ERR)},t.WrongDocumentError=function(){throw new n(i.WRONG_DOCUMENT_ERR)},t.InvalidCharacterError=function(){throw new n(i.INVALID_CHARACTER_ERR)},t.NoModificationAllowedError=function(){throw new n(i.NO_MODIFICATION_ALLOWED_ERR)},t.NotFoundError=function(){throw new n(i.NOT_FOUND_ERR)},t.NotSupportedError=function(){throw new n(i.NOT_SUPPORTED_ERR)},t.InvalidStateError=function(){throw new n(i.INVALID_STATE_ERR)},t.SyntaxError=function(){throw new n(i.SYNTAX_ERR)},t.InvalidModificationError=function(){throw new n(i.INVALID_MODIFICATION_ERR)},t.NamespaceError=function(){throw new n(i.NAMESPACE_ERR)},t.InvalidAccessError=function(){throw new n(i.INVALID_ACCESS_ERR)},t.TypeMismatchError=function(){throw new n(i.TYPE_MISMATCH_ERR)},t.SecurityError=function(){throw new n(i.SECURITY_ERR)},t.NetworkError=function(){throw new n(i.NETWORK_ERR)},t.AbortError=function(){throw new n(i.ABORT_ERR)},t.UrlMismatchError=function(){throw new n(i.URL_MISMATCH_ERR)},t.QuotaExceededError=function(){throw new n(i.QUOTA_EXCEEDED_ERR)},t.TimeoutError=function(){throw new n(i.TIMEOUT_ERR)},t.InvalidNodeTypeError=function(){throw new n(i.INVALID_NODE_TYPE_ERR)},t.DataCloneError=function(){throw new n(i.DATA_CLONE_ERR)},t.nyi=function(){throw new Error("NotYetImplemented")},t.assert=function(e,t){if(!e)throw new Error("Assertion failed: "+(t||"")+"\n"+(new Error).stack)},t.expose=function(e,t){for(var r in e)Object.defineProperty(t.prototype,r,{value:e[r],writable:o})},t.merge=function(e,t){for(var r in t)e[r]=t[r]},t.documentOrder=function(e,t){return 3-(6&e.compareDocumentPosition(t))},t.toASCIILowerCase=function(e){return e.replace(/[A-Z]+/g,function(e){return e.toLowerCase()})}},function(e,t,r){e.exports=r(2)(40)},function(e,t,r){"use strict";e.exports=a;var n=r(49),i=r(3),o=i.NAMESPACE;function a(){}var s=a.ELEMENT_NODE=1,c=a.ATTRIBUTE_NODE=2,l=a.TEXT_NODE=3,u=a.CDATA_SECTION_NODE=4,p=a.ENTITY_REFERENCE_NODE=5,h=a.ENTITY_NODE=6,f=a.PROCESSING_INSTRUCTION_NODE=7,d=a.COMMENT_NODE=8,m=a.DOCUMENT_NODE=9,g=a.DOCUMENT_TYPE_NODE=10,y=a.DOCUMENT_FRAGMENT_NODE=11,v=a.NOTATION_NODE=12,b=a.DOCUMENT_POSITION_DISCONNECTED=1,_=a.DOCUMENT_POSITION_PRECEDING=2,E=a.DOCUMENT_POSITION_FOLLOWING=4,w=a.DOCUMENT_POSITION_CONTAINS=8,T=a.DOCUMENT_POSITION_CONTAINED_BY=16,S=a.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC=32,k={STYLE:!0,SCRIPT:!0,XMP:!0,IFRAME:!0,NOEMBED:!0,NOFRAMES:!0,PLAINTEXT:!0},x={area:!0,base:!0,basefont:!0,bgsound:!0,br:!0,col:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},N={};function R(e){return e.replace(/[&<>\u00A0]/g,function(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case" ":return"&nbsp;"}})}function C(e){var t=/[&"\u00A0]/g;return t.test(e)?e.replace(t,function(e){switch(e){case"&":return"&amp;";case'"':return"&quot;";case" ":return"&nbsp;"}}):e}function A(e){var t=e.namespaceURI;return t?t===o.XML?"xml:"+e.localName:t===o.XLINK?"xlink:"+e.localName:t===o.XMLNS?"xmlns"===e.localName?"xmlns":"xmlns:"+e.localName:e.name:e.localName}a.prototype=Object.create(n.prototype,{parentNode:{value:null,writable:!0},baseURI:{get:i.nyi},parentElement:{get:function(){return this.parentNode&&this.parentNode.nodeType===s?this.parentNode:null}},hasChildNodes:{value:function(){return this.childNodes.length>0}},firstChild:{get:function(){return 0===this.childNodes.length?null:this.childNodes[0]}},lastChild:{get:function(){return 0===this.childNodes.length?null:this.childNodes[this.childNodes.length-1]}},previousSibling:{get:function(){if(!this.parentNode)return null;var e=this.parentNode.childNodes,t=this.index;return 0===t?null:e[t-1]}},nextSibling:{get:function(){if(!this.parentNode)return null;var e=this.parentNode.childNodes,t=this.index;return t+1===e.length?null:e[t+1]}},_countChildrenOfType:{value:function(e){var t,r=0,n=this.childNodes,i=n.length;for(t=0;t<i;t++)n[t].nodeType===e&&r++;return r}},_ensureInsertValid:{value:function(e,t,r){var n;if(!e.nodeType)throw new TypeError("not a node");switch(this.nodeType){case m:case y:case s:break;default:i.HierarchyRequestError()}switch(e.isAncestor(this)&&i.HierarchyRequestError(),null===t&&r||t.parentNode!==this&&i.NotFoundError(),e.nodeType){case y:case g:case s:case l:case f:case d:break;default:i.HierarchyRequestError()}if(this.nodeType===m)switch(e.nodeType){case l:i.HierarchyRequestError();break;case y:switch(e._countChildrenOfType(l)>0&&i.HierarchyRequestError(),e._countChildrenOfType(s)){case 0:break;case 1:if(null!==t)for(r&&t.nodeType===g&&i.HierarchyRequestError(),n=this.childNodes.length-1;n>=0&&this.childNodes[n]!==t;n--)this.childNodes[n].nodeType===g&&i.HierarchyRequestError();n=this._countChildrenOfType(s),r?n>0&&i.HierarchyRequestError():(n>1||1===n&&t.nodeType!==s)&&i.HierarchyRequestError();break;default:i.HierarchyRequestError()}break;case s:if(null!==t)for(r&&t.nodeType===g&&i.HierarchyRequestError(),n=this.childNodes.length-1;n>=0&&this.childNodes[n]!==t;n--)this.childNodes[n].nodeType===g&&i.HierarchyRequestError();n=this._countChildrenOfType(s),r?n>0&&i.HierarchyRequestError():(n>1||1===n&&t.nodeType!==s)&&i.HierarchyRequestError();break;case g:if(null===t)this._countChildrenOfType(s)&&i.HierarchyRequestError();else for(n=0;n<this.childNodes.length&&this.childNodes[n]!==t;n++)this.childNodes[n].nodeType===s&&i.HierarchyRequestError();n=this._countChildrenOfType(g),r?n>0&&i.HierarchyRequestError():(n>1||1===n&&t.nodeType!==g)&&i.HierarchyRequestError()}else e.nodeType===g&&i.HierarchyRequestError()}},insertBefore:{value:function(e,t){this._ensureInsertValid(e,t,!0);var r=t;return r===e&&(r=e.nextSibling),this.doc.adoptNode(e),null===r?this._appendChild(e):e.insert(this,r.index),e}},appendChild:{value:function(e){return this.insertBefore(e,null)}},_appendChild:{value:function(e){return e.insert(this,this.childNodes.length),e}},removeChild:{value:function(e){if(!e.nodeType)throw new TypeError("not a node");return e.parentNode!==this&&i.NotFoundError(),e.remove(),e}},replaceChild:{value:function(e,t){return this._ensureInsertValid(e,t,!1),e.doc!==this.doc&&this.doc.adoptNode(e),e._insertOrReplace(this,t.index,!0),t}},contains:{value:function(e){return null!==e&&(this===e||0!=(this.compareDocumentPosition(e)&T))}},compareDocumentPosition:{value:function(e){if(this===e)return 0;if(this.doc!==e.doc||this.rooted!==e.rooted)return b+S;for(var t=[],r=[],n=this;null!==n;n=n.parentNode)t.push(n);for(n=e;null!==n;n=n.parentNode)r.push(n);if(t.reverse(),r.reverse(),t[0]!==r[0])return b+S;n=Math.min(t.length,r.length);for(var i=1;i<n;i++)if(t[i]!==r[i])return t[i].index<r[i].index?E:_;return t.length<r.length?E+T:_+w}},isSameNode:{value:function(e){return this===e}},isEqualNode:{value:function(e){if(!e)return!1;if(e.nodeType!==this.nodeType)return!1;var t;if(this.firstChild){if(t=this.childNodes.length,e.childNodes.length!==t)return!1}else if(t=0,e.firstChild)return!1;if(!this.isEqual(e))return!1;for(var r=0;r<t;r++){var n=this.childNodes[r],i=e.childNodes[r];if(!n.isEqualNode(i))return!1}return!0}},cloneNode:{value:function(e){var t=this.clone();if(e&&this.firstChild)for(var r=0,n=this.childNodes.length;r<n;r++)t._appendChild(this.childNodes[r].cloneNode(!0));return t}},lookupPrefix:{value:function(e){var t;if(""===e)return null;switch(this.nodeType){case s:return this.locateNamespacePrefix(e);case m:return(t=this.documentElement)?t.locateNamespacePrefix(e):null;case g:case y:return null;default:return(t=this.parentElement)?t.locateNamespacePrefix(e):null}}},lookupNamespaceURI:{value:function(e){var t;switch(this.nodeType){case s:return this.locateNamespace(e);case m:return(t=this.documentElement)?t.locateNamespace(e):null;case g:case y:return null;default:return(t=this.parentElement)?t.locateNamespace(e):null}}},isDefaultNamespace:{value:function(e){var t=this.lookupNamespaceURI(null);return null===t&&(t=""),e===t}},index:{get:function(){i.assert(this.parentNode);var e=this.parentNode.childNodes;if(void 0===this._index||e[this._index]!==this){for(var t=0;t<e.length;t++)e[t]._index=t;i.assert(e[this._index]===this)}return this._index}},isAncestor:{value:function(e){if(this.doc!==e.doc)return!1;if(this.rooted!==e.rooted)return!1;for(var t=e;t;t=t.parentNode)if(t===this)return!0;return!1}},ensureSameDoc:{value:function(e){null===e.ownerDocument?e.ownerDocument=this.doc:e.ownerDocument!==this.doc&&i.WrongDocumentError()}},removeChildren:{value:function(){var e=this.childNodes.length;if(e){for(var t=this.rooted?this.ownerDocument:null,r=0;r<e;r++)t&&t.mutateRemove(this.childNodes[r]),this.childNodes[r].parentNode=null;this.childNodes.length=0,this.modify()}}},insert:{value:function(e,t){this._insertOrReplace(e,t,!1)}},_insertOrReplace:{value:function(e,t,r){var n=e.childNodes;if(this.nodeType===y&&this.rooted&&i.HierarchyRequestError(),this.parentNode===e){var o=this.index;if(o===t)return;o<t&&t--}if(r){var a=e.childNodes[t];a.rooted&&a.doc.mutateRemove(a),a.parentNode=null}if(this.rooted&&e.rooted){var s=this.parentNode;s.childNodes.splice(this.index,1),s.modify(),this.parentNode=e,r?n[t]=this:n.splice(t,0,this),this._index=t,e.modify(),e.doc.mutateMove(this)}else if(this.nodeType===y){var c,l=[t,r?1:0];for(c=0;c<this.childNodes.length;c++){var u=this.childNodes[c];l.push(u),u.parentNode=e,u._index=t+c}if(this.childNodes.length=0,n.splice.apply(n,l),e.rooted)for(e.modify(),c=2;c<l.length;c++)e.doc.mutateInsert(l[c])}else this.parentNode&&this.remove(),this.parentNode=e,r?n[t]=this:n.splice(t,0,this),this._index=t,e.rooted&&(e.modify(),e.doc.mutateInsert(this))}},lastModTime:{get:function(){return this._lastModTime||(this._lastModTime=this.doc.modclock),this._lastModTime}},modify:{value:function(){if(this.doc.modclock)for(var e=++this.doc.modclock,t=this;t;t=t.parentElement)t._lastModTime&&(t._lastModTime=e)}},doc:{get:function(){return this.ownerDocument||this}},rooted:{get:function(){return!!this._nid}},normalize:{value:function(){for(var e=0;e<this.childNodes.length;e++){var t=this.childNodes[e];if(t.normalize&&t.normalize(),t.nodeType===a.TEXT_NODE)if(""!==t.nodeValue){if(e){var r=this.childNodes[e-1];r.nodeType===a.TEXT_NODE&&(r.appendData(t.nodeValue),this.removeChild(t),e--)}}else this.removeChild(t),e--}}},serialize:{value:function(){for(var e="",t=0,r=this.childNodes.length;t<r;t++){var n=this.childNodes[t];switch(n.nodeType){case 1:var a=n.namespaceURI,c=a===o.HTML,l=c||a===o.SVG||a===o.MATHML?n.localName:n.tagName;e+="<"+l;for(var u=0,p=n._numattrs;u<p;u++){var h=n._attr(u);e+=" "+A(h),void 0!==h.value&&(e+='="'+C(h.value)+'"')}if(e+=">",!c||!x[l]){var f=n.serialize();c&&N[l]&&"\n"===f.charAt(0)&&(e+="\n"),e+=f,e+="</"+l+">"}break;case 3:case 4:var d;d=this.nodeType===s&&this.namespaceURI===o.HTML?this.tagName:"",k[d]||"NOSCRIPT"===d&&this.ownerDocument._scripting_enabled?e+=n.data:e+=R(n.data);break;case 8:e+="\x3c!--"+n.data+"--\x3e";break;case 7:e+="<?"+n.target+" "+n.data+"?>";break;case 10:e+="<!DOCTYPE "+n.name,e+=">";break;default:i.InvalidState()}}return e}},ELEMENT_NODE:{value:s},ATTRIBUTE_NODE:{value:c},TEXT_NODE:{value:l},CDATA_SECTION_NODE:{value:u},ENTITY_REFERENCE_NODE:{value:p},ENTITY_NODE:{value:h},PROCESSING_INSTRUCTION_NODE:{value:f},COMMENT_NODE:{value:d},DOCUMENT_NODE:{value:m},DOCUMENT_TYPE_NODE:{value:g},DOCUMENT_FRAGMENT_NODE:{value:y},NOTATION_NODE:{value:v}})},function(e,t,r){e.exports=r(2)(62)},function(e,t,r){e.exports=r(2)(6)},function(e,t,r){
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
!function(e,t,r,n,i,o,a,s,c){"use strict";
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var l=function(){},u=function(){},p=function(){function e(e){var t=this;this.normalizedNames=new Map,this.lazyUpdate=null,e?this.lazyInit="string"==typeof e?function(){t.headers=new Map,e.split("\n").forEach(function(e){var r=e.indexOf(":");if(r>0){var n=e.slice(0,r),i=n.toLowerCase(),o=e.slice(r+1).trim();t.maybeSetNormalizedName(n,i),t.headers.has(i)?t.headers.get(i).push(o):t.headers.set(i,[o])}})}:function(){t.headers=new Map,Object.keys(e).forEach(function(r){var n=e[r],i=r.toLowerCase();"string"==typeof n&&(n=[n]),n.length>0&&(t.headers.set(i,n),t.maybeSetNormalizedName(r,i))})}:this.headers=new Map}return e.prototype.has=function(e){return this.init(),this.headers.has(e.toLowerCase())},e.prototype.get=function(e){this.init();var t=this.headers.get(e.toLowerCase());return t&&t.length>0?t[0]:null},e.prototype.keys=function(){return this.init(),Array.from(this.normalizedNames.values())},e.prototype.getAll=function(e){return this.init(),this.headers.get(e.toLowerCase())||null},e.prototype.append=function(e,t){return this.clone({name:e,value:t,op:"a"})},e.prototype.set=function(e,t){return this.clone({name:e,value:t,op:"s"})},e.prototype.delete=function(e,t){return this.clone({name:e,value:t,op:"d"})},e.prototype.maybeSetNormalizedName=function(e,t){this.normalizedNames.has(t)||this.normalizedNames.set(t,e)},e.prototype.init=function(){var t=this;this.lazyInit&&(this.lazyInit instanceof e?this.copyFrom(this.lazyInit):this.lazyInit(),this.lazyInit=null,this.lazyUpdate&&(this.lazyUpdate.forEach(function(e){return t.applyUpdate(e)}),this.lazyUpdate=null))},e.prototype.copyFrom=function(e){var t=this;e.init(),Array.from(e.headers.keys()).forEach(function(r){t.headers.set(r,e.headers.get(r)),t.normalizedNames.set(r,e.normalizedNames.get(r))})},e.prototype.clone=function(t){var r=new e;return r.lazyInit=this.lazyInit&&this.lazyInit instanceof e?this.lazyInit:this,r.lazyUpdate=(this.lazyUpdate||[]).concat([t]),r},e.prototype.applyUpdate=function(e){var t=e.name.toLowerCase();switch(e.op){case"a":case"s":var r=e.value;if("string"==typeof r&&(r=[r]),0===r.length)return;this.maybeSetNormalizedName(e.name,t);var n=("a"===e.op?this.headers.get(t):void 0)||[];n.push.apply(n,r),this.headers.set(t,n);break;case"d":var i=e.value;if(i){var o=this.headers.get(t);if(!o)return;0===(o=o.filter(function(e){return-1===i.indexOf(e)})).length?(this.headers.delete(t),this.normalizedNames.delete(t)):this.headers.set(t,o)}else this.headers.delete(t),this.normalizedNames.delete(t)}},e.prototype.forEach=function(e){var t=this;this.init(),Array.from(this.normalizedNames.keys()).forEach(function(r){return e(t.normalizedNames.get(r),t.headers.get(r))})},e}(),h=function(){function e(){}return e.prototype.encodeKey=function(e){return f(e)},e.prototype.encodeValue=function(e){return f(e)},e.prototype.decodeKey=function(e){return decodeURIComponent(e)},e.prototype.decodeValue=function(e){return decodeURIComponent(e)},e}();function f(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/gi,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%2B/gi,"+").replace(/%3D/gi,"=").replace(/%3F/gi,"?").replace(/%2F/gi,"/")}var d=function(){function e(e){void 0===e&&(e={});var t=this;if(this.updates=null,this.cloneFrom=null,this.encoder=e.encoder||new h,e.fromString){if(e.fromObject)throw new Error("Cannot specify both fromString and fromObject.");this.map=function(e,t){var r=new Map;if(e.length>0){var n=e.split("&");n.forEach(function(e){var n=e.indexOf("="),i=-1==n?[t.decodeKey(e),""]:[t.decodeKey(e.slice(0,n)),t.decodeValue(e.slice(n+1))],o=i[0],a=i[1],s=r.get(o)||[];s.push(a),r.set(o,s)})}return r}(e.fromString,this.encoder)}else e.fromObject?(this.map=new Map,Object.keys(e.fromObject).forEach(function(r){var n=e.fromObject[r];t.map.set(r,Array.isArray(n)?n:[n])})):this.map=null}return e.prototype.has=function(e){return this.init(),this.map.has(e)},e.prototype.get=function(e){this.init();var t=this.map.get(e);return t?t[0]:null},e.prototype.getAll=function(e){return this.init(),this.map.get(e)||null},e.prototype.keys=function(){return this.init(),Array.from(this.map.keys())},e.prototype.append=function(e,t){return this.clone({param:e,value:t,op:"a"})},e.prototype.set=function(e,t){return this.clone({param:e,value:t,op:"s"})},e.prototype.delete=function(e,t){return this.clone({param:e,value:t,op:"d"})},e.prototype.toString=function(){var e=this;return this.init(),this.keys().map(function(t){var r=e.encoder.encodeKey(t);return e.map.get(t).map(function(t){return r+"="+e.encoder.encodeValue(t)}).join("&")}).join("&")},e.prototype.clone=function(t){var r=new e({encoder:this.encoder});return r.cloneFrom=this.cloneFrom||this,r.updates=(this.updates||[]).concat([t]),r},e.prototype.init=function(){var e=this;null===this.map&&(this.map=new Map),null!==this.cloneFrom&&(this.cloneFrom.init(),this.cloneFrom.keys().forEach(function(t){return e.map.set(t,e.cloneFrom.map.get(t))}),this.updates.forEach(function(t){switch(t.op){case"a":case"s":var r=("a"===t.op?e.map.get(t.param):void 0)||[];r.push(t.value),e.map.set(t.param,r);break;case"d":if(void 0===t.value){e.map.delete(t.param);break}var n=e.map.get(t.param)||[],i=n.indexOf(t.value);-1!==i&&n.splice(i,1),n.length>0?e.map.set(t.param,n):e.map.delete(t.param)}}),this.cloneFrom=null)},e}();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function m(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer}function g(e){return"undefined"!=typeof Blob&&e instanceof Blob}function y(e){return"undefined"!=typeof FormData&&e instanceof FormData}var v=function(){function e(e,t,r,n){var i;if(this.url=t,this.body=null,this.reportProgress=!1,this.withCredentials=!1,this.responseType="json",this.method=e.toUpperCase(),function(e){switch(e){case"DELETE":case"GET":case"HEAD":case"OPTIONS":case"JSONP":return!1;default:return!0}}(this.method)||n?(this.body=void 0!==r?r:null,i=n):i=r,i&&(this.reportProgress=!!i.reportProgress,this.withCredentials=!!i.withCredentials,i.responseType&&(this.responseType=i.responseType),i.headers&&(this.headers=i.headers),i.params&&(this.params=i.params)),this.headers||(this.headers=new p),this.params){var o=this.params.toString();if(0===o.length)this.urlWithParams=t;else{var a=t.indexOf("?"),s=-1===a?"?":a<t.length-1?"&":"";this.urlWithParams=t+s+o}}else this.params=new d,this.urlWithParams=t}return e.prototype.serializeBody=function(){return null===this.body?null:m(this.body)||g(this.body)||y(this.body)||"string"==typeof this.body?this.body:this.body instanceof d?this.body.toString():"object"==typeof this.body||"boolean"==typeof this.body||Array.isArray(this.body)?JSON.stringify(this.body):this.body.toString()},e.prototype.detectContentTypeHeader=function(){return null===this.body?null:y(this.body)?null:g(this.body)?this.body.type||null:m(this.body)?null:"string"==typeof this.body?"text/plain":this.body instanceof d?"application/x-www-form-urlencoded;charset=UTF-8":"object"==typeof this.body||"number"==typeof this.body||Array.isArray(this.body)?"application/json":null},e.prototype.clone=function(t){void 0===t&&(t={});var r=t.method||this.method,n=t.url||this.url,i=t.responseType||this.responseType,o=void 0!==t.body?t.body:this.body,a=void 0!==t.withCredentials?t.withCredentials:this.withCredentials,s=void 0!==t.reportProgress?t.reportProgress:this.reportProgress,c=t.headers||this.headers,l=t.params||this.params;return void 0!==t.setHeaders&&(c=Object.keys(t.setHeaders).reduce(function(e,r){return e.set(r,t.setHeaders[r])},c)),t.setParams&&(l=Object.keys(t.setParams).reduce(function(e,r){return e.set(r,t.setParams[r])},l)),new e(r,n,o,{params:l,headers:c,reportProgress:s,responseType:i,withCredentials:a})},e}(),b={Sent:0,UploadProgress:1,ResponseHeader:2,DownloadProgress:3,Response:4,User:5};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */b[b.Sent]="Sent",b[b.UploadProgress]="UploadProgress",b[b.ResponseHeader]="ResponseHeader",b[b.DownloadProgress]="DownloadProgress",b[b.Response]="Response",b[b.User]="User";var _=function(e,t,r){void 0===t&&(t=200),void 0===r&&(r="OK"),this.headers=e.headers||new p,this.status=void 0!==e.status?e.status:t,this.statusText=e.statusText||r,this.url=e.url||null,this.ok=this.status>=200&&this.status<300},E=function(e){function t(t){void 0===t&&(t={});var r=e.call(this,t)||this;return r.type=b.ResponseHeader,r}return a.__extends(t,e),t.prototype.clone=function(e){return void 0===e&&(e={}),new t({headers:e.headers||this.headers,status:void 0!==e.status?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})},t}(_),w=function(e){function t(t){void 0===t&&(t={});var r=e.call(this,t)||this;return r.type=b.Response,r.body=void 0!==t.body?t.body:null,r}return a.__extends(t,e),t.prototype.clone=function(e){return void 0===e&&(e={}),new t({body:void 0!==e.body?e.body:this.body,headers:e.headers||this.headers,status:void 0!==e.status?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})},t}(_),T=function(e){function t(t){var r=e.call(this,t,0,"Unknown Error")||this;return r.name="HttpErrorResponse",r.ok=!1,r.status>=200&&r.status<300?r.message="Http failure during parsing for "+(t.url||"(unknown url)"):r.message="Http failure response for "+(t.url||"(unknown url)")+": "+t.status+" "+t.statusText,r.error=t.error||null,r}return a.__extends(t,e),t}(_);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function S(e,t){return{body:t,headers:e.headers,observe:e.observe,params:e.params,reportProgress:e.reportProgress,responseType:e.responseType,withCredentials:e.withCredentials}}var k=function(){function e(e){this.handler=e}return e.prototype.request=function(e,t,a){var s,c=this;if(void 0===a&&(a={}),e instanceof v)s=e;else{var l=void 0;l=a.headers instanceof p?a.headers:new p(a.headers);var u=void 0;a.params&&(u=a.params instanceof d?a.params:new d({fromObject:a.params})),s=new v(e,t,void 0!==a.body?a.body:null,{headers:l,params:u,reportProgress:a.reportProgress,responseType:a.responseType||"json",withCredentials:a.withCredentials})}var h=n.concatMap.call(r.of(s),function(e){return c.handler.handle(e)});if(e instanceof v||"events"===a.observe)return h;var f=i.filter.call(h,function(e){return e instanceof w});switch(a.observe||"body"){case"body":switch(s.responseType){case"arraybuffer":return o.map.call(f,function(e){if(null!==e.body&&!(e.body instanceof ArrayBuffer))throw new Error("Response is not an ArrayBuffer.");return e.body});case"blob":return o.map.call(f,function(e){if(null!==e.body&&!(e.body instanceof Blob))throw new Error("Response is not a Blob.");return e.body});case"text":return o.map.call(f,function(e){if(null!==e.body&&"string"!=typeof e.body)throw new Error("Response is not a string.");return e.body});case"json":default:return o.map.call(f,function(e){return e.body})}case"response":return f;default:throw new Error("Unreachable: unhandled observe type "+a.observe+"}")}},e.prototype.delete=function(e,t){return void 0===t&&(t={}),this.request("DELETE",e,t)},e.prototype.get=function(e,t){return void 0===t&&(t={}),this.request("GET",e,t)},e.prototype.head=function(e,t){return void 0===t&&(t={}),this.request("HEAD",e,t)},e.prototype.jsonp=function(e,t){return this.request("JSONP",e,{params:(new d).append(t,"JSONP_CALLBACK"),observe:"body",responseType:"json"})},e.prototype.options=function(e,t){return void 0===t&&(t={}),this.request("OPTIONS",e,t)},e.prototype.patch=function(e,t,r){return void 0===r&&(r={}),this.request("PATCH",e,S(r,t))},e.prototype.post=function(e,t,r){return void 0===r&&(r={}),this.request("POST",e,S(r,t))},e.prototype.put=function(e,t,r){return void 0===r&&(r={}),this.request("PUT",e,S(r,t))},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:l}]},e}(),x=function(){function e(e,t){this.next=e,this.interceptor=t}return e.prototype.handle=function(e){return this.interceptor.intercept(e,this.next)},e}(),N=new t.InjectionToken("HTTP_INTERCEPTORS"),R=function(){function e(){}return e.prototype.intercept=function(e,t){return t.handle(e)},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[]},e}(),C=0,A=function(){},O=function(){function e(e,t){this.callbackMap=e,this.document=t}return e.prototype.nextCallback=function(){return"ng_jsonp_callback_"+C++},e.prototype.handle=function(e){var t=this;if("JSONP"!==e.method)throw new Error("JSONP requests must use JSONP request method.");if("json"!==e.responseType)throw new Error("JSONP requests must use Json response type.");return new c.Observable(function(r){var n=t.nextCallback(),i=e.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/,"="+n+"$1"),o=t.document.createElement("script");o.src=i;var a=null,s=!1,c=!1;t.callbackMap[n]=function(e){delete t.callbackMap[n],c||(a=e,s=!0)};var l=function(){o.parentNode&&o.parentNode.removeChild(o),delete t.callbackMap[n]},u=function(e){c||(l(),s?(r.next(new w({body:a,status:200,statusText:"OK",url:i})),r.complete()):r.error(new T({url:i,status:0,statusText:"JSONP Error",error:new Error("JSONP injected script did not invoke callback.")})))},p=function(e){c||(l(),r.error(new T({error:e,status:0,statusText:"JSONP Error",url:i})))};return o.addEventListener("load",u),o.addEventListener("error",p),t.document.body.appendChild(o),r.next({type:b.Sent}),function(){c=!0,o.removeEventListener("load",u),o.removeEventListener("error",p),l()}})},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:A},{type:void 0,decorators:[{type:t.Inject,args:[s.DOCUMENT]}]}]},e}(),L=function(){function e(e){this.jsonp=e}return e.prototype.intercept=function(e,t){return"JSONP"===e.method?this.jsonp.handle(e):t.handle(e)},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:O}]},e}(),D=/^\)\]\}',?\n/,I=function(){},M=function(){function e(){}return e.prototype.build=function(){return new XMLHttpRequest},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[]},e}(),P=function(){function e(e){this.xhrFactory=e}return e.prototype.handle=function(e){var t=this;if("JSONP"===e.method)throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");return new c.Observable(function(r){var n=t.xhrFactory.build();if(n.open(e.method,e.urlWithParams),e.withCredentials&&(n.withCredentials=!0),e.headers.forEach(function(e,t){return n.setRequestHeader(e,t.join(","))}),e.headers.has("Accept")||n.setRequestHeader("Accept","application/json, text/plain, */*"),!e.headers.has("Content-Type")){var i=e.detectContentTypeHeader();null!==i&&n.setRequestHeader("Content-Type",i)}if(e.responseType){var o=e.responseType.toLowerCase();n.responseType="json"!==o?o:"text"}var a=e.serializeBody(),s=null,c=function(){if(null!==s)return s;var t=1223===n.status?204:n.status,r=n.statusText||"OK",i=new p(n.getAllResponseHeaders()),o=function(e){return"responseURL"in e&&e.responseURL?e.responseURL:/^X-Request-URL:/m.test(e.getAllResponseHeaders())?e.getResponseHeader("X-Request-URL"):null}(n)||e.url;return s=new E({headers:i,status:t,statusText:r,url:o})},l=function(){var t=c(),i=t.headers,o=t.status,a=t.statusText,s=t.url,l=null;204!==o&&(l=void 0===n.response?n.responseText:n.response),0===o&&(o=l?200:0);var u=o>=200&&o<300;if("json"===e.responseType&&"string"==typeof l){var p=l;l=l.replace(D,"");try{l=""!==l?JSON.parse(l):null}catch(e){l=p,u&&(u=!1,l={error:e,text:l})}}u?(r.next(new w({body:l,headers:i,status:o,statusText:a,url:s||void 0})),r.complete()):r.error(new T({error:l,headers:i,status:o,statusText:a,url:s||void 0}))},u=function(e){var t=new T({error:e,status:n.status||0,statusText:n.statusText||"Unknown Error"});r.error(t)},h=!1,f=function(t){h||(r.next(c()),h=!0);var i={type:b.DownloadProgress,loaded:t.loaded};t.lengthComputable&&(i.total=t.total),"text"===e.responseType&&n.responseText&&(i.partialText=n.responseText),r.next(i)},d=function(e){var t={type:b.UploadProgress,loaded:e.loaded};e.lengthComputable&&(t.total=e.total),r.next(t)};return n.addEventListener("load",l),n.addEventListener("error",u),e.reportProgress&&(n.addEventListener("progress",f),null!==a&&n.upload&&n.upload.addEventListener("progress",d)),n.send(a),r.next({type:b.Sent}),function(){n.removeEventListener("error",u),n.removeEventListener("load",l),e.reportProgress&&(n.removeEventListener("progress",f),null!==a&&n.upload&&n.upload.removeEventListener("progress",d)),n.abort()}})},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:I}]},e}(),q=new t.InjectionToken("XSRF_COOKIE_NAME"),H=new t.InjectionToken("XSRF_HEADER_NAME"),B=function(){},j=function(){function e(e,t,r){this.doc=e,this.platform=t,this.cookieName=r,this.lastCookieString="",this.lastToken=null,this.parseCount=0}return e.prototype.getToken=function(){if("server"===this.platform)return null;var e=this.doc.cookie||"";return e!==this.lastCookieString&&(this.parseCount++,this.lastToken=s.ɵparseCookieValue(e,this.cookieName),this.lastCookieString=e),this.lastToken},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[s.DOCUMENT]}]},{type:void 0,decorators:[{type:t.Inject,args:[t.PLATFORM_ID]}]},{type:void 0,decorators:[{type:t.Inject,args:[q]}]}]},e}(),F=function(){function e(e,t){this.tokenService=e,this.headerName=t}return e.prototype.intercept=function(e,t){var r=e.url.toLowerCase();if("GET"===e.method||"HEAD"===e.method||r.startsWith("http://")||r.startsWith("https://"))return t.handle(e);var n=this.tokenService.getToken();return null===n||e.headers.has(this.headerName)||(e=e.clone({headers:e.headers.set(this.headerName,n)})),t.handle(e)},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:B},{type:void 0,decorators:[{type:t.Inject,args:[H]}]}]},e}(),U=function(){function e(e,t){this.backend=e,this.injector=t,this.chain=null}return e.prototype.handle=function(e){if(null===this.chain){var t=this.injector.get(N,[]);this.chain=t.reduceRight(function(e,t){return new x(e,t)},this.backend)}return this.chain.handle(e)},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:u},{type:t.Injector}]},e}();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function z(){return"object"==typeof window?window:{}}var V=function(){function e(){}return e.disable=function(){return{ngModule:e,providers:[{provide:F,useClass:R}]}},e.withOptions=function(t){return void 0===t&&(t={}),{ngModule:e,providers:[t.cookieName?{provide:q,useValue:t.cookieName}:[],t.headerName?{provide:H,useValue:t.headerName}:[]]}},e.decorators=[{type:t.NgModule,args:[{providers:[F,{provide:N,useExisting:F,multi:!0},{provide:B,useClass:j},{provide:q,useValue:"XSRF-TOKEN"},{provide:H,useValue:"X-XSRF-TOKEN"}]}]}],e.ctorParameters=function(){return[]},e}(),W=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[V.withOptions({cookieName:"XSRF-TOKEN",headerName:"X-XSRF-TOKEN"})],providers:[k,{provide:l,useClass:U},P,{provide:u,useExisting:P},M,{provide:I,useExisting:M}]}]}],e.ctorParameters=function(){return[]},e}(),G=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{providers:[O,{provide:A,useFactory:z},{provide:N,useClass:L,multi:!0}]}]}],e.ctorParameters=function(){return[]},e}();e.HttpBackend=u,e.HttpHandler=l,e.HttpClient=k,e.HttpHeaders=p,e.HTTP_INTERCEPTORS=N,e.JsonpClientBackend=O,e.JsonpInterceptor=L,e.HttpClientJsonpModule=G,e.HttpClientModule=W,e.HttpClientXsrfModule=V,e.ɵinterceptingHandler=function(e,t){return void 0===t&&(t=[]),t?t.reduceRight(function(e,t){return new x(e,t)},e):e},e.HttpParams=d,e.HttpUrlEncodingCodec=h,e.HttpRequest=v,e.HttpErrorResponse=T,e.HttpEventType=b,e.HttpHeaderResponse=E,e.HttpResponse=w,e.HttpResponseBase=_,e.HttpXhrBackend=P,e.XhrFactory=I,e.HttpXsrfTokenExtractor=B,e.ɵa=R,e.ɵb=A,e.ɵc=U,e.ɵd=z,e.ɵe=M,e.ɵh=j,e.ɵi=F,e.ɵf=q,e.ɵg=H,Object.defineProperty(e,"__esModule",{value:!0})}(t,r(0),r(115),r(114),r(52),r(51),r(113),r(19),r(12))},function(e,t,r){
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
!function(e,t,n,i,o,a,s,c,l,u,p,h,f,d,m,g){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])};function v(e,t){function r(){this.constructor=e}y(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var b=r(108);function _(e){return new Error("This method is not implemented in DominoAdapter: "+e)}function E(e,t){void 0===t&&(t="/");var r=b.createWindow(e,t),n=r.document;return n}var w=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return v(t,e),t.makeCurrent=function(){n.ɵsetRootDomAdapter(new t)},t.prototype.logError=function(e){console.error(e)},t.prototype.log=function(e){console.log(e)},t.prototype.logGroup=function(e){console.error(e)},t.prototype.logGroupEnd=function(){},t.prototype.supportsDOMEvents=function(){return!1},t.prototype.supportsNativeShadowDOM=function(){return!1},t.prototype.contains=function(e,t){for(var r=t;r;){if(r===e)return!0;r=r.parent}return!1},t.prototype.createHtmlDocument=function(){return E("<html><head><title>fakeTitle</title></head><body></body></html>")},t.prototype.getDefaultDocument=function(){return t.defaultDoc||(t.defaultDoc=b.createDocument()),t.defaultDoc},t.prototype.createShadowRoot=function(e,t){return void 0===t&&(t=document),e.shadowRoot=t.createDocumentFragment(),e.shadowRoot.parent=e,e.shadowRoot},t.prototype.getShadowRoot=function(e){return e.shadowRoot},t.prototype.isTextNode=function(e){return e.nodeType===t.defaultDoc.TEXT_NODE},t.prototype.isCommentNode=function(e){return e.nodeType===t.defaultDoc.COMMENT_NODE},t.prototype.isElementNode=function(e){return!!e&&e.nodeType===t.defaultDoc.ELEMENT_NODE},t.prototype.hasShadowRoot=function(e){return null!=e.shadowRoot},t.prototype.isShadowRoot=function(e){return this.getShadowRoot(e)==e},t.prototype.getProperty=function(e,t){return"href"===t?this.getAttribute(e,"href"):"innerText"===t?e.textContent:e[t]},t.prototype.setProperty=function(e,t,r){"href"===t?this.setAttribute(e,"href",r):"innerText"===t&&(e.textContent=r),e[t]=r},t.prototype.getGlobalEventTarget=function(e,t){return"window"===t?e.defaultView:"document"===t?e:"body"===t?e.body:null},t.prototype.getBaseHref=function(e){var t=this.querySelector(e.documentElement,"base"),r="";return t&&(r=this.getHref(t)),r},t.prototype._readStyleAttribute=function(e){var t={},r=e.getAttribute("style");if(r)for(var n=r.split(/;+/g),i=0;i<n.length;i++){var o=n[i].trim();if(o.length>0){var a=o.indexOf(":");if(-1===a)throw new Error("Invalid CSS style: "+o);var s=o.substr(0,a).trim();t[s]=o.substr(a+1).trim()}}return t},t.prototype._writeStyleAttribute=function(e,t){var r="";for(var n in t){var i=t[n];i&&(r+=n+":"+t[n]+";")}e.setAttribute("style",r)},t.prototype.setStyle=function(e,t,r){t=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();var n=this._readStyleAttribute(e);n[t]=r||"",this._writeStyleAttribute(e,n)},t.prototype.removeStyle=function(e,t){this.setStyle(e,t,"")},t.prototype.getStyle=function(e,t){var r=this._readStyleAttribute(e);return r[t]||""},t.prototype.hasStyle=function(e,t,r){var n=this.getStyle(e,t);return r?n==r:n.length>0},t.prototype.dispatchEvent=function(e,t){e.dispatchEvent(t);var r=e.ownerDocument||e,n=r.defaultView;n&&n.dispatchEvent(t)},t.prototype.getHistory=function(){throw _("getHistory")},t.prototype.getLocation=function(){throw _("getLocation")},t.prototype.getUserAgent=function(){return"Fake user agent"},t.prototype.supportsWebAnimation=function(){return!1},t.prototype.performanceNow=function(){return Date.now()},t.prototype.getAnimationPrefix=function(){return""},t.prototype.getTransitionEnd=function(){return"transitionend"},t.prototype.supportsAnimation=function(){return!0},t.prototype.getDistributedNodes=function(e){throw _("getDistributedNodes")},t.prototype.supportsCookies=function(){return!1},t.prototype.getCookie=function(e){throw _("getCookie")},t.prototype.setCookie=function(e,t){throw _("setCookie")},t}(n.ɵBrowserDomAdapter),T=function(){function e(e){this._doc=e}return e.prototype.renderToString=function(){return this._doc.serialize()},e.prototype.getDocument=function(){return this._doc},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[n.DOCUMENT]}]}]},e}(),S=r(98),k=/^[a-zA-Z\-\+.]+:\/\//,x=function(){function e(){}return e.prototype.build=function(){return new S.XMLHttpRequest},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[]},e}(),N=function(){function e(){}return e.prototype.configureRequest=function(e){},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[]},e}(),R=function(){function e(){}return e.prototype.wrap=function(e){var t=this;return new u.Observable(function(r){var n=null,i=!1,o=null,a=null,s=null,c=Zone.current.scheduleMacroTask("ZoneMacroTaskWrapper.subscribe",function(){null!==s?r.error(s):(r.next(a),r.complete())},{},function(){return null},function(e){i&&(i=!1,o&&(o.unsubscribe(),o=null))});return function(r){n=r,i=!0;var c=t.delegate(e);o=c.subscribe(function(e){return a=e},function(e){if(!i)throw new Error("An http observable was completed twice. This shouldn't happen, please file a bug.");s=e,i=!1,n.invoke()},function(){if(!i)throw new Error("An http observable was completed twice. This shouldn't happen, please file a bug.");i=!1,n.invoke()})}(c),function(){i&&n&&(n.zone.cancelTask(n),i=!1),o&&(o.unsubscribe(),o=null)}})},e}(),C=function(e){function t(t,r){var n=e.call(this)||this;return n.request=t,n.backend=r,function(e){if(!k.test(e))throw new Error("URLs requested via Http on the server must be absolute. URL: "+e)}(t.url),n.response=n.wrap(t),n}return v(t,e),t.prototype.delegate=function(e){return this.lastConnection=this.backend.createConnection(e),this.lastConnection.response},Object.defineProperty(t.prototype,"readyState",{get:function(){return this.lastConnection?this.lastConnection.readyState:s.ReadyState.Unsent},enumerable:!0,configurable:!0}),t}(R),A=function(){function e(e){this.backend=e}return e.prototype.createConnection=function(e){return new C(e,this.backend)},e}(),O=function(e){function t(t){var r=e.call(this)||this;return r.backend=t,r}return v(t,e),t.prototype.handle=function(e){return this.wrap(e)},t.prototype.delegate=function(e){return this.backend.handle(e)},t}(R);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function L(e,t){var r=new A(e);return new s.Http(r,t)}function D(e,t){var r=a.ɵinterceptingHandler(e,t);return new O(r)}var I=[{provide:s.Http,useFactory:L,deps:[s.XHRBackend,s.RequestOptions]},{provide:s.BrowserXhr,useClass:x},{provide:s.XSRFStrategy,useClass:N},{provide:a.XhrFactory,useClass:x},{provide:a.HttpHandler,useFactory:D,deps:[a.HttpBackend,[new t.Optional,a.HTTP_INTERCEPTORS]]}],M=new t.InjectionToken("Server.INITIAL_CONFIG"),P=new t.InjectionToken("Server.RENDER_MODULE_HOOK");
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function q(e){var t=h.parse(e);return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}}var H=function(){function e(e,t){this._doc=e,this.pathname="/",this.search="",this.hash="",this._hashUpdate=new p.Subject;var r=t;if(r&&r.url){var n=q(r.url);this.pathname=n.pathname,this.search=n.search,this.hash=n.hash}}return e.prototype.getBaseHrefFromDOM=function(){return n.ɵgetDOM().getBaseHref(this._doc)},e.prototype.onPopState=function(e){},e.prototype.onHashChange=function(e){this._hashUpdate.subscribe(e)},Object.defineProperty(e.prototype,"url",{get:function(){return""+this.pathname+this.search+this.hash},enumerable:!0,configurable:!0}),e.prototype.setHash=function(e,t){var r=this;if(this.hash!==e){this.hash=e;var n,i=this.url;n=function(){return r._hashUpdate.next({type:"hashchange",oldUrl:t,newUrl:i})},Zone.current.scheduleMicroTask("scheduleMicrotask",n)}},e.prototype.replaceState=function(e,t,r){var n=this.url,i=q(r);this.pathname=i.pathname,this.search=i.search,this.setHash(i.hash,n)},e.prototype.pushState=function(e,t,r){this.replaceState(e,t,r)},e.prototype.forward=function(){throw new Error("Not implemented")},e.prototype.back=function(){throw new Error("Not implemented")},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[n.DOCUMENT]}]},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:[M]}]}]},e}(),B=[],j=function(){function e(e,t,r){this.ngZone=e,this.document=t,this.sharedStylesHost=r,this.rendererByCompId=new Map,this.schema=new f.DomElementSchemaRegistry,this.defaultRenderer=new F(t,e,this.schema)}return e.prototype.createRenderer=function(e,r){if(!e||!r)return this.defaultRenderer;switch(r.encapsulation){case t.ViewEncapsulation.Native:case t.ViewEncapsulation.Emulated:var i=this.rendererByCompId.get(r.id);return i||(i=new V(this.document,this.ngZone,this.sharedStylesHost,this.schema,r),this.rendererByCompId.set(r.id,i)),i.applyToHost(e),i;case t.ViewEncapsulation.Native:throw new Error("Native encapsulation is not supported on the server!");default:if(!this.rendererByCompId.has(r.id)){var o=n.ɵflattenStyles(r.id,r.styles,[]);this.sharedStylesHost.addStyles(o),this.rendererByCompId.set(r.id,this.defaultRenderer)}return this.defaultRenderer}},e.prototype.begin=function(){},e.prototype.end=function(){},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:t.NgZone},{type:void 0,decorators:[{type:t.Inject,args:[n.DOCUMENT]}]},{type:n.ɵSharedStylesHost}]},e}(),F=function(){function e(e,t,r){this.document=e,this.ngZone=t,this.schema=r,this.data=Object.create(null)}return e.prototype.destroy=function(){},e.prototype.createElement=function(e,t,r){return t?n.ɵgetDOM().createElementNS(n.ɵNAMESPACE_URIS[t],e):n.ɵgetDOM().createElement(e)},e.prototype.createComment=function(e,t){return n.ɵgetDOM().createComment(e)},e.prototype.createText=function(e,t){return n.ɵgetDOM().createTextNode(e)},e.prototype.appendChild=function(e,t){n.ɵgetDOM().appendChild(e,t)},e.prototype.insertBefore=function(e,t,r){e&&n.ɵgetDOM().insertBefore(e,r,t)},e.prototype.removeChild=function(e,t){e&&n.ɵgetDOM().removeChild(e,t)},e.prototype.selectRootElement=function(e,t){var r;if("string"==typeof e){if(!(r=n.ɵgetDOM().querySelector(this.document,e)))throw new Error('The selector "'+e+'" did not match any elements')}else r=e;return n.ɵgetDOM().clearNodes(r),r},e.prototype.parentNode=function(e){return n.ɵgetDOM().parentElement(e)},e.prototype.nextSibling=function(e){return n.ɵgetDOM().nextSibling(e)},e.prototype.setAttribute=function(e,t,r,i){i?n.ɵgetDOM().setAttributeNS(e,n.ɵNAMESPACE_URIS[i],i+":"+t,r):n.ɵgetDOM().setAttribute(e,t,r)},e.prototype.removeAttribute=function(e,t,r){r?n.ɵgetDOM().removeAttributeNS(e,n.ɵNAMESPACE_URIS[r],t):n.ɵgetDOM().removeAttribute(e,t)},e.prototype.addClass=function(e,t){n.ɵgetDOM().addClass(e,t)},e.prototype.removeClass=function(e,t){n.ɵgetDOM().removeClass(e,t)},e.prototype.setStyle=function(e,t,r,i){n.ɵgetDOM().setStyle(e,t,r)},e.prototype.removeStyle=function(e,t,r){n.ɵgetDOM().removeStyle(e,t)},e.prototype._isSafeToReflectProperty=function(e,t){return this.schema.securityContext(e,t,!0)===this.schema.securityContext(e,t,!1)},e.prototype.setProperty=function(e,t,r){z(t,"property"),n.ɵgetDOM().setProperty(e,t,r);var i=e.tagName.toLowerCase();null!=r&&("number"==typeof r||"string"==typeof r)&&this.schema.hasElement(i,B)&&this.schema.hasProperty(i,t,B)&&this._isSafeToReflectProperty(i,t)&&this.setAttribute(e,t,r.toString())},e.prototype.setValue=function(e,t){n.ɵgetDOM().setText(e,t)},e.prototype.listen=function(e,t,r){var i=this;z(t,"listener");var o="string"==typeof e?n.ɵgetDOM().getGlobalEventTarget(this.document,e):e,a=function(e){return i.ngZone.runGuarded(function(){return r(e)})};return this.ngZone.runOutsideAngular(function(){return n.ɵgetDOM().onAndCancel(o,t,a)})},e}(),U="@".charCodeAt(0);function z(e,t){if(e.charCodeAt(0)===U)throw new Error("Found the synthetic "+t+" "+e+'. Please include either "BrowserAnimationsModule" or "NoopAnimationsModule" in your application.')}var V=function(e){function t(t,r,i,o,a){var s=e.call(this,t,r,o)||this;s.component=a;var c=n.ɵflattenStyles(a.id,a.styles,[]);return i.addStyles(c),s.contentAttr=n.ɵshimContentAttribute(a.id),s.hostAttr=n.ɵshimHostAttribute(a.id),s}return v(t,e),t.prototype.applyToHost=function(t){e.prototype.setAttribute.call(this,t,this.hostAttr,"")},t.prototype.createElement=function(t,r){var n=e.prototype.createElement.call(this,t,r);return e.prototype.setAttribute.call(this,n,this.contentAttr,""),n},t}(F),W=function(e){function r(t,r){var i=e.call(this)||this;return i.doc=t,i.transitionId=r,i.head=null,i.head=n.ɵgetDOM().getElementsByTagName(t,"head")[0],i}return v(r,e),r.prototype._addStyle=function(e){var t=n.ɵgetDOM(),r=t.createElement("style");t.setText(r,e),this.transitionId&&t.setAttribute(r,"ng-transition",this.transitionId),t.appendChild(this.head,r)},r.prototype.onStylesAdded=function(e){var t=this;e.forEach(function(e){return t._addStyle(e)})},r.decorators=[{type:t.Injectable}],r.ctorParameters=function(){return[{type:void 0,decorators:[{type:t.Inject,args:[n.DOCUMENT]}]},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:[n.ɵTRANSITION_ID]}]}]},r}(n.ɵSharedStylesHost),G=[{provide:n.DOCUMENT,useFactory:function(e){var t=e.get(M,null);return t&&t.document?E(t.document,t.url):n.ɵgetDOM().createHtmlDocument()},deps:[t.Injector]},{provide:t.PLATFORM_ID,useValue:o.ɵPLATFORM_SERVER_ID},{provide:t.PLATFORM_INITIALIZER,useFactory:function(e){return function(){w.makeCurrent()}},multi:!0,deps:[t.Injector]},{provide:o.PlatformLocation,useClass:H,deps:[n.DOCUMENT,[t.Optional,M]]},{provide:T,deps:[n.DOCUMENT]},{provide:t.ɵALLOW_MULTIPLE_PLATFORMS,useValue:!0}];
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function Y(e,t,r){return new l.ɵAnimationRendererFactory(e,t,r)}var K=[j,{provide:t.RendererFactory2,useFactory:Y,deps:[j,i.ɵAnimationEngine,t.NgZone]},W,{provide:n.ɵSharedStylesHost,useExisting:W}],Q=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{exports:[n.BrowserModule],imports:[s.HttpModule,a.HttpClientModule,l.NoopAnimationsModule],providers:[K,I,{provide:t.Testability,useValue:null}]}]}],e.ctorParameters=function(){return[]},e}(),$=t.createPlatformFactory(t.platformCore,"server",G),X=t.createPlatformFactory(c.ɵplatformCoreDynamic,"serverDynamic",G);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function Z(e,t,r){return function(){var i=e.createElement("script");i.id=t+"-state",i.setAttribute("type","application/json"),i.textContent=n.ɵescapeHtml(r.toJson()),e.body.appendChild(i)}}var J=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{providers:[n.TransferState,{provide:P,useFactory:Z,deps:[n.DOCUMENT,t.APP_ID,n.TransferState],multi:!0}]}]}],e.ctorParameters=function(){return[]},e}();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function ee(e,t){var r=t.extraProviders?t.extraProviders:[];return e([{provide:M,useValue:{document:t.document,url:t.url}},r])}function te(e,r){return r.then(function(r){var i=r.injector.get(n.ɵTRANSITION_ID,null);if(!i)throw new Error("renderModule[Factory]() requires the use of BrowserModule.withServerTransition() to ensure\nthe server-rendered app can be properly bootstrapped into a client app.");var o=r.injector.get(t.ApplicationRef);return g.toPromise.call(m.first.call(d.filter.call(o.isStable,function(e){return e}))).then(function(){var t=e.injector.get(T),n=r.injector.get(P,null);if(n)for(var i=0,o=n;i<o.length;i++){var a=o[i];try{a()}catch(e){console.warn("Ignoring BEFORE_APP_SERIALIZED Exception: ",e)}}var s=t.renderToString();return e.destroy(),s})})}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var re=new t.Version("5.2.10");e.PlatformState=T,e.ServerModule=Q,e.platformDynamicServer=X,e.platformServer=$,e.BEFORE_APP_SERIALIZED=P,e.INITIAL_CONFIG=M,e.ServerTransferStateModule=J,e.renderModule=function(e,t){var r=ee(X,t);return te(r,r.bootstrapModule(e))},e.renderModuleFactory=function(e,t){var r=ee($,t);return te(r,r.bootstrapModuleFactory(e))},e.VERSION=re,e.ɵINTERNAL_SERVER_PLATFORM_PROVIDERS=G,e.ɵSERVER_RENDER_PROVIDERS=K,e.ɵServerRendererFactory2=j,e.ɵh=I,e.ɵd=x,e.ɵe=N,e.ɵf=L,e.ɵg=D,e.ɵa=Y,e.ɵc=W,e.ɵb=Z,Object.defineProperty(e,"__esModule",{value:!0})}(t,r(0),r(18),r(54),r(19),r(8),r(13),r(112),r(111),r(12),r(7),r(50),r(110),r(52),r(55),r(109))},function(e,t,r){"use strict";e.exports=d;var n=r(28),i=r(3),o=i.NAMESPACE,a=r(44),s=r(5),c=r(16),l=r(107),u=r(43),p=r(27),h=r(26),f=r(42);function d(e,t,r,n){this.nodeType=s.ELEMENT_NODE,this.ownerDocument=e,this.localName=t,this.namespaceURI=r,this.prefix=n,this.tagName=null!==n?n+":"+t:t,r===o.HTML&&(r||e.isHTML)||(this.isHTML=!1),this.isHTML&&(this.tagName=this.tagName.toUpperCase()),this.childNodes=new c,this._attrsByQName=Object.create(null),this._attrsByLName=Object.create(null),this._attrKeys=[],this._index=void 0}function m(e,t,r,n){this.ownerElement=e,n||r||!e._attributeChangeHandlers[t]||(this.onchange=e._attributeChangeHandlers[t]),this.localName=t,this.prefix=null===r||""===r?null:""+r,this.namespaceURI=null===n||""===n?null:""+n}function g(e){for(var t in this.element=e,e._attrsByQName)this[t]=e._attrsByQName[t]}function y(e){this.element=e,this.updateCache()}function v(e){return function(t){return t.localName===e}}d.prototype=Object.create(s.prototype,{nodeName:{get:function(){return this.tagName}},nodeValue:{get:function(){return null},set:function(){}},textContent:{get:function(){var e=[];return function e(t,r){if(t.nodeType===s.TEXT_NODE)r.push(t._data);else for(var n=0,i=t.childNodes.length;n<i;n++)e(t.childNodes[n],r)}(this,e),e.join("")},set:function(e){this.removeChildren(),null!==e&&""!==e&&this._appendChild(this.ownerDocument.createTextNode(e))}},innerHTML:{get:function(){return this.serialize()},set:i.nyi},outerHTML:{get:function(){var e={childNodes:[this],nodeType:0};return s.prototype.serialize.call(e)},set:i.nyi},children:{get:function(){return this._children||(this._children=new y(this)),this._children}},attributes:{get:function(){return this._attributes||(this._attributes=new g(this)),this._attributes}},firstElementChild:{get:function(){for(var e=this.childNodes,t=0,r=e.length;t<r;t++)if(e[t].nodeType===s.ELEMENT_NODE)return e[t];return null}},lastElementChild:{get:function(){for(var e=this.childNodes,t=e.length-1;t>=0;t--)if(e[t].nodeType===s.ELEMENT_NODE)return e[t];return null}},childElementCount:{get:function(){return this.children.length}},nextElement:{value:function(e){e||(e=this.ownerDocument.documentElement);var t=this.firstElementChild;if(!t){if(this===e)return null;t=this.nextElementSibling}if(t)return t;for(var r=this.parentElement;r&&r!==e;r=r.parentElement)if(t=r.nextElementSibling)return t;return null}},getElementsByTagName:{value:function(e){var t;return e?(t="*"===e?function(){return!0}:this.isHTML?function(e){var t=i.toASCIILowerCase(e);return t===e?v(e):function(r){return r.isHTML?r.localName===t:r.localName===e}}(e):v(e),new l(this,t)):new c}},getElementsByTagNameNS:{value:function(e,t){var r;return r="*"===e&&"*"===t?function(){return!0}:"*"===e?v(t):"*"===t?function(e){return function(t){return t.namespaceURI===e}}(e):function(e,t){return function(r){return r.namespaceURI===e&&r.localName===t}}(e,t),new l(this,r)}},getElementsByClassName:{value:function(e){return""===(e=String(e).trim())?new c:(e=e.split(/\s+/),new l(this,function(e){return function(t){var r=t.getAttribute("class");if(!r)return!1;var n=r.trim().split(/\s+/);return e.every(function(e){return-1!==n.indexOf(e)})}}(e)))}},getElementsByName:{value:function(e){return new l(this,function(e){return function(t){return t.getAttribute("name")===e}}(String(e)))}},isHTML:{value:!0,writable:!0},clone:{value:function(){var e;e=this.namespaceURI!==o.HTML||this.prefix?this.ownerDocument.createElementNS(this.namespaceURI,this.tagName):this.ownerDocument.createElement(this.localName);for(var t=0,r=this._attrKeys.length;t<r;t++){var n=this._attrKeys[t],i=this._attrsByLName[n],a=new m(e,i.localName,i.prefix,i.namespaceURI);a.data=i.data,e._attrsByLName[n]=a,e._addQName(a)}return e._attrKeys=this._attrKeys.concat(),e}},isEqual:{value:function(e){if(this.localName!==e.localName||this.namespaceURI!==e.namespaceURI||this.prefix!==e.prefix||this._numattrs!==e._numattrs)return!1;for(var t=0,r=this._numattrs;t<r;t++){var n=this._attr(t);if(!e.hasAttributeNS(n.namespaceURI,n.localName))return!1;if(e.getAttributeNS(n.namespaceURI,n.localName)!==n.value)return!1}return!0}},locateNamespacePrefix:{value:function(e){if(this.namespaceURI===e&&null!==this.prefix)return this.prefix;for(var t=0,r=this._numattrs;t<r;t++){var n=this._attr(t);if("xmlns"===n.prefix&&n.value===e)return n.localName}var i=this.parentElement;return i?i.locateNamespacePrefix(e):null}},locateNamespace:{value:function(e){if(this.prefix===e&&null!==this.namespaceURI)return this.namespaceURI;for(var t=0,r=this._numattrs;t<r;t++){var n=this._attr(t);if("xmlns"===n.prefix&&n.localName===e||null===n.prefix&&"xmlns"===n.localName)return n.value||null}var i=this.parentElement;return i?i.locateNamespace(e):null}},getAttribute:{value:function(e){this.isHTML&&(e=i.toASCIILowerCase(e));var t=this._attrsByQName[e];return t?(Array.isArray(t)&&(t=t[0]),t.value):null}},getAttributeNS:{value:function(e,t){var r=this._attrsByLName[(null===e?"":e)+"|"+t];return r?r.value:null}},hasAttribute:{value:function(e){return this.isHTML&&(e=i.toASCIILowerCase(e)),void 0!==this._attrsByQName[e]}},hasAttributeNS:{value:function(e,t){var r=(null===e?"":e)+"|"+t;return void 0!==this._attrsByLName[r]}},_setAttribute:{value:function(e,t){var r,n=this._attrsByQName[e];n?Array.isArray(n)&&(n=n[0]):(n=this._newattr(e),r=!0),n.value=t,this._attributes&&(this._attributes[e]=n),r&&this._newattrhook&&this._newattrhook(e,t)}},setAttribute:{value:function(e,t){n.isValidName(e)||i.InvalidCharacterError(),this.isHTML&&(e=i.toASCIILowerCase(e)),"xmlns"===e.substring(0,5)&&i.NamespaceError(),this._setAttribute(e,String(t))}},_setAttributeNS:{value:function(e,t,r){var n,i,o=t.indexOf(":");-1===o?(n=null,i=t):(n=t.substring(0,o),i=t.substring(o+1));var a=(null===e?"":e)+"|"+i;""===e&&(e=null);var s,c=this._attrsByLName[a];c?c.prefix!==n&&(this._removeQName(c),c.prefix=n,this._addQName(c)):(c=new m(this,i,n,e),s=!0,this._attrsByLName[a]=c,this._attrKeys.push(a),this._addQName(c)),c.value=r,s&&this._newattrhook&&this._newattrhook(t,r)}},setAttributeNS:{value:function(e,t,r){n.isValidName(t)||i.InvalidCharacterError(),n.isValidQName(t)||i.NamespaceError();var a=t.indexOf(":"),s=-1===a?null:t.substring(0,a);""===e&&(e=null),(null!==s&&null===e||"xml"===s&&e!==o.XML||("xmlns"===t||"xmlns"===s)&&e!==o.XMLNS||e===o.XMLNS&&"xmlns"!==t&&"xmlns"!==s)&&i.NamespaceError(),this._setAttributeNS(e,t,String(r))}},removeAttribute:{value:function(e){this.isHTML&&(e=i.toASCIILowerCase(e));var t=this._attrsByQName[e];if(t){Array.isArray(t)?t.length>2?t=t.shift():(this._attrsByQName[e]=t[1],t=t[0]):this._attrsByQName[e]=void 0;var r=t.namespaceURI,n=(null===r?"":r)+"|"+t.localName;this._attrsByLName[n]=void 0;var o=this._attrKeys.indexOf(n);this._attrKeys.splice(o,1),this._attributes&&(this._attributes[e]=void 0),t.onchange&&t.onchange(this,t.localName,t.value,null),this.rooted&&this.ownerDocument.mutateRemoveAttr(t)}}},removeAttributeNS:{value:function(e,t){var r=(null===e?"":e)+"|"+t,n=this._attrsByLName[r];if(n){this._attrsByLName[r]=void 0;var i=this._attrKeys.indexOf(r);this._attrKeys.splice(i,1),this._removeQName(n),n.onchange&&n.onchange(this,n.localName,n.value,null),this.rooted&&this.ownerDocument.mutateRemoveAttr(n)}}},_getattr:{value:function(e){var t=this._attrsByQName[e];return t?t.value:null}},_setattr:{value:function(e,t){var r,n=this._attrsByQName[e];n||(n=this._newattr(e),r=!0),n.value=String(t),this._attributes&&(this._attributes[e]=n),r&&this._newattrhook&&this._newattrhook(e,t)}},_newattr:{value:function(e){var t=new m(this,e,null,null),r="|"+e;return this._attrsByQName[e]=t,this._attrsByLName[r]=t,this._attrKeys.push(r),t}},_addQName:{value:function(e){var t=e.name,r=this._attrsByQName[t];r?Array.isArray(r)?r.push(e):this._attrsByQName[t]=[r,e]:this._attrsByQName[t]=e,this._attributes&&(this._attributes[t]=e)}},_removeQName:{value:function(e){var t=e.name,r=this._attrsByQName[t];if(Array.isArray(r)){var n=r.indexOf(e);i.assert(-1!==n),2===r.length?this._attrsByQName[t]=r[1-n]:r.splice(n,1)}else i.assert(r===e),this._attrsByQName[t]=void 0}},_numattrs:{get:function(){return this._attrKeys.length}},_attr:{value:function(e){return this._attrsByLName[this._attrKeys[e]]}},id:a.property({name:"id"}),className:a.property({name:"class"}),classList:{get:function(){var e=this;if(this._classList)return this._classList;var t=new u(function(){return e.className||""},function(t){e.className=t});return this._classList=t,t}},matches:{value:function(e){return p.matches(this,e)}},closest:{value:function(e){for(var t=this;t.matches&&!t.matches(e);)t=t.parentNode;return t.matches?t:null}},querySelector:{value:function(e){return p(e,this)[0]}},querySelectorAll:{value:function(e){var t=p(e,this);return t.item?t:new c(t)}}}),Object.defineProperties(d.prototype,h),Object.defineProperties(d.prototype,f),a.registerChangeHandler(d,"id",function(e,t,r,n){e.rooted&&(r&&e.ownerDocument.delId(r,e),n&&e.ownerDocument.addId(n,e))}),m.prototype={get name(){return this.prefix?this.prefix+":"+this.localName:this.localName},get value(){return this.data},get specified(){return!0},set value(e){var t=this.data;(e=void 0===e?"":e+"")!==t&&(this.data=e,this.onchange&&this.onchange(this.ownerElement,this.localName,t,e),this.ownerElement.rooted&&this.ownerElement.ownerDocument.mutateAttr(this,t))},get nodeName(){return this.name},get nodeValue(){return this.value},get textContent(){return this.value},set nodeValue(e){this.value=e},set textContent(e){this.value=e}},g.prototype={get length(){return this.element._attrKeys.length},item:function(e){return this.element._attrsByLName[this.element._attrKeys[e]]}},y.prototype={get length(){return this.updateCache(),this.childrenByNumber.length},item:function(e){return this.updateCache(),this.childrenByNumber[e]||null},namedItem:function(e){return this.updateCache(),this.childrenByName[e]||null},get namedItems(){return this.updateCache(),this.childrenByName},updateCache:function(){var e=/^(a|applet|area|embed|form|frame|frameset|iframe|img|object)$/;if(this.lastModTime!==this.element.lastModTime){this.lastModTime=this.element.lastModTime;for(var t=this.childrenByNumber&&this.childrenByNumber.length||0,r=0;r<t;r++)this[r]=void 0;for(this.childrenByNumber=[],this.childrenByName=Object.create(null),r=0,t=this.element.childNodes.length;r<t;r++){var n=this.element.childNodes[r];if(n.nodeType===s.ELEMENT_NODE){this[this.childrenByNumber.length]=n,this.childrenByNumber.push(n);var i=n.getAttribute("id");i&&!this.childrenByName[i]&&(this.childrenByName[i]=n);var a=n.getAttribute("name");a&&this.element.namespaceURI===o.HTML&&e.test(this.element.localName)&&!this.childrenByName[a]&&(this.childrenByName[i]=n)}}}}}},function(e,t,r){"use strict";function n(e,t){if(this.type="",this.target=null,this.currentTarget=null,this.eventPhase=n.AT_TARGET,this.bubbles=!1,this.cancelable=!1,this.isTrusted=!1,this.defaultPrevented=!1,this.timeStamp=Date.now(),this._propagationStopped=!1,this._immediatePropagationStopped=!1,this._initialized=!0,this._dispatching=!1,e&&(this.type=e),t)for(var r in t)this[r]=t[r]}e.exports=n,n.CAPTURING_PHASE=1,n.AT_TARGET=2,n.BUBBLING_PHASE=3,n.prototype=Object.create(Object.prototype,{constructor:{value:n},stopPropagation:{value:function(){this._propagationStopped=!0}},stopImmediatePropagation:{value:function(){this._propagationStopped=!0,this._immediatePropagationStopped=!0}},preventDefault:{value:function(){this.cancelable&&(this.defaultPrevented=!0)}},initEvent:{value:function(e,t,r){this._initialized=!0,this._dispatching||(this._propagationStopped=!1,this._immediatePropagationStopped=!1,this.defaultPrevented=!1,this.isTrusted=!1,this.target=null,this.type=e,this.bubbles=t,this.cancelable=r)}}})},function(e,t,r){e.exports=r(2)(0)},function(e,t,r){e.exports=r(2)(38)},function(e,t,r){"use strict";var n={FILTER_ACCEPT:1,FILTER_REJECT:2,FILTER_SKIP:3,SHOW_ALL:4294967295,SHOW_ELEMENT:1,SHOW_ATTRIBUTE:2,SHOW_TEXT:4,SHOW_CDATA_SECTION:8,SHOW_ENTITY_REFERENCE:16,SHOW_ENTITY:32,SHOW_PROCESSING_INSTRUCTION:64,SHOW_COMMENT:128,SHOW_DOCUMENT:256,SHOW_DOCUMENT_TYPE:512,SHOW_DOCUMENT_FRAGMENT:1024,SHOW_NOTATION:2048};e.exports=n.constructor=n.prototype=n},function(e,t,r){"use strict";e.exports=s;var n=r(40),i=r(3),o=r(26),a=r(42);function s(){}s.prototype=Object.create(n.prototype,{substringData:{value:function(e,t){return(e>this.data.length||e<0||t<0)&&i.IndexSizeError(),this.data.substring(e,e+t)}},appendData:{value:function(e){this.data=this.data+e}},insertData:{value:function(e,t){var r=this.data;(e>r.length||e<0)&&i.IndexSizeError();var n=r.substring(0,e),o=r.substring(e);this.data=n+t+o}},deleteData:{value:function(e,t){var r=this.data,n=r.length;(e>n||e<0)&&i.IndexSizeError(),e+t>n&&(t=n-e);var o=r.substring(0,e),a=r.substring(e+t);this.data=o+a}},replaceData:{value:function(e,t,r){var n=this.data,o=n.length;(e>o||e<0)&&i.IndexSizeError(),e+t>o&&(t=o-e);var a=n.substring(0,e),s=n.substring(e+t);this.data=a+r+s}},isEqual:{value:function(e){return this._data===e._data}},length:{get:function(){return this.data.length}}}),Object.defineProperties(s.prototype,o),Object.defineProperties(s.prototype,a)},function(e,t,r){"use strict";function n(e){return this[e]}e.exports=function(e){e||(e=[]);return e.item=n,e}},function(e,t,r){"use strict";e.exports=c;var n=r(29),i=r(21),o=r(20),a=r(3),s=r(28);function c(){}var l={xml:{"":!0,"1.0":!0,"2.0":!0},core:{"":!0,"2.0":!0},html:{"":!0,"1.0":!0,"2.0":!0},xhtml:{"":!0,"1.0":!0,"2.0":!0}};c.prototype={hasFeature:function(e,t){var r=l[(e||"").toLowerCase()];return r&&r[t||""]||!1},createDocumentType:function(e,t,r){return s.isValidName(e)||a.InvalidCharacterError(),s.isValidQName(e)||a.NamespaceError(),new i(e,t,r)},createDocument:function(e,t,r){var i,o=new n(!1,null);return i=t?o.createElementNS(e,t):null,r&&(r.ownerDocument&&a.WrongDocumentError(),o.appendChild(r)),i&&o.appendChild(i),o},createHTMLDocument:function(e){var t=new n(!0,null);t.appendChild(new i("html"));var r=t.createElement("html");t.appendChild(r);var o=t.createElement("head");r.appendChild(o);var a=t.createElement("title");return o.appendChild(a),a.appendChild(t.createTextNode(e)),r.appendChild(t.createElement("body")),t.modclock=1,t},mozSetOutputMutationHandler:function(e,t){e.mutationHandler=t},mozGetInputMutationHandler:function(e){a.nyi()},mozHTMLParser:o}},function(e,t,r){e.exports=r(2)(5)},function(e,t,r){e.exports=r(2)(7)},function(e,t,r){"use strict";e.exports=de;var n=r(29),i=r(21),o=r(5),a=r(3).NAMESPACE,s=r(24),c=s.elements,l=Function.prototype.apply.bind(Array.prototype.push),u=-1,p=1,h=2,f=3,d=4,m=5,g=[],y=/^HTML$|^-\/\/W3O\/\/DTD W3 HTML Strict 3\.0\/\/EN\/\/$|^-\/W3C\/DTD HTML 4\.0 Transitional\/EN$|^\+\/\/Silmaril\/\/dtd html Pro v0r11 19970101\/\/|^-\/\/AdvaSoft Ltd\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/AS\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict\/\/|^-\/\/IETF\/\/DTD HTML 2\.0\/\/|^-\/\/IETF\/\/DTD HTML 2\.1E\/\/|^-\/\/IETF\/\/DTD HTML 3\.0\/\/|^-\/\/IETF\/\/DTD HTML 3\.2 Final\/\/|^-\/\/IETF\/\/DTD HTML 3\.2\/\/|^-\/\/IETF\/\/DTD HTML 3\/\/|^-\/\/IETF\/\/DTD HTML Level 0\/\/|^-\/\/IETF\/\/DTD HTML Level 1\/\/|^-\/\/IETF\/\/DTD HTML Level 2\/\/|^-\/\/IETF\/\/DTD HTML Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 0\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict\/\/|^-\/\/IETF\/\/DTD HTML\/\/|^-\/\/Metrius\/\/DTD Metrius Presentational\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 Tables\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 Tables\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD HTML\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD Strict HTML\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML 2\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended 1\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended Relaxed 1\.0\/\/|^-\/\/SoftQuad Software\/\/DTD HoTMetaL PRO 6\.0::19990601::extensions to HTML 4\.0\/\/|^-\/\/SoftQuad\/\/DTD HoTMetaL PRO 4\.0::19971010::extensions to HTML 4\.0\/\/|^-\/\/Spyglass\/\/DTD HTML 2\.0 Extended\/\/|^-\/\/SQ\/\/DTD HTML 2\.0 HoTMetaL \+ extensions\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava HTML\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava Strict HTML\/\/|^-\/\/W3C\/\/DTD HTML 3 1995-03-24\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Draft\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Final\/\/|^-\/\/W3C\/\/DTD HTML 3\.2\/\/|^-\/\/W3C\/\/DTD HTML 3\.2S Draft\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Transitional\/\/|^-\/\/W3C\/\/DTD HTML Experimental 19960712\/\/|^-\/\/W3C\/\/DTD HTML Experimental 970421\/\/|^-\/\/W3C\/\/DTD W3 HTML\/\/|^-\/\/W3O\/\/DTD W3 HTML 3\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML 2\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML\/\//i,v="http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd",b=/^-\/\/W3C\/\/DTD HTML 4\.01 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.01 Transitional\/\//i,_=/^-\/\/W3C\/\/DTD XHTML 1\.0 Frameset\/\/|^-\/\/W3C\/\/DTD XHTML 1\.0 Transitional\/\//i,E=Object.create(null);E[a.HTML]={__proto__:null,address:!0,applet:!0,area:!0,article:!0,aside:!0,base:!0,basefont:!0,bgsound:!0,blockquote:!0,body:!0,br:!0,button:!0,caption:!0,center:!0,col:!0,colgroup:!0,dd:!0,details:!0,dir:!0,div:!0,dl:!0,dt:!0,embed:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,frame:!0,frameset:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,head:!0,header:!0,hgroup:!0,hr:!0,html:!0,iframe:!0,img:!0,input:!0,li:!0,link:!0,listing:!0,main:!0,marquee:!0,menu:!0,meta:!0,nav:!0,noembed:!0,noframes:!0,noscript:!0,object:!0,ol:!0,p:!0,param:!0,plaintext:!0,pre:!0,script:!0,section:!0,select:!0,source:!0,style:!0,summary:!0,table:!0,tbody:!0,td:!0,template:!0,textarea:!0,tfoot:!0,th:!0,thead:!0,title:!0,tr:!0,track:!0,ul:!0,wbr:!0,xmp:!0},E[a.SVG]={__proto__:null,foreignObject:!0,desc:!0,title:!0},E[a.MATHML]={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0,"annotation-xml":!0};var w=Object.create(null);w[a.HTML]={__proto__:null,address:!0,div:!0,p:!0};var T=Object.create(null);T[a.HTML]={__proto__:null,dd:!0,dt:!0};var S=Object.create(null);S[a.HTML]={__proto__:null,table:!0,thead:!0,tbody:!0,tfoot:!0,tr:!0};var k=Object.create(null);k[a.HTML]={__proto__:null,dd:!0,dt:!0,li:!0,menuitem:!0,optgroup:!0,option:!0,p:!0,rb:!0,rp:!0,rt:!0,rtc:!0};var x=Object.create(null);x[a.HTML]={__proto__:null,caption:!0,colgroup:!0,dd:!0,dt:!0,li:!0,optgroup:!0,option:!0,p:!0,rb:!0,rp:!0,rt:!0,rtc:!0,tbody:!0,td:!0,tfoot:!0,th:!0,thead:!0,tr:!0};var N=Object.create(null);N[a.HTML]={__proto__:null,table:!0,template:!0,html:!0};var R=Object.create(null);R[a.HTML]={__proto__:null,tbody:!0,tfoot:!0,thead:!0,template:!0,html:!0};var C=Object.create(null);C[a.HTML]={__proto__:null,tr:!0,template:!0,html:!0};var A=Object.create(null);A[a.HTML]={__proto__:null,button:!0,fieldset:!0,input:!0,keygen:!0,object:!0,output:!0,select:!0,textarea:!0,img:!0};var O=Object.create(null);O[a.HTML]={__proto__:null,applet:!0,caption:!0,html:!0,table:!0,td:!0,th:!0,marquee:!0,object:!0,template:!0},O[a.MATHML]={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0,"annotation-xml":!0},O[a.SVG]={__proto__:null,foreignObject:!0,desc:!0,title:!0};var L=Object.create(O);L[a.HTML]=Object.create(O[a.HTML]),L[a.HTML].ol=!0,L[a.HTML].ul=!0;var D=Object.create(O);D[a.HTML]=Object.create(O[a.HTML]),D[a.HTML].button=!0;var I=Object.create(null);I[a.HTML]={__proto__:null,html:!0,table:!0,template:!0},Object.create(null)[a.HTML]={__proto__:null,optgroup:!0,option:!0};var M=Object.create(null);M[a.MATHML]={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0};var P=Object.create(null);P[a.SVG]={__proto__:null,foreignObject:!0,desc:!0,title:!0};var q={__proto__:null,"xlink:actuate":a.XLINK,"xlink:arcrole":a.XLINK,"xlink:href":a.XLINK,"xlink:role":a.XLINK,"xlink:show":a.XLINK,"xlink:title":a.XLINK,"xlink:type":a.XLINK,"xml:base":a.XML,"xml:lang":a.XML,"xml:space":a.XML,xmlns:a.XMLNS,"xmlns:xlink":a.XMLNS},H={__proto__:null,attributename:"attributeName",attributetype:"attributeType",basefrequency:"baseFrequency",baseprofile:"baseProfile",calcmode:"calcMode",clippathunits:"clipPathUnits",diffuseconstant:"diffuseConstant",edgemode:"edgeMode",filterunits:"filterUnits",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",limitingconeangle:"limitingConeAngle",markerheight:"markerHeight",markerunits:"markerUnits",markerwidth:"markerWidth",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",numoctaves:"numOctaves",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",refx:"refX",refy:"refY",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",specularconstant:"specularConstant",specularexponent:"specularExponent",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stitchtiles:"stitchTiles",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textlength:"textLength",viewbox:"viewBox",viewtarget:"viewTarget",xchannelselector:"xChannelSelector",ychannelselector:"yChannelSelector",zoomandpan:"zoomAndPan"},B={__proto__:null,altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient",textpath:"textPath"},j={__proto__:null,0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376},F={__proto__:null,AElig:198,"AElig;":198,AMP:38,"AMP;":38,Aacute:193,"Aacute;":193,"Abreve;":258,Acirc:194,"Acirc;":194,"Acy;":1040,"Afr;":[55349,56580],Agrave:192,"Agrave;":192,"Alpha;":913,"Amacr;":256,"And;":10835,"Aogon;":260,"Aopf;":[55349,56632],"ApplyFunction;":8289,Aring:197,"Aring;":197,"Ascr;":[55349,56476],"Assign;":8788,Atilde:195,"Atilde;":195,Auml:196,"Auml;":196,"Backslash;":8726,"Barv;":10983,"Barwed;":8966,"Bcy;":1041,"Because;":8757,"Bernoullis;":8492,"Beta;":914,"Bfr;":[55349,56581],"Bopf;":[55349,56633],"Breve;":728,"Bscr;":8492,"Bumpeq;":8782,"CHcy;":1063,COPY:169,"COPY;":169,"Cacute;":262,"Cap;":8914,"CapitalDifferentialD;":8517,"Cayleys;":8493,"Ccaron;":268,Ccedil:199,"Ccedil;":199,"Ccirc;":264,"Cconint;":8752,"Cdot;":266,"Cedilla;":184,"CenterDot;":183,"Cfr;":8493,"Chi;":935,"CircleDot;":8857,"CircleMinus;":8854,"CirclePlus;":8853,"CircleTimes;":8855,"ClockwiseContourIntegral;":8754,"CloseCurlyDoubleQuote;":8221,"CloseCurlyQuote;":8217,"Colon;":8759,"Colone;":10868,"Congruent;":8801,"Conint;":8751,"ContourIntegral;":8750,"Copf;":8450,"Coproduct;":8720,"CounterClockwiseContourIntegral;":8755,"Cross;":10799,"Cscr;":[55349,56478],"Cup;":8915,"CupCap;":8781,"DD;":8517,"DDotrahd;":10513,"DJcy;":1026,"DScy;":1029,"DZcy;":1039,"Dagger;":8225,"Darr;":8609,"Dashv;":10980,"Dcaron;":270,"Dcy;":1044,"Del;":8711,"Delta;":916,"Dfr;":[55349,56583],"DiacriticalAcute;":180,"DiacriticalDot;":729,"DiacriticalDoubleAcute;":733,"DiacriticalGrave;":96,"DiacriticalTilde;":732,"Diamond;":8900,"DifferentialD;":8518,"Dopf;":[55349,56635],"Dot;":168,"DotDot;":8412,"DotEqual;":8784,"DoubleContourIntegral;":8751,"DoubleDot;":168,"DoubleDownArrow;":8659,"DoubleLeftArrow;":8656,"DoubleLeftRightArrow;":8660,"DoubleLeftTee;":10980,"DoubleLongLeftArrow;":10232,"DoubleLongLeftRightArrow;":10234,"DoubleLongRightArrow;":10233,"DoubleRightArrow;":8658,"DoubleRightTee;":8872,"DoubleUpArrow;":8657,"DoubleUpDownArrow;":8661,"DoubleVerticalBar;":8741,"DownArrow;":8595,"DownArrowBar;":10515,"DownArrowUpArrow;":8693,"DownBreve;":785,"DownLeftRightVector;":10576,"DownLeftTeeVector;":10590,"DownLeftVector;":8637,"DownLeftVectorBar;":10582,"DownRightTeeVector;":10591,"DownRightVector;":8641,"DownRightVectorBar;":10583,"DownTee;":8868,"DownTeeArrow;":8615,"Downarrow;":8659,"Dscr;":[55349,56479],"Dstrok;":272,"ENG;":330,ETH:208,"ETH;":208,Eacute:201,"Eacute;":201,"Ecaron;":282,Ecirc:202,"Ecirc;":202,"Ecy;":1069,"Edot;":278,"Efr;":[55349,56584],Egrave:200,"Egrave;":200,"Element;":8712,"Emacr;":274,"EmptySmallSquare;":9723,"EmptyVerySmallSquare;":9643,"Eogon;":280,"Eopf;":[55349,56636],"Epsilon;":917,"Equal;":10869,"EqualTilde;":8770,"Equilibrium;":8652,"Escr;":8496,"Esim;":10867,"Eta;":919,Euml:203,"Euml;":203,"Exists;":8707,"ExponentialE;":8519,"Fcy;":1060,"Ffr;":[55349,56585],"FilledSmallSquare;":9724,"FilledVerySmallSquare;":9642,"Fopf;":[55349,56637],"ForAll;":8704,"Fouriertrf;":8497,"Fscr;":8497,"GJcy;":1027,GT:62,"GT;":62,"Gamma;":915,"Gammad;":988,"Gbreve;":286,"Gcedil;":290,"Gcirc;":284,"Gcy;":1043,"Gdot;":288,"Gfr;":[55349,56586],"Gg;":8921,"Gopf;":[55349,56638],"GreaterEqual;":8805,"GreaterEqualLess;":8923,"GreaterFullEqual;":8807,"GreaterGreater;":10914,"GreaterLess;":8823,"GreaterSlantEqual;":10878,"GreaterTilde;":8819,"Gscr;":[55349,56482],"Gt;":8811,"HARDcy;":1066,"Hacek;":711,"Hat;":94,"Hcirc;":292,"Hfr;":8460,"HilbertSpace;":8459,"Hopf;":8461,"HorizontalLine;":9472,"Hscr;":8459,"Hstrok;":294,"HumpDownHump;":8782,"HumpEqual;":8783,"IEcy;":1045,"IJlig;":306,"IOcy;":1025,Iacute:205,"Iacute;":205,Icirc:206,"Icirc;":206,"Icy;":1048,"Idot;":304,"Ifr;":8465,Igrave:204,"Igrave;":204,"Im;":8465,"Imacr;":298,"ImaginaryI;":8520,"Implies;":8658,"Int;":8748,"Integral;":8747,"Intersection;":8898,"InvisibleComma;":8291,"InvisibleTimes;":8290,"Iogon;":302,"Iopf;":[55349,56640],"Iota;":921,"Iscr;":8464,"Itilde;":296,"Iukcy;":1030,Iuml:207,"Iuml;":207,"Jcirc;":308,"Jcy;":1049,"Jfr;":[55349,56589],"Jopf;":[55349,56641],"Jscr;":[55349,56485],"Jsercy;":1032,"Jukcy;":1028,"KHcy;":1061,"KJcy;":1036,"Kappa;":922,"Kcedil;":310,"Kcy;":1050,"Kfr;":[55349,56590],"Kopf;":[55349,56642],"Kscr;":[55349,56486],"LJcy;":1033,LT:60,"LT;":60,"Lacute;":313,"Lambda;":923,"Lang;":10218,"Laplacetrf;":8466,"Larr;":8606,"Lcaron;":317,"Lcedil;":315,"Lcy;":1051,"LeftAngleBracket;":10216,"LeftArrow;":8592,"LeftArrowBar;":8676,"LeftArrowRightArrow;":8646,"LeftCeiling;":8968,"LeftDoubleBracket;":10214,"LeftDownTeeVector;":10593,"LeftDownVector;":8643,"LeftDownVectorBar;":10585,"LeftFloor;":8970,"LeftRightArrow;":8596,"LeftRightVector;":10574,"LeftTee;":8867,"LeftTeeArrow;":8612,"LeftTeeVector;":10586,"LeftTriangle;":8882,"LeftTriangleBar;":10703,"LeftTriangleEqual;":8884,"LeftUpDownVector;":10577,"LeftUpTeeVector;":10592,"LeftUpVector;":8639,"LeftUpVectorBar;":10584,"LeftVector;":8636,"LeftVectorBar;":10578,"Leftarrow;":8656,"Leftrightarrow;":8660,"LessEqualGreater;":8922,"LessFullEqual;":8806,"LessGreater;":8822,"LessLess;":10913,"LessSlantEqual;":10877,"LessTilde;":8818,"Lfr;":[55349,56591],"Ll;":8920,"Lleftarrow;":8666,"Lmidot;":319,"LongLeftArrow;":10229,"LongLeftRightArrow;":10231,"LongRightArrow;":10230,"Longleftarrow;":10232,"Longleftrightarrow;":10234,"Longrightarrow;":10233,"Lopf;":[55349,56643],"LowerLeftArrow;":8601,"LowerRightArrow;":8600,"Lscr;":8466,"Lsh;":8624,"Lstrok;":321,"Lt;":8810,"Map;":10501,"Mcy;":1052,"MediumSpace;":8287,"Mellintrf;":8499,"Mfr;":[55349,56592],"MinusPlus;":8723,"Mopf;":[55349,56644],"Mscr;":8499,"Mu;":924,"NJcy;":1034,"Nacute;":323,"Ncaron;":327,"Ncedil;":325,"Ncy;":1053,"NegativeMediumSpace;":8203,"NegativeThickSpace;":8203,"NegativeThinSpace;":8203,"NegativeVeryThinSpace;":8203,"NestedGreaterGreater;":8811,"NestedLessLess;":8810,"NewLine;":10,"Nfr;":[55349,56593],"NoBreak;":8288,"NonBreakingSpace;":160,"Nopf;":8469,"Not;":10988,"NotCongruent;":8802,"NotCupCap;":8813,"NotDoubleVerticalBar;":8742,"NotElement;":8713,"NotEqual;":8800,"NotEqualTilde;":[8770,824],"NotExists;":8708,"NotGreater;":8815,"NotGreaterEqual;":8817,"NotGreaterFullEqual;":[8807,824],"NotGreaterGreater;":[8811,824],"NotGreaterLess;":8825,"NotGreaterSlantEqual;":[10878,824],"NotGreaterTilde;":8821,"NotHumpDownHump;":[8782,824],"NotHumpEqual;":[8783,824],"NotLeftTriangle;":8938,"NotLeftTriangleBar;":[10703,824],"NotLeftTriangleEqual;":8940,"NotLess;":8814,"NotLessEqual;":8816,"NotLessGreater;":8824,"NotLessLess;":[8810,824],"NotLessSlantEqual;":[10877,824],"NotLessTilde;":8820,"NotNestedGreaterGreater;":[10914,824],"NotNestedLessLess;":[10913,824],"NotPrecedes;":8832,"NotPrecedesEqual;":[10927,824],"NotPrecedesSlantEqual;":8928,"NotReverseElement;":8716,"NotRightTriangle;":8939,"NotRightTriangleBar;":[10704,824],"NotRightTriangleEqual;":8941,"NotSquareSubset;":[8847,824],"NotSquareSubsetEqual;":8930,"NotSquareSuperset;":[8848,824],"NotSquareSupersetEqual;":8931,"NotSubset;":[8834,8402],"NotSubsetEqual;":8840,"NotSucceeds;":8833,"NotSucceedsEqual;":[10928,824],"NotSucceedsSlantEqual;":8929,"NotSucceedsTilde;":[8831,824],"NotSuperset;":[8835,8402],"NotSupersetEqual;":8841,"NotTilde;":8769,"NotTildeEqual;":8772,"NotTildeFullEqual;":8775,"NotTildeTilde;":8777,"NotVerticalBar;":8740,"Nscr;":[55349,56489],Ntilde:209,"Ntilde;":209,"Nu;":925,"OElig;":338,Oacute:211,"Oacute;":211,Ocirc:212,"Ocirc;":212,"Ocy;":1054,"Odblac;":336,"Ofr;":[55349,56594],Ograve:210,"Ograve;":210,"Omacr;":332,"Omega;":937,"Omicron;":927,"Oopf;":[55349,56646],"OpenCurlyDoubleQuote;":8220,"OpenCurlyQuote;":8216,"Or;":10836,"Oscr;":[55349,56490],Oslash:216,"Oslash;":216,Otilde:213,"Otilde;":213,"Otimes;":10807,Ouml:214,"Ouml;":214,"OverBar;":8254,"OverBrace;":9182,"OverBracket;":9140,"OverParenthesis;":9180,"PartialD;":8706,"Pcy;":1055,"Pfr;":[55349,56595],"Phi;":934,"Pi;":928,"PlusMinus;":177,"Poincareplane;":8460,"Popf;":8473,"Pr;":10939,"Precedes;":8826,"PrecedesEqual;":10927,"PrecedesSlantEqual;":8828,"PrecedesTilde;":8830,"Prime;":8243,"Product;":8719,"Proportion;":8759,"Proportional;":8733,"Pscr;":[55349,56491],"Psi;":936,QUOT:34,"QUOT;":34,"Qfr;":[55349,56596],"Qopf;":8474,"Qscr;":[55349,56492],"RBarr;":10512,REG:174,"REG;":174,"Racute;":340,"Rang;":10219,"Rarr;":8608,"Rarrtl;":10518,"Rcaron;":344,"Rcedil;":342,"Rcy;":1056,"Re;":8476,"ReverseElement;":8715,"ReverseEquilibrium;":8651,"ReverseUpEquilibrium;":10607,"Rfr;":8476,"Rho;":929,"RightAngleBracket;":10217,"RightArrow;":8594,"RightArrowBar;":8677,"RightArrowLeftArrow;":8644,"RightCeiling;":8969,"RightDoubleBracket;":10215,"RightDownTeeVector;":10589,"RightDownVector;":8642,"RightDownVectorBar;":10581,"RightFloor;":8971,"RightTee;":8866,"RightTeeArrow;":8614,"RightTeeVector;":10587,"RightTriangle;":8883,"RightTriangleBar;":10704,"RightTriangleEqual;":8885,"RightUpDownVector;":10575,"RightUpTeeVector;":10588,"RightUpVector;":8638,"RightUpVectorBar;":10580,"RightVector;":8640,"RightVectorBar;":10579,"Rightarrow;":8658,"Ropf;":8477,"RoundImplies;":10608,"Rrightarrow;":8667,"Rscr;":8475,"Rsh;":8625,"RuleDelayed;":10740,"SHCHcy;":1065,"SHcy;":1064,"SOFTcy;":1068,"Sacute;":346,"Sc;":10940,"Scaron;":352,"Scedil;":350,"Scirc;":348,"Scy;":1057,"Sfr;":[55349,56598],"ShortDownArrow;":8595,"ShortLeftArrow;":8592,"ShortRightArrow;":8594,"ShortUpArrow;":8593,"Sigma;":931,"SmallCircle;":8728,"Sopf;":[55349,56650],"Sqrt;":8730,"Square;":9633,"SquareIntersection;":8851,"SquareSubset;":8847,"SquareSubsetEqual;":8849,"SquareSuperset;":8848,"SquareSupersetEqual;":8850,"SquareUnion;":8852,"Sscr;":[55349,56494],"Star;":8902,"Sub;":8912,"Subset;":8912,"SubsetEqual;":8838,"Succeeds;":8827,"SucceedsEqual;":10928,"SucceedsSlantEqual;":8829,"SucceedsTilde;":8831,"SuchThat;":8715,"Sum;":8721,"Sup;":8913,"Superset;":8835,"SupersetEqual;":8839,"Supset;":8913,THORN:222,"THORN;":222,"TRADE;":8482,"TSHcy;":1035,"TScy;":1062,"Tab;":9,"Tau;":932,"Tcaron;":356,"Tcedil;":354,"Tcy;":1058,"Tfr;":[55349,56599],"Therefore;":8756,"Theta;":920,"ThickSpace;":[8287,8202],"ThinSpace;":8201,"Tilde;":8764,"TildeEqual;":8771,"TildeFullEqual;":8773,"TildeTilde;":8776,"Topf;":[55349,56651],"TripleDot;":8411,"Tscr;":[55349,56495],"Tstrok;":358,Uacute:218,"Uacute;":218,"Uarr;":8607,"Uarrocir;":10569,"Ubrcy;":1038,"Ubreve;":364,Ucirc:219,"Ucirc;":219,"Ucy;":1059,"Udblac;":368,"Ufr;":[55349,56600],Ugrave:217,"Ugrave;":217,"Umacr;":362,"UnderBar;":95,"UnderBrace;":9183,"UnderBracket;":9141,"UnderParenthesis;":9181,"Union;":8899,"UnionPlus;":8846,"Uogon;":370,"Uopf;":[55349,56652],"UpArrow;":8593,"UpArrowBar;":10514,"UpArrowDownArrow;":8645,"UpDownArrow;":8597,"UpEquilibrium;":10606,"UpTee;":8869,"UpTeeArrow;":8613,"Uparrow;":8657,"Updownarrow;":8661,"UpperLeftArrow;":8598,"UpperRightArrow;":8599,"Upsi;":978,"Upsilon;":933,"Uring;":366,"Uscr;":[55349,56496],"Utilde;":360,Uuml:220,"Uuml;":220,"VDash;":8875,"Vbar;":10987,"Vcy;":1042,"Vdash;":8873,"Vdashl;":10982,"Vee;":8897,"Verbar;":8214,"Vert;":8214,"VerticalBar;":8739,"VerticalLine;":124,"VerticalSeparator;":10072,"VerticalTilde;":8768,"VeryThinSpace;":8202,"Vfr;":[55349,56601],"Vopf;":[55349,56653],"Vscr;":[55349,56497],"Vvdash;":8874,"Wcirc;":372,"Wedge;":8896,"Wfr;":[55349,56602],"Wopf;":[55349,56654],"Wscr;":[55349,56498],"Xfr;":[55349,56603],"Xi;":926,"Xopf;":[55349,56655],"Xscr;":[55349,56499],"YAcy;":1071,"YIcy;":1031,"YUcy;":1070,Yacute:221,"Yacute;":221,"Ycirc;":374,"Ycy;":1067,"Yfr;":[55349,56604],"Yopf;":[55349,56656],"Yscr;":[55349,56500],"Yuml;":376,"ZHcy;":1046,"Zacute;":377,"Zcaron;":381,"Zcy;":1047,"Zdot;":379,"ZeroWidthSpace;":8203,"Zeta;":918,"Zfr;":8488,"Zopf;":8484,"Zscr;":[55349,56501],aacute:225,"aacute;":225,"abreve;":259,"ac;":8766,"acE;":[8766,819],"acd;":8767,acirc:226,"acirc;":226,acute:180,"acute;":180,"acy;":1072,aelig:230,"aelig;":230,"af;":8289,"afr;":[55349,56606],agrave:224,"agrave;":224,"alefsym;":8501,"aleph;":8501,"alpha;":945,"amacr;":257,"amalg;":10815,amp:38,"amp;":38,"and;":8743,"andand;":10837,"andd;":10844,"andslope;":10840,"andv;":10842,"ang;":8736,"ange;":10660,"angle;":8736,"angmsd;":8737,"angmsdaa;":10664,"angmsdab;":10665,"angmsdac;":10666,"angmsdad;":10667,"angmsdae;":10668,"angmsdaf;":10669,"angmsdag;":10670,"angmsdah;":10671,"angrt;":8735,"angrtvb;":8894,"angrtvbd;":10653,"angsph;":8738,"angst;":197,"angzarr;":9084,"aogon;":261,"aopf;":[55349,56658],"ap;":8776,"apE;":10864,"apacir;":10863,"ape;":8778,"apid;":8779,"apos;":39,"approx;":8776,"approxeq;":8778,aring:229,"aring;":229,"ascr;":[55349,56502],"ast;":42,"asymp;":8776,"asympeq;":8781,atilde:227,"atilde;":227,auml:228,"auml;":228,"awconint;":8755,"awint;":10769,"bNot;":10989,"backcong;":8780,"backepsilon;":1014,"backprime;":8245,"backsim;":8765,"backsimeq;":8909,"barvee;":8893,"barwed;":8965,"barwedge;":8965,"bbrk;":9141,"bbrktbrk;":9142,"bcong;":8780,"bcy;":1073,"bdquo;":8222,"becaus;":8757,"because;":8757,"bemptyv;":10672,"bepsi;":1014,"bernou;":8492,"beta;":946,"beth;":8502,"between;":8812,"bfr;":[55349,56607],"bigcap;":8898,"bigcirc;":9711,"bigcup;":8899,"bigodot;":10752,"bigoplus;":10753,"bigotimes;":10754,"bigsqcup;":10758,"bigstar;":9733,"bigtriangledown;":9661,"bigtriangleup;":9651,"biguplus;":10756,"bigvee;":8897,"bigwedge;":8896,"bkarow;":10509,"blacklozenge;":10731,"blacksquare;":9642,"blacktriangle;":9652,"blacktriangledown;":9662,"blacktriangleleft;":9666,"blacktriangleright;":9656,"blank;":9251,"blk12;":9618,"blk14;":9617,"blk34;":9619,"block;":9608,"bne;":[61,8421],"bnequiv;":[8801,8421],"bnot;":8976,"bopf;":[55349,56659],"bot;":8869,"bottom;":8869,"bowtie;":8904,"boxDL;":9559,"boxDR;":9556,"boxDl;":9558,"boxDr;":9555,"boxH;":9552,"boxHD;":9574,"boxHU;":9577,"boxHd;":9572,"boxHu;":9575,"boxUL;":9565,"boxUR;":9562,"boxUl;":9564,"boxUr;":9561,"boxV;":9553,"boxVH;":9580,"boxVL;":9571,"boxVR;":9568,"boxVh;":9579,"boxVl;":9570,"boxVr;":9567,"boxbox;":10697,"boxdL;":9557,"boxdR;":9554,"boxdl;":9488,"boxdr;":9484,"boxh;":9472,"boxhD;":9573,"boxhU;":9576,"boxhd;":9516,"boxhu;":9524,"boxminus;":8863,"boxplus;":8862,"boxtimes;":8864,"boxuL;":9563,"boxuR;":9560,"boxul;":9496,"boxur;":9492,"boxv;":9474,"boxvH;":9578,"boxvL;":9569,"boxvR;":9566,"boxvh;":9532,"boxvl;":9508,"boxvr;":9500,"bprime;":8245,"breve;":728,brvbar:166,"brvbar;":166,"bscr;":[55349,56503],"bsemi;":8271,"bsim;":8765,"bsime;":8909,"bsol;":92,"bsolb;":10693,"bsolhsub;":10184,"bull;":8226,"bullet;":8226,"bump;":8782,"bumpE;":10926,"bumpe;":8783,"bumpeq;":8783,"cacute;":263,"cap;":8745,"capand;":10820,"capbrcup;":10825,"capcap;":10827,"capcup;":10823,"capdot;":10816,"caps;":[8745,65024],"caret;":8257,"caron;":711,"ccaps;":10829,"ccaron;":269,ccedil:231,"ccedil;":231,"ccirc;":265,"ccups;":10828,"ccupssm;":10832,"cdot;":267,cedil:184,"cedil;":184,"cemptyv;":10674,cent:162,"cent;":162,"centerdot;":183,"cfr;":[55349,56608],"chcy;":1095,"check;":10003,"checkmark;":10003,"chi;":967,"cir;":9675,"cirE;":10691,"circ;":710,"circeq;":8791,"circlearrowleft;":8634,"circlearrowright;":8635,"circledR;":174,"circledS;":9416,"circledast;":8859,"circledcirc;":8858,"circleddash;":8861,"cire;":8791,"cirfnint;":10768,"cirmid;":10991,"cirscir;":10690,"clubs;":9827,"clubsuit;":9827,"colon;":58,"colone;":8788,"coloneq;":8788,"comma;":44,"commat;":64,"comp;":8705,"compfn;":8728,"complement;":8705,"complexes;":8450,"cong;":8773,"congdot;":10861,"conint;":8750,"copf;":[55349,56660],"coprod;":8720,copy:169,"copy;":169,"copysr;":8471,"crarr;":8629,"cross;":10007,"cscr;":[55349,56504],"csub;":10959,"csube;":10961,"csup;":10960,"csupe;":10962,"ctdot;":8943,"cudarrl;":10552,"cudarrr;":10549,"cuepr;":8926,"cuesc;":8927,"cularr;":8630,"cularrp;":10557,"cup;":8746,"cupbrcap;":10824,"cupcap;":10822,"cupcup;":10826,"cupdot;":8845,"cupor;":10821,"cups;":[8746,65024],"curarr;":8631,"curarrm;":10556,"curlyeqprec;":8926,"curlyeqsucc;":8927,"curlyvee;":8910,"curlywedge;":8911,curren:164,"curren;":164,"curvearrowleft;":8630,"curvearrowright;":8631,"cuvee;":8910,"cuwed;":8911,"cwconint;":8754,"cwint;":8753,"cylcty;":9005,"dArr;":8659,"dHar;":10597,"dagger;":8224,"daleth;":8504,"darr;":8595,"dash;":8208,"dashv;":8867,"dbkarow;":10511,"dblac;":733,"dcaron;":271,"dcy;":1076,"dd;":8518,"ddagger;":8225,"ddarr;":8650,"ddotseq;":10871,deg:176,"deg;":176,"delta;":948,"demptyv;":10673,"dfisht;":10623,"dfr;":[55349,56609],"dharl;":8643,"dharr;":8642,"diam;":8900,"diamond;":8900,"diamondsuit;":9830,"diams;":9830,"die;":168,"digamma;":989,"disin;":8946,"div;":247,divide:247,"divide;":247,"divideontimes;":8903,"divonx;":8903,"djcy;":1106,"dlcorn;":8990,"dlcrop;":8973,"dollar;":36,"dopf;":[55349,56661],"dot;":729,"doteq;":8784,"doteqdot;":8785,"dotminus;":8760,"dotplus;":8724,"dotsquare;":8865,"doublebarwedge;":8966,"downarrow;":8595,"downdownarrows;":8650,"downharpoonleft;":8643,"downharpoonright;":8642,"drbkarow;":10512,"drcorn;":8991,"drcrop;":8972,"dscr;":[55349,56505],"dscy;":1109,"dsol;":10742,"dstrok;":273,"dtdot;":8945,"dtri;":9663,"dtrif;":9662,"duarr;":8693,"duhar;":10607,"dwangle;":10662,"dzcy;":1119,"dzigrarr;":10239,"eDDot;":10871,"eDot;":8785,eacute:233,"eacute;":233,"easter;":10862,"ecaron;":283,"ecir;":8790,ecirc:234,"ecirc;":234,"ecolon;":8789,"ecy;":1101,"edot;":279,"ee;":8519,"efDot;":8786,"efr;":[55349,56610],"eg;":10906,egrave:232,"egrave;":232,"egs;":10902,"egsdot;":10904,"el;":10905,"elinters;":9191,"ell;":8467,"els;":10901,"elsdot;":10903,"emacr;":275,"empty;":8709,"emptyset;":8709,"emptyv;":8709,"emsp13;":8196,"emsp14;":8197,"emsp;":8195,"eng;":331,"ensp;":8194,"eogon;":281,"eopf;":[55349,56662],"epar;":8917,"eparsl;":10723,"eplus;":10865,"epsi;":949,"epsilon;":949,"epsiv;":1013,"eqcirc;":8790,"eqcolon;":8789,"eqsim;":8770,"eqslantgtr;":10902,"eqslantless;":10901,"equals;":61,"equest;":8799,"equiv;":8801,"equivDD;":10872,"eqvparsl;":10725,"erDot;":8787,"erarr;":10609,"escr;":8495,"esdot;":8784,"esim;":8770,"eta;":951,eth:240,"eth;":240,euml:235,"euml;":235,"euro;":8364,"excl;":33,"exist;":8707,"expectation;":8496,"exponentiale;":8519,"fallingdotseq;":8786,"fcy;":1092,"female;":9792,"ffilig;":64259,"fflig;":64256,"ffllig;":64260,"ffr;":[55349,56611],"filig;":64257,"fjlig;":[102,106],"flat;":9837,"fllig;":64258,"fltns;":9649,"fnof;":402,"fopf;":[55349,56663],"forall;":8704,"fork;":8916,"forkv;":10969,"fpartint;":10765,frac12:189,"frac12;":189,"frac13;":8531,frac14:188,"frac14;":188,"frac15;":8533,"frac16;":8537,"frac18;":8539,"frac23;":8532,"frac25;":8534,frac34:190,"frac34;":190,"frac35;":8535,"frac38;":8540,"frac45;":8536,"frac56;":8538,"frac58;":8541,"frac78;":8542,"frasl;":8260,"frown;":8994,"fscr;":[55349,56507],"gE;":8807,"gEl;":10892,"gacute;":501,"gamma;":947,"gammad;":989,"gap;":10886,"gbreve;":287,"gcirc;":285,"gcy;":1075,"gdot;":289,"ge;":8805,"gel;":8923,"geq;":8805,"geqq;":8807,"geqslant;":10878,"ges;":10878,"gescc;":10921,"gesdot;":10880,"gesdoto;":10882,"gesdotol;":10884,"gesl;":[8923,65024],"gesles;":10900,"gfr;":[55349,56612],"gg;":8811,"ggg;":8921,"gimel;":8503,"gjcy;":1107,"gl;":8823,"glE;":10898,"gla;":10917,"glj;":10916,"gnE;":8809,"gnap;":10890,"gnapprox;":10890,"gne;":10888,"gneq;":10888,"gneqq;":8809,"gnsim;":8935,"gopf;":[55349,56664],"grave;":96,"gscr;":8458,"gsim;":8819,"gsime;":10894,"gsiml;":10896,gt:62,"gt;":62,"gtcc;":10919,"gtcir;":10874,"gtdot;":8919,"gtlPar;":10645,"gtquest;":10876,"gtrapprox;":10886,"gtrarr;":10616,"gtrdot;":8919,"gtreqless;":8923,"gtreqqless;":10892,"gtrless;":8823,"gtrsim;":8819,"gvertneqq;":[8809,65024],"gvnE;":[8809,65024],"hArr;":8660,"hairsp;":8202,"half;":189,"hamilt;":8459,"hardcy;":1098,"harr;":8596,"harrcir;":10568,"harrw;":8621,"hbar;":8463,"hcirc;":293,"hearts;":9829,"heartsuit;":9829,"hellip;":8230,"hercon;":8889,"hfr;":[55349,56613],"hksearow;":10533,"hkswarow;":10534,"hoarr;":8703,"homtht;":8763,"hookleftarrow;":8617,"hookrightarrow;":8618,"hopf;":[55349,56665],"horbar;":8213,"hscr;":[55349,56509],"hslash;":8463,"hstrok;":295,"hybull;":8259,"hyphen;":8208,iacute:237,"iacute;":237,"ic;":8291,icirc:238,"icirc;":238,"icy;":1080,"iecy;":1077,iexcl:161,"iexcl;":161,"iff;":8660,"ifr;":[55349,56614],igrave:236,"igrave;":236,"ii;":8520,"iiiint;":10764,"iiint;":8749,"iinfin;":10716,"iiota;":8489,"ijlig;":307,"imacr;":299,"image;":8465,"imagline;":8464,"imagpart;":8465,"imath;":305,"imof;":8887,"imped;":437,"in;":8712,"incare;":8453,"infin;":8734,"infintie;":10717,"inodot;":305,"int;":8747,"intcal;":8890,"integers;":8484,"intercal;":8890,"intlarhk;":10775,"intprod;":10812,"iocy;":1105,"iogon;":303,"iopf;":[55349,56666],"iota;":953,"iprod;":10812,iquest:191,"iquest;":191,"iscr;":[55349,56510],"isin;":8712,"isinE;":8953,"isindot;":8949,"isins;":8948,"isinsv;":8947,"isinv;":8712,"it;":8290,"itilde;":297,"iukcy;":1110,iuml:239,"iuml;":239,"jcirc;":309,"jcy;":1081,"jfr;":[55349,56615],"jmath;":567,"jopf;":[55349,56667],"jscr;":[55349,56511],"jsercy;":1112,"jukcy;":1108,"kappa;":954,"kappav;":1008,"kcedil;":311,"kcy;":1082,"kfr;":[55349,56616],"kgreen;":312,"khcy;":1093,"kjcy;":1116,"kopf;":[55349,56668],"kscr;":[55349,56512],"lAarr;":8666,"lArr;":8656,"lAtail;":10523,"lBarr;":10510,"lE;":8806,"lEg;":10891,"lHar;":10594,"lacute;":314,"laemptyv;":10676,"lagran;":8466,"lambda;":955,"lang;":10216,"langd;":10641,"langle;":10216,"lap;":10885,laquo:171,"laquo;":171,"larr;":8592,"larrb;":8676,"larrbfs;":10527,"larrfs;":10525,"larrhk;":8617,"larrlp;":8619,"larrpl;":10553,"larrsim;":10611,"larrtl;":8610,"lat;":10923,"latail;":10521,"late;":10925,"lates;":[10925,65024],"lbarr;":10508,"lbbrk;":10098,"lbrace;":123,"lbrack;":91,"lbrke;":10635,"lbrksld;":10639,"lbrkslu;":10637,"lcaron;":318,"lcedil;":316,"lceil;":8968,"lcub;":123,"lcy;":1083,"ldca;":10550,"ldquo;":8220,"ldquor;":8222,"ldrdhar;":10599,"ldrushar;":10571,"ldsh;":8626,"le;":8804,"leftarrow;":8592,"leftarrowtail;":8610,"leftharpoondown;":8637,"leftharpoonup;":8636,"leftleftarrows;":8647,"leftrightarrow;":8596,"leftrightarrows;":8646,"leftrightharpoons;":8651,"leftrightsquigarrow;":8621,"leftthreetimes;":8907,"leg;":8922,"leq;":8804,"leqq;":8806,"leqslant;":10877,"les;":10877,"lescc;":10920,"lesdot;":10879,"lesdoto;":10881,"lesdotor;":10883,"lesg;":[8922,65024],"lesges;":10899,"lessapprox;":10885,"lessdot;":8918,"lesseqgtr;":8922,"lesseqqgtr;":10891,"lessgtr;":8822,"lesssim;":8818,"lfisht;":10620,"lfloor;":8970,"lfr;":[55349,56617],"lg;":8822,"lgE;":10897,"lhard;":8637,"lharu;":8636,"lharul;":10602,"lhblk;":9604,"ljcy;":1113,"ll;":8810,"llarr;":8647,"llcorner;":8990,"llhard;":10603,"lltri;":9722,"lmidot;":320,"lmoust;":9136,"lmoustache;":9136,"lnE;":8808,"lnap;":10889,"lnapprox;":10889,"lne;":10887,"lneq;":10887,"lneqq;":8808,"lnsim;":8934,"loang;":10220,"loarr;":8701,"lobrk;":10214,"longleftarrow;":10229,"longleftrightarrow;":10231,"longmapsto;":10236,"longrightarrow;":10230,"looparrowleft;":8619,"looparrowright;":8620,"lopar;":10629,"lopf;":[55349,56669],"loplus;":10797,"lotimes;":10804,"lowast;":8727,"lowbar;":95,"loz;":9674,"lozenge;":9674,"lozf;":10731,"lpar;":40,"lparlt;":10643,"lrarr;":8646,"lrcorner;":8991,"lrhar;":8651,"lrhard;":10605,"lrm;":8206,"lrtri;":8895,"lsaquo;":8249,"lscr;":[55349,56513],"lsh;":8624,"lsim;":8818,"lsime;":10893,"lsimg;":10895,"lsqb;":91,"lsquo;":8216,"lsquor;":8218,"lstrok;":322,lt:60,"lt;":60,"ltcc;":10918,"ltcir;":10873,"ltdot;":8918,"lthree;":8907,"ltimes;":8905,"ltlarr;":10614,"ltquest;":10875,"ltrPar;":10646,"ltri;":9667,"ltrie;":8884,"ltrif;":9666,"lurdshar;":10570,"luruhar;":10598,"lvertneqq;":[8808,65024],"lvnE;":[8808,65024],"mDDot;":8762,macr:175,"macr;":175,"male;":9794,"malt;":10016,"maltese;":10016,"map;":8614,"mapsto;":8614,"mapstodown;":8615,"mapstoleft;":8612,"mapstoup;":8613,"marker;":9646,"mcomma;":10793,"mcy;":1084,"mdash;":8212,"measuredangle;":8737,"mfr;":[55349,56618],"mho;":8487,micro:181,"micro;":181,"mid;":8739,"midast;":42,"midcir;":10992,middot:183,"middot;":183,"minus;":8722,"minusb;":8863,"minusd;":8760,"minusdu;":10794,"mlcp;":10971,"mldr;":8230,"mnplus;":8723,"models;":8871,"mopf;":[55349,56670],"mp;":8723,"mscr;":[55349,56514],"mstpos;":8766,"mu;":956,"multimap;":8888,"mumap;":8888,"nGg;":[8921,824],"nGt;":[8811,8402],"nGtv;":[8811,824],"nLeftarrow;":8653,"nLeftrightarrow;":8654,"nLl;":[8920,824],"nLt;":[8810,8402],"nLtv;":[8810,824],"nRightarrow;":8655,"nVDash;":8879,"nVdash;":8878,"nabla;":8711,"nacute;":324,"nang;":[8736,8402],"nap;":8777,"napE;":[10864,824],"napid;":[8779,824],"napos;":329,"napprox;":8777,"natur;":9838,"natural;":9838,"naturals;":8469,nbsp:160,"nbsp;":160,"nbump;":[8782,824],"nbumpe;":[8783,824],"ncap;":10819,"ncaron;":328,"ncedil;":326,"ncong;":8775,"ncongdot;":[10861,824],"ncup;":10818,"ncy;":1085,"ndash;":8211,"ne;":8800,"neArr;":8663,"nearhk;":10532,"nearr;":8599,"nearrow;":8599,"nedot;":[8784,824],"nequiv;":8802,"nesear;":10536,"nesim;":[8770,824],"nexist;":8708,"nexists;":8708,"nfr;":[55349,56619],"ngE;":[8807,824],"nge;":8817,"ngeq;":8817,"ngeqq;":[8807,824],"ngeqslant;":[10878,824],"nges;":[10878,824],"ngsim;":8821,"ngt;":8815,"ngtr;":8815,"nhArr;":8654,"nharr;":8622,"nhpar;":10994,"ni;":8715,"nis;":8956,"nisd;":8954,"niv;":8715,"njcy;":1114,"nlArr;":8653,"nlE;":[8806,824],"nlarr;":8602,"nldr;":8229,"nle;":8816,"nleftarrow;":8602,"nleftrightarrow;":8622,"nleq;":8816,"nleqq;":[8806,824],"nleqslant;":[10877,824],"nles;":[10877,824],"nless;":8814,"nlsim;":8820,"nlt;":8814,"nltri;":8938,"nltrie;":8940,"nmid;":8740,"nopf;":[55349,56671],not:172,"not;":172,"notin;":8713,"notinE;":[8953,824],"notindot;":[8949,824],"notinva;":8713,"notinvb;":8951,"notinvc;":8950,"notni;":8716,"notniva;":8716,"notnivb;":8958,"notnivc;":8957,"npar;":8742,"nparallel;":8742,"nparsl;":[11005,8421],"npart;":[8706,824],"npolint;":10772,"npr;":8832,"nprcue;":8928,"npre;":[10927,824],"nprec;":8832,"npreceq;":[10927,824],"nrArr;":8655,"nrarr;":8603,"nrarrc;":[10547,824],"nrarrw;":[8605,824],"nrightarrow;":8603,"nrtri;":8939,"nrtrie;":8941,"nsc;":8833,"nsccue;":8929,"nsce;":[10928,824],"nscr;":[55349,56515],"nshortmid;":8740,"nshortparallel;":8742,"nsim;":8769,"nsime;":8772,"nsimeq;":8772,"nsmid;":8740,"nspar;":8742,"nsqsube;":8930,"nsqsupe;":8931,"nsub;":8836,"nsubE;":[10949,824],"nsube;":8840,"nsubset;":[8834,8402],"nsubseteq;":8840,"nsubseteqq;":[10949,824],"nsucc;":8833,"nsucceq;":[10928,824],"nsup;":8837,"nsupE;":[10950,824],"nsupe;":8841,"nsupset;":[8835,8402],"nsupseteq;":8841,"nsupseteqq;":[10950,824],"ntgl;":8825,ntilde:241,"ntilde;":241,"ntlg;":8824,"ntriangleleft;":8938,"ntrianglelefteq;":8940,"ntriangleright;":8939,"ntrianglerighteq;":8941,"nu;":957,"num;":35,"numero;":8470,"numsp;":8199,"nvDash;":8877,"nvHarr;":10500,"nvap;":[8781,8402],"nvdash;":8876,"nvge;":[8805,8402],"nvgt;":[62,8402],"nvinfin;":10718,"nvlArr;":10498,"nvle;":[8804,8402],"nvlt;":[60,8402],"nvltrie;":[8884,8402],"nvrArr;":10499,"nvrtrie;":[8885,8402],"nvsim;":[8764,8402],"nwArr;":8662,"nwarhk;":10531,"nwarr;":8598,"nwarrow;":8598,"nwnear;":10535,"oS;":9416,oacute:243,"oacute;":243,"oast;":8859,"ocir;":8858,ocirc:244,"ocirc;":244,"ocy;":1086,"odash;":8861,"odblac;":337,"odiv;":10808,"odot;":8857,"odsold;":10684,"oelig;":339,"ofcir;":10687,"ofr;":[55349,56620],"ogon;":731,ograve:242,"ograve;":242,"ogt;":10689,"ohbar;":10677,"ohm;":937,"oint;":8750,"olarr;":8634,"olcir;":10686,"olcross;":10683,"oline;":8254,"olt;":10688,"omacr;":333,"omega;":969,"omicron;":959,"omid;":10678,"ominus;":8854,"oopf;":[55349,56672],"opar;":10679,"operp;":10681,"oplus;":8853,"or;":8744,"orarr;":8635,"ord;":10845,"order;":8500,"orderof;":8500,ordf:170,"ordf;":170,ordm:186,"ordm;":186,"origof;":8886,"oror;":10838,"orslope;":10839,"orv;":10843,"oscr;":8500,oslash:248,"oslash;":248,"osol;":8856,otilde:245,"otilde;":245,"otimes;":8855,"otimesas;":10806,ouml:246,"ouml;":246,"ovbar;":9021,"par;":8741,para:182,"para;":182,"parallel;":8741,"parsim;":10995,"parsl;":11005,"part;":8706,"pcy;":1087,"percnt;":37,"period;":46,"permil;":8240,"perp;":8869,"pertenk;":8241,"pfr;":[55349,56621],"phi;":966,"phiv;":981,"phmmat;":8499,"phone;":9742,"pi;":960,"pitchfork;":8916,"piv;":982,"planck;":8463,"planckh;":8462,"plankv;":8463,"plus;":43,"plusacir;":10787,"plusb;":8862,"pluscir;":10786,"plusdo;":8724,"plusdu;":10789,"pluse;":10866,plusmn:177,"plusmn;":177,"plussim;":10790,"plustwo;":10791,"pm;":177,"pointint;":10773,"popf;":[55349,56673],pound:163,"pound;":163,"pr;":8826,"prE;":10931,"prap;":10935,"prcue;":8828,"pre;":10927,"prec;":8826,"precapprox;":10935,"preccurlyeq;":8828,"preceq;":10927,"precnapprox;":10937,"precneqq;":10933,"precnsim;":8936,"precsim;":8830,"prime;":8242,"primes;":8473,"prnE;":10933,"prnap;":10937,"prnsim;":8936,"prod;":8719,"profalar;":9006,"profline;":8978,"profsurf;":8979,"prop;":8733,"propto;":8733,"prsim;":8830,"prurel;":8880,"pscr;":[55349,56517],"psi;":968,"puncsp;":8200,"qfr;":[55349,56622],"qint;":10764,"qopf;":[55349,56674],"qprime;":8279,"qscr;":[55349,56518],"quaternions;":8461,"quatint;":10774,"quest;":63,"questeq;":8799,quot:34,"quot;":34,"rAarr;":8667,"rArr;":8658,"rAtail;":10524,"rBarr;":10511,"rHar;":10596,"race;":[8765,817],"racute;":341,"radic;":8730,"raemptyv;":10675,"rang;":10217,"rangd;":10642,"range;":10661,"rangle;":10217,raquo:187,"raquo;":187,"rarr;":8594,"rarrap;":10613,"rarrb;":8677,"rarrbfs;":10528,"rarrc;":10547,"rarrfs;":10526,"rarrhk;":8618,"rarrlp;":8620,"rarrpl;":10565,"rarrsim;":10612,"rarrtl;":8611,"rarrw;":8605,"ratail;":10522,"ratio;":8758,"rationals;":8474,"rbarr;":10509,"rbbrk;":10099,"rbrace;":125,"rbrack;":93,"rbrke;":10636,"rbrksld;":10638,"rbrkslu;":10640,"rcaron;":345,"rcedil;":343,"rceil;":8969,"rcub;":125,"rcy;":1088,"rdca;":10551,"rdldhar;":10601,"rdquo;":8221,"rdquor;":8221,"rdsh;":8627,"real;":8476,"realine;":8475,"realpart;":8476,"reals;":8477,"rect;":9645,reg:174,"reg;":174,"rfisht;":10621,"rfloor;":8971,"rfr;":[55349,56623],"rhard;":8641,"rharu;":8640,"rharul;":10604,"rho;":961,"rhov;":1009,"rightarrow;":8594,"rightarrowtail;":8611,"rightharpoondown;":8641,"rightharpoonup;":8640,"rightleftarrows;":8644,"rightleftharpoons;":8652,"rightrightarrows;":8649,"rightsquigarrow;":8605,"rightthreetimes;":8908,"ring;":730,"risingdotseq;":8787,"rlarr;":8644,"rlhar;":8652,"rlm;":8207,"rmoust;":9137,"rmoustache;":9137,"rnmid;":10990,"roang;":10221,"roarr;":8702,"robrk;":10215,"ropar;":10630,"ropf;":[55349,56675],"roplus;":10798,"rotimes;":10805,"rpar;":41,"rpargt;":10644,"rppolint;":10770,"rrarr;":8649,"rsaquo;":8250,"rscr;":[55349,56519],"rsh;":8625,"rsqb;":93,"rsquo;":8217,"rsquor;":8217,"rthree;":8908,"rtimes;":8906,"rtri;":9657,"rtrie;":8885,"rtrif;":9656,"rtriltri;":10702,"ruluhar;":10600,"rx;":8478,"sacute;":347,"sbquo;":8218,"sc;":8827,"scE;":10932,"scap;":10936,"scaron;":353,"sccue;":8829,"sce;":10928,"scedil;":351,"scirc;":349,"scnE;":10934,"scnap;":10938,"scnsim;":8937,"scpolint;":10771,"scsim;":8831,"scy;":1089,"sdot;":8901,"sdotb;":8865,"sdote;":10854,"seArr;":8664,"searhk;":10533,"searr;":8600,"searrow;":8600,sect:167,"sect;":167,"semi;":59,"seswar;":10537,"setminus;":8726,"setmn;":8726,"sext;":10038,"sfr;":[55349,56624],"sfrown;":8994,"sharp;":9839,"shchcy;":1097,"shcy;":1096,"shortmid;":8739,"shortparallel;":8741,shy:173,"shy;":173,"sigma;":963,"sigmaf;":962,"sigmav;":962,"sim;":8764,"simdot;":10858,"sime;":8771,"simeq;":8771,"simg;":10910,"simgE;":10912,"siml;":10909,"simlE;":10911,"simne;":8774,"simplus;":10788,"simrarr;":10610,"slarr;":8592,"smallsetminus;":8726,"smashp;":10803,"smeparsl;":10724,"smid;":8739,"smile;":8995,"smt;":10922,"smte;":10924,"smtes;":[10924,65024],"softcy;":1100,"sol;":47,"solb;":10692,"solbar;":9023,"sopf;":[55349,56676],"spades;":9824,"spadesuit;":9824,"spar;":8741,"sqcap;":8851,"sqcaps;":[8851,65024],"sqcup;":8852,"sqcups;":[8852,65024],"sqsub;":8847,"sqsube;":8849,"sqsubset;":8847,"sqsubseteq;":8849,"sqsup;":8848,"sqsupe;":8850,"sqsupset;":8848,"sqsupseteq;":8850,"squ;":9633,"square;":9633,"squarf;":9642,"squf;":9642,"srarr;":8594,"sscr;":[55349,56520],"ssetmn;":8726,"ssmile;":8995,"sstarf;":8902,"star;":9734,"starf;":9733,"straightepsilon;":1013,"straightphi;":981,"strns;":175,"sub;":8834,"subE;":10949,"subdot;":10941,"sube;":8838,"subedot;":10947,"submult;":10945,"subnE;":10955,"subne;":8842,"subplus;":10943,"subrarr;":10617,"subset;":8834,"subseteq;":8838,"subseteqq;":10949,"subsetneq;":8842,"subsetneqq;":10955,"subsim;":10951,"subsub;":10965,"subsup;":10963,"succ;":8827,"succapprox;":10936,"succcurlyeq;":8829,"succeq;":10928,"succnapprox;":10938,"succneqq;":10934,"succnsim;":8937,"succsim;":8831,"sum;":8721,"sung;":9834,sup1:185,"sup1;":185,sup2:178,"sup2;":178,sup3:179,"sup3;":179,"sup;":8835,"supE;":10950,"supdot;":10942,"supdsub;":10968,"supe;":8839,"supedot;":10948,"suphsol;":10185,"suphsub;":10967,"suplarr;":10619,"supmult;":10946,"supnE;":10956,"supne;":8843,"supplus;":10944,"supset;":8835,"supseteq;":8839,"supseteqq;":10950,"supsetneq;":8843,"supsetneqq;":10956,"supsim;":10952,"supsub;":10964,"supsup;":10966,"swArr;":8665,"swarhk;":10534,"swarr;":8601,"swarrow;":8601,"swnwar;":10538,szlig:223,"szlig;":223,"target;":8982,"tau;":964,"tbrk;":9140,"tcaron;":357,"tcedil;":355,"tcy;":1090,"tdot;":8411,"telrec;":8981,"tfr;":[55349,56625],"there4;":8756,"therefore;":8756,"theta;":952,"thetasym;":977,"thetav;":977,"thickapprox;":8776,"thicksim;":8764,"thinsp;":8201,"thkap;":8776,"thksim;":8764,thorn:254,"thorn;":254,"tilde;":732,times:215,"times;":215,"timesb;":8864,"timesbar;":10801,"timesd;":10800,"tint;":8749,"toea;":10536,"top;":8868,"topbot;":9014,"topcir;":10993,"topf;":[55349,56677],"topfork;":10970,"tosa;":10537,"tprime;":8244,"trade;":8482,"triangle;":9653,"triangledown;":9663,"triangleleft;":9667,"trianglelefteq;":8884,"triangleq;":8796,"triangleright;":9657,"trianglerighteq;":8885,"tridot;":9708,"trie;":8796,"triminus;":10810,"triplus;":10809,"trisb;":10701,"tritime;":10811,"trpezium;":9186,"tscr;":[55349,56521],"tscy;":1094,"tshcy;":1115,"tstrok;":359,"twixt;":8812,"twoheadleftarrow;":8606,"twoheadrightarrow;":8608,"uArr;":8657,"uHar;":10595,uacute:250,"uacute;":250,"uarr;":8593,"ubrcy;":1118,"ubreve;":365,ucirc:251,"ucirc;":251,"ucy;":1091,"udarr;":8645,"udblac;":369,"udhar;":10606,"ufisht;":10622,"ufr;":[55349,56626],ugrave:249,"ugrave;":249,"uharl;":8639,"uharr;":8638,"uhblk;":9600,"ulcorn;":8988,"ulcorner;":8988,"ulcrop;":8975,"ultri;":9720,"umacr;":363,uml:168,"uml;":168,"uogon;":371,"uopf;":[55349,56678],"uparrow;":8593,"updownarrow;":8597,"upharpoonleft;":8639,"upharpoonright;":8638,"uplus;":8846,"upsi;":965,"upsih;":978,"upsilon;":965,"upuparrows;":8648,"urcorn;":8989,"urcorner;":8989,"urcrop;":8974,"uring;":367,"urtri;":9721,"uscr;":[55349,56522],"utdot;":8944,"utilde;":361,"utri;":9653,"utrif;":9652,"uuarr;":8648,uuml:252,"uuml;":252,"uwangle;":10663,"vArr;":8661,"vBar;":10984,"vBarv;":10985,"vDash;":8872,"vangrt;":10652,"varepsilon;":1013,"varkappa;":1008,"varnothing;":8709,"varphi;":981,"varpi;":982,"varpropto;":8733,"varr;":8597,"varrho;":1009,"varsigma;":962,"varsubsetneq;":[8842,65024],"varsubsetneqq;":[10955,65024],"varsupsetneq;":[8843,65024],"varsupsetneqq;":[10956,65024],"vartheta;":977,"vartriangleleft;":8882,"vartriangleright;":8883,"vcy;":1074,"vdash;":8866,"vee;":8744,"veebar;":8891,"veeeq;":8794,"vellip;":8942,"verbar;":124,"vert;":124,"vfr;":[55349,56627],"vltri;":8882,"vnsub;":[8834,8402],"vnsup;":[8835,8402],"vopf;":[55349,56679],"vprop;":8733,"vrtri;":8883,"vscr;":[55349,56523],"vsubnE;":[10955,65024],"vsubne;":[8842,65024],"vsupnE;":[10956,65024],"vsupne;":[8843,65024],"vzigzag;":10650,"wcirc;":373,"wedbar;":10847,"wedge;":8743,"wedgeq;":8793,"weierp;":8472,"wfr;":[55349,56628],"wopf;":[55349,56680],"wp;":8472,"wr;":8768,"wreath;":8768,"wscr;":[55349,56524],"xcap;":8898,"xcirc;":9711,"xcup;":8899,"xdtri;":9661,"xfr;":[55349,56629],"xhArr;":10234,"xharr;":10231,"xi;":958,"xlArr;":10232,"xlarr;":10229,"xmap;":10236,"xnis;":8955,"xodot;":10752,"xopf;":[55349,56681],"xoplus;":10753,"xotime;":10754,"xrArr;":10233,"xrarr;":10230,"xscr;":[55349,56525],"xsqcup;":10758,"xuplus;":10756,"xutri;":9651,"xvee;":8897,"xwedge;":8896,yacute:253,"yacute;":253,"yacy;":1103,"ycirc;":375,"ycy;":1099,yen:165,"yen;":165,"yfr;":[55349,56630],"yicy;":1111,"yopf;":[55349,56682],"yscr;":[55349,56526],"yucy;":1102,yuml:255,"yuml;":255,"zacute;":378,"zcaron;":382,"zcy;":1079,"zdot;":380,"zeetrf;":8488,"zeta;":950,"zfr;":[55349,56631],"zhcy;":1078,"zigrarr;":8669,"zopf;":[55349,56683],"zscr;":[55349,56527],"zwj;":8205,"zwnj;":8204},U=/(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\s\S]/g,z=32,V=/[^\r"&\u0000]+/g,W=/[^\r'&\u0000]+/g,G=/[^\r\t\n\f &>\u0000]+/g,Y=/[^\r\t\n\f \/>A-Z\u0000]+/g,K=/[^\r\t\n\f \/=>A-Z\u0000]+/g,Q=/[^\]\r\u0000\uffff]*/g,$=/[^&<\r\u0000\uffff]*/g,X=/[^<\r\u0000\uffff]*/g,Z=/[^\r\u0000\uffff]*/g,J=/(?:(\/)?([a-z]+)>)|[\s\S]/g,ee=/(?:([-a-z]+)[ \t\n\f]*=[ \t\n\f]*('[^'&\r\u0000]*'|"[^"&\r\u0000]*"|[^\t\n\r\f "&'\u0000>][^&> \t\n\r\f\u0000]*[ \t\n\f]))|[\s\S]/g,te=/[^\x09\x0A\x0C\x0D\x20]/,re=/[^\x09\x0A\x0C\x0D\x20]/g,ne=/[^\x00\x09\x0A\x0C\x0D\x20]/,ie=/^[\x09\x0A\x0C\x0D\x20]+/,oe=/\x00/g;function ae(e){if(e.length<16384)return String.fromCharCode.apply(String,e);for(var t="",r=0;r<e.length;r+=16384)t+=String.fromCharCode.apply(String,e.slice(r,r+16384));return t}function se(e,t){if("string"==typeof t)return e.namespaceURI===a.HTML&&e.localName===t;var r=t[e.namespaceURI];return r&&r[e.localName]}function ce(e){return se(e,M)}function le(e){if(se(e,P))return!0;if(e.namespaceURI===a.MATHML&&"annotation-xml"===e.localName){var t=e.getAttribute("encoding");if(t&&(t=t.toLowerCase()),"text/html"===t||"application/xhtml+xml"===t)return!0}return!1}function ue(e){for(var t=0,r=e.length;t<r;t++)e[t][0]in H&&(e[t][0]=H[e[t][0]])}function pe(e){for(var t=0,r=e.length;t<r;t++)if("definitionurl"===e[t][0]){e[t][0]="definitionURL";break}}function he(e){for(var t=0,r=e.length;t<r;t++)e[t][0]in q&&e[t].push(q[e[t][0]])}function fe(e,t){for(var r=0,n=e.length;r<n;r++){var i=e[r][0],o=e[r][1];t.hasAttribute(i)||t._setAttribute(i,o)}}function de(e,t,r){var k,x,O=null,L=0,D=0,I=!1,M=!1,P=0,q=[],H="",me=!0,ge=0,ye=At,ve="",be="",_e=[],Ee="",we="",Te=[],Se=[],ke=[],xe=[],Ne=[],Re=!1,Ce=function(e,t,r,n){switch(e){case 1:if(0===(t=t.replace(ie,"")).length)return;break;case 4:return void Ge._appendChild(Ge.createComment(t));case 5:var o=t,a=r,s=n;return Ge.appendChild(new i(o,a,s)),Fe||"html"!==o.toLowerCase()||y.test(a)||s&&s.toLowerCase()===v||void 0===s&&b.test(a)?Ge._quirks=!0:(_.test(a)||void 0!==s&&b.test(a))&&(Ge._limitedQuirks=!0),void(Ce=rn)}Ge._quirks=!0,(Ce=rn)(e,t,r,n)},Ae=null,Oe=[],Le=new de.ElementStack,De=new de.ActiveFormattingElements,Ie=void 0!==t,Me=null,Pe=null,qe=!0;t&&(qe=t.ownerDocument._scripting_enabled),r&&!1===r.scripting_enabled&&(qe=!1);var He,Be,je=!0,Fe=!1,Ue=[],ze=!1,Ve=!1,We={document:function(){return Ge},pause:function(){ge++},resume:function(){ge--,this.parse("")},parse:function(e,t){ge>0?H+=e:0===P?(H&&(e=H+e,H=""),t&&(e+="￿",I=!0),O=e,L=e.length,D=0,me&&(me=!1,65279===O.charCodeAt(0)&&(D=1)),P++,Qe(),H=O.substring(D,L),P--):(P++,q.push(O,L,D),O=e,L=e.length,D=0,Qe(),H=O.substring(D,L),D=q.pop(),L=q.pop(),O=q.pop(),H&&(O=H+O.substring(D),L=O.length,D=0,H=""),P--)}},Ge=new n(!0,e);if(Ge._parser=We,Ge._scripting_enabled=qe,t){if(t.ownerDocument._quirks&&(Ge._quirks=!0),t.ownerDocument._limitedQuirks&&(Ge._limitedQuirks=!0),t.namespaceURI===a.HTML)switch(t.localName){case"title":case"textarea":ye=Ot;break;case"style":case"xmp":case"iframe":case"noembed":case"noframes":case"script":case"plaintext":ye=It;break;case"noscript":qe&&(ye=It)}var Ye=Ge.createElement("html");Ge._appendChild(Ye),Le.push(Ye),t instanceof c.HTMLTemplateElement&&Oe.push(bn),Tt();for(var Ke=t;null!==Ke;Ke=Ke.parentElement)if(Ke instanceof c.HTMLFormElement){Pe=Ke;break}}function Qe(){for(var e,t,r,n;D<L;){if(ge>0)return;switch(typeof ye.lookahead){case"undefined":if(e=O.charCodeAt(D++),M&&(M=!1,10===e)){D++;continue}switch(e){case 13:D<L?10===O.charCodeAt(D)&&D++:M=!0,ye(10);break;case 65535:if(I&&D===L){ye(u);break}default:ye(e)}break;case"number":e=O.charCodeAt(D);var i=ye.lookahead,o=!0;if(i<0&&(o=!1,i=-i),i<L-D)t=o?O.substring(D,D+i):null,n=!1;else{if(!I)return;t=o?O.substring(D,L):null,n=!0,65535===e&&D===L-1&&(e=u)}ye(e,t,n);break;case"string":e=O.charCodeAt(D),r=ye.lookahead;var a=O.indexOf(r,D);if(-1!==a)t=O.substring(D,a+r.length),n=!1;else{if(!I)return;t=O.substring(D,L),65535===e&&D===L-1&&(e=u),n=!0}ye(e,t,n)}}}function $e(e,t){for(var r=0;r<Ne.length;r++)if(Ne[r][0]===e)return;void 0!==t?Ne.push([e,t]):Ne.push([e])}function Xe(){Re=!0,ve="",Ne.length=0}function Ze(){_e.length=0}function Je(){Ee=""}function et(){we=""}function tt(){Te.length=0}function rt(){Se.length=0,ke=null,xe=null}function nt(){ke=[]}function it(){xe=[]}function ot(){Fe=!0}function at(e){return be===e}function st(){if(Ue.length>0){var e=ae(Ue);if(Ue.length=0,Ve&&(Ve=!1,"\n"===e[0]&&(e=e.substring(1)),0===e.length))return;ft(p,e),ze=!1}Ve=!1}function ct(e){e.lastIndex=D-1;var t=e.exec(O);if(t&&t.index===D-1)return t=t[0],D+=t.length-1,I&&D===L&&(t=t.slice(0,-1),D--),t;throw new Error("should never happen")}function lt(e){e.lastIndex=D-1;var t=e.exec(O)[0];return!!t&&(function(e){Ue.length>0&&st();if(Ve&&(Ve=!1,"\n"===e[0]&&(e=e.substring(1)),0===e.length))return;ft(p,e)}(t),D+=t.length-1,!0)}function ut(){if(Re)ft(f,ve);else{var e=ve;ve="",be=e,ft(h,e,Ne)}}function pt(){ft(m,ae(Se),ke?ae(ke):void 0,xe?ae(xe):void 0)}function ht(){st(),Ce(u),Ge.modclock=1}var ft=We.insertToken=function(e,t,r,n){st();var i=Le.top;i&&i.namespaceURI!==a.HTML?e!==h&&e!==p?kn(e,t,r,n):ce(i)&&(e===p||e===h&&"mglyph"!==t&&"malignmark"!==t)||e===h&&"svg"===t&&i.namespaceURI===a.MATHML&&"annotation-xml"===i.localName||le(i)?(Be=!0,Ce(e,t,r,n),Be=!1):kn(e,t,r,n):Ce(e,t,r,n)};function dt(e){var t=Le.top;yt&&se(t,S)?wt(function(t){return t.createComment(e)}):(t instanceof c.HTMLTemplateElement&&(t=t.content),t._appendChild(t.ownerDocument.createComment(e)))}function mt(e){var t=Le.top;if(yt&&se(t,S))wt(function(t){return t.createTextNode(e)});else{t instanceof c.HTMLTemplateElement&&(t=t.content);var r=t.lastChild;r&&r.nodeType===o.TEXT_NODE?r.appendData(e):t._appendChild(t.ownerDocument.createTextNode(e))}}function gt(e,t,r){var n=s.createElement(e,t,null);if(r)for(var i=0,o=r.length;i<o;i++)n._setAttribute(r[i][0],r[i][1]);return n}var yt=!1;function vt(e,t){var r=bt(function(r){return gt(r,e,t)});return se(r,A)&&(r._form=Pe),r}function bt(e){var t;return yt&&se(Le.top,S)?t=wt(e):Le.top instanceof c.HTMLTemplateElement?(t=e(Le.top.content.ownerDocument),Le.top.content._appendChild(t)):(t=e(Le.top.ownerDocument),Le.top._appendChild(t)),Le.push(t),t}function _t(e,t,r){return bt(function(n){var i=n.createElementNS(r,e);if(t)for(var o=0,a=t.length;o<a;o++){var s=t[o];2===s.length?i._setAttribute(s[0],s[1]):i._setAttributeNS(s[2],s[0],s[1])}return i})}function Et(e){for(var t=Le.elements.length-1;t>=0;t--)if(Le.elements[t]instanceof e)return t;return-1}function wt(e){var t,r,n,i,a,s;if((n=Et(c.HTMLTableElement),(i=Et(c.HTMLTemplateElement))>=0&&(n<0||i>n)?t=Le.elements[i]:n>=0&&((t=Le.elements[n].parentNode)?r=Le.elements[n]:t=Le.elements[n-1]),t||(t=Le.elements[0]),t instanceof c.HTMLTemplateElement&&(t=t.content),(a=e(t.ownerDocument)).nodeType===o.TEXT_NODE)&&((s=r?r.previousSibling:t.lastChild)&&s.nodeType===o.TEXT_NODE))return s.appendData(a.data),a;return r?t.insertBefore(a,r):t._appendChild(a),a}function Tt(){for(var e=!1,r=Le.elements.length-1;r>=0;r--){var n=Le.elements[r];if(0===r&&(e=!0,Ie&&(n=t)),n.namespaceURI===a.HTML){var i=n.localName;switch(i){case"select":for(var o=r;o>0;){var s=Le.elements[--o];if(s instanceof c.HTMLTemplateElement)break;if(s instanceof c.HTMLTableElement)return void(Ce=vn)}return void(Ce=yn);case"tr":return void(Ce=mn);case"tbody":case"tfoot":case"thead":return void(Ce=dn);case"caption":return void(Ce=hn);case"colgroup":return void(Ce=fn);case"table":return void(Ce=un);case"template":return void(Ce=Oe[Oe.length-1]);case"body":return void(Ce=cn);case"frameset":return void(Ce=En);case"html":return void(Ce=null===Me?nn:sn);default:if(!e){if("head"===i)return void(Ce=on);if("td"===i||"th"===i)return void(Ce=gn)}}}if(e)return void(Ce=cn)}}function St(e,t){vt(e,t),ye=Lt,Ae=Ce,Ce=ln}function kt(e,t){return{elt:gt(e,De.list[t].localName,De.attrs[t]),attrs:De.attrs[t]}}function xt(){if(0!==De.list.length){var e=De.list[De.list.length-1];if(e!==De.MARKER&&-1===Le.elements.lastIndexOf(e)){for(var t=De.list.length-2;t>=0&&(e=De.list[t])!==De.MARKER&&-1===Le.elements.lastIndexOf(e);t--);for(t+=1;t<De.list.length;t++){var r=bt(function(e){return kt(e,t).elt});De.list[t]=r}}}}var Nt={localName:"BM"};function Rt(){delete Ge._parser,Le.elements.length=0,Ge.defaultView&&Ge.defaultView.dispatchEvent(new c.Event("load",{}))}function Ct(e,t){ye=t,D--}function At(e){switch(e){case 38:k=At,ye=Yr;break;case 60:if(function(){J.lastIndex=D;var e=J.exec(O);if(!e)throw new Error("should never happen");var t=e[2];return!!t&&(e[1]?(D+=t.length+2,ft(f,t)):(D+=t.length+1,be=t,ft(h,t,g)),!0)}())break;ye=Mt;break;case 0:Ue.push(e),ze=!0;break;case-1:ht();break;default:lt($)||Ue.push(e)}}function Ot(e){switch(e){case 38:k=Ot,ye=Yr;break;case 60:ye=Ht;break;case 0:Ue.push(65533),ze=!0;break;case-1:ht();break;default:Ue.push(e)}}function Lt(e){switch(e){case 60:ye=Ft;break;case 0:Ue.push(65533);break;case-1:ht();break;default:lt(X)||Ue.push(e)}}function Dt(e){switch(e){case 60:ye=Vt;break;case 0:Ue.push(65533);break;case-1:ht();break;default:lt(X)||Ue.push(e)}}function It(e){switch(e){case 0:Ue.push(65533);break;case-1:ht();break;default:lt(Z)||Ue.push(e)}}function Mt(e){switch(e){case 33:ye=yr;break;case 47:ye=Pt;break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Re=!1,ve="",Ne.length=0,Ct(0,qt);break;case 63:Ct(0,gr);break;default:Ue.push(60),Ct(0,At)}}function Pt(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),Ct(0,qt);break;case 62:ye=At;break;case-1:Ue.push(60),Ue.push(47),ht();break;default:Ct(0,gr)}}function qt(e){switch(e){case 9:case 10:case 12:case 32:ye=sr;break;case 47:ye=mr;break;case 62:ye=At,ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:ve+=String.fromCharCode(e+32);break;case 0:ve+=String.fromCharCode(65533);break;case-1:ht();break;default:ve+=ct(Y)}}function Ht(e){47===e?(Ze(),ye=Bt):(Ue.push(60),Ct(0,Ot))}function Bt(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),Ct(0,jt);break;default:Ue.push(60),Ue.push(47),Ct(0,Ot)}}function jt(e){switch(e){case 9:case 10:case 12:case 32:if(at(ve))return void(ye=sr);break;case 47:if(at(ve))return void(ye=mr);break;case 62:if(at(ve))return ye=At,void ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:return ve+=String.fromCharCode(e+32),void _e.push(e);case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return ve+=String.fromCharCode(e),void _e.push(e)}Ue.push(60),Ue.push(47),l(Ue,_e),Ct(0,Ot)}function Ft(e){47===e?(Ze(),ye=Ut):(Ue.push(60),Ct(0,Lt))}function Ut(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),Ct(0,zt);break;default:Ue.push(60),Ue.push(47),Ct(0,Lt)}}function zt(e){switch(e){case 9:case 10:case 12:case 32:if(at(ve))return void(ye=sr);break;case 47:if(at(ve))return void(ye=mr);break;case 62:if(at(ve))return ye=At,void ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:return ve+=String.fromCharCode(e+32),void _e.push(e);case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return ve+=String.fromCharCode(e),void _e.push(e)}Ue.push(60),Ue.push(47),l(Ue,_e),Ct(0,Lt)}function Vt(e){switch(e){case 47:Ze(),ye=Wt;break;case 33:ye=Yt,Ue.push(60),Ue.push(33);break;default:Ue.push(60),Ct(0,Dt)}}function Wt(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),Ct(0,Gt);break;default:Ue.push(60),Ue.push(47),Ct(0,Dt)}}function Gt(e){switch(e){case 9:case 10:case 12:case 32:if(at(ve))return void(ye=sr);break;case 47:if(at(ve))return void(ye=mr);break;case 62:if(at(ve))return ye=At,void ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:return ve+=String.fromCharCode(e+32),void _e.push(e);case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return ve+=String.fromCharCode(e),void _e.push(e)}Ue.push(60),Ue.push(47),l(Ue,_e),Ct(0,Dt)}function Yt(e){45===e?(ye=Kt,Ue.push(45)):Ct(0,Dt)}function Kt(e){45===e?(ye=Xt,Ue.push(45)):Ct(0,Dt)}function Qt(e){switch(e){case 45:ye=$t,Ue.push(45);break;case 60:ye=Zt;break;case 0:Ue.push(65533);break;case-1:ht();break;default:Ue.push(e)}}function $t(e){switch(e){case 45:ye=Xt,Ue.push(45);break;case 60:ye=Zt;break;case 0:ye=Qt,Ue.push(65533);break;case-1:ht();break;default:ye=Qt,Ue.push(e)}}function Xt(e){switch(e){case 45:Ue.push(45);break;case 60:ye=Zt;break;case 62:ye=Dt,Ue.push(62);break;case 0:ye=Qt,Ue.push(65533);break;case-1:ht();break;default:ye=Qt,Ue.push(e)}}function Zt(e){switch(e){case 47:Ze(),ye=Jt;break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Ze(),Ue.push(60),Ct(0,tr);break;default:Ue.push(60),Ct(0,Qt)}}function Jt(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:Xe(),Ct(0,er);break;default:Ue.push(60),Ue.push(47),Ct(0,Qt)}}function er(e){switch(e){case 9:case 10:case 12:case 32:if(at(ve))return void(ye=sr);break;case 47:if(at(ve))return void(ye=mr);break;case 62:if(at(ve))return ye=At,void ut();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:return ve+=String.fromCharCode(e+32),void _e.push(e);case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return ve+=String.fromCharCode(e),void _e.push(e)}Ue.push(60),Ue.push(47),l(Ue,_e),Ct(0,Qt)}function tr(e){switch(e){case 9:case 10:case 12:case 32:case 47:case 62:ye="script"===ae(_e)?rr:Qt,Ue.push(e);break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:_e.push(e+32),Ue.push(e);break;case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:_e.push(e),Ue.push(e);break;default:Ct(0,Qt)}}function rr(e){switch(e){case 45:ye=nr,Ue.push(45);break;case 60:ye=or,Ue.push(60);break;case 0:Ue.push(65533);break;case-1:ht();break;default:Ue.push(e)}}function nr(e){switch(e){case 45:ye=ir,Ue.push(45);break;case 60:ye=or,Ue.push(60);break;case 0:ye=rr,Ue.push(65533);break;case-1:ht();break;default:ye=rr,Ue.push(e)}}function ir(e){switch(e){case 45:Ue.push(45);break;case 60:ye=or,Ue.push(60);break;case 62:ye=Dt,Ue.push(62);break;case 0:ye=rr,Ue.push(65533);break;case-1:ht();break;default:ye=rr,Ue.push(e)}}function or(e){47===e?(Ze(),ye=ar,Ue.push(47)):Ct(0,rr)}function ar(e){switch(e){case 9:case 10:case 12:case 32:case 47:case 62:ye="script"===ae(_e)?Qt:rr,Ue.push(e);break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:_e.push(e+32),Ue.push(e);break;case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:_e.push(e),Ue.push(e);break;default:Ct(0,rr)}}function sr(e){switch(e){case 9:case 10:case 12:case 32:break;case 47:ye=mr;break;case 62:ye=At,ut();break;case-1:ht();break;case 61:Je(),Ee+=String.fromCharCode(e),ye=cr;break;default:if(function(){ee.lastIndex=D-1;var e=ee.exec(O);if(!e)throw new Error("should never happen");var t=e[1];if(!t)return!1;var r=e[2],n=r.length;switch(r[0]){case'"':case"'":r=r.substring(1,n-1),D+=e[0].length-1,ye=dr;break;default:ye=sr,D+=e[0].length-1,r=r.substring(0,n-1)}for(var i=0;i<Ne.length;i++)if(Ne[i][0]===t)return!0;return Ne.push([t,r]),!0}())break;Je(),Ct(0,cr)}}function cr(e){switch(e){case 9:case 10:case 12:case 32:case 47:case 62:case-1:Ct(0,lr);break;case 61:ye=ur;break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:Ee+=String.fromCharCode(e+32);break;case 0:Ee+=String.fromCharCode(65533);break;case 34:case 39:case 60:default:Ee+=ct(K)}}function lr(e){switch(e){case 9:case 10:case 12:case 32:break;case 47:$e(Ee),ye=mr;break;case 61:ye=ur;break;case 62:ye=At,$e(Ee),ut();break;case-1:$e(Ee),ht();break;default:$e(Ee),Je(),Ct(0,cr)}}function ur(e){switch(e){case 9:case 10:case 12:case 32:break;case 34:et(),ye=pr;break;case 39:et(),ye=hr;break;case 62:default:et(),Ct(0,fr)}}function pr(e){switch(e){case 34:$e(Ee,we),ye=dr;break;case 38:k=pr,ye=Yr;break;case 0:we+=String.fromCharCode(65533);break;case-1:ht();break;case 10:we+=String.fromCharCode(e);break;default:we+=ct(V)}}function hr(e){switch(e){case 39:$e(Ee,we),ye=dr;break;case 38:k=hr,ye=Yr;break;case 0:we+=String.fromCharCode(65533);break;case-1:ht();break;case 10:we+=String.fromCharCode(e);break;default:we+=ct(W)}}function fr(e){switch(e){case 9:case 10:case 12:case 32:$e(Ee,we),ye=sr;break;case 38:k=fr,ye=Yr;break;case 62:$e(Ee,we),ye=At,ut();break;case 0:we+=String.fromCharCode(65533);break;case-1:D--,ye=At;break;case 34:case 39:case 60:case 61:case 96:default:we+=ct(G)}}function dr(e){switch(e){case 9:case 10:case 12:case 32:ye=sr;break;case 47:ye=mr;break;case 62:ye=At,ut();break;case-1:ht();break;default:Ct(0,sr)}}function mr(e){switch(e){case 62:ye=At,Re?ft(f,ve,null,!0):ft(h,ve,Ne,!0);break;case-1:ht();break;default:Ct(0,sr)}}function gr(e,t,r){var n=t.length;D+=r?n-1:n;var i=t.substring(0,n-1);i=(i=(i=i.replace(/\u0000/g,"�")).replace(/\u000D\u000A/g,"\n")).replace(/\u000D/g,"\n"),ft(d,i),ye=At}function yr(e,t,r){if("-"===t[0]&&"-"===t[1])return D+=2,tt(),void(ye=vr);"DOCTYPE"===t.toUpperCase()?(D+=7,ye=Rr):"[CDATA["===t&&Le.top&&"http://www.w3.org/1999/xhtml"!==Le.top.namespaceURI?(D+=7,ye=Vr):ye=gr}function vr(e){switch(tt(),e){case 45:ye=br;break;case 62:ye=At,ft(d,ae(Te));break;default:Ct(0,_r)}}function br(e){switch(e){case 45:ye=xr;break;case 62:ye=At,ft(d,ae(Te));break;case-1:ft(d,ae(Te)),ht();break;default:Te.push(45),Ct(0,_r)}}function _r(e){switch(e){case 60:Te.push(e),ye=Er;break;case 45:ye=kr;break;case 0:Te.push(65533);break;case-1:ft(d,ae(Te)),ht();break;default:Te.push(e)}}function Er(e){switch(e){case 33:Te.push(e),ye=wr;break;case 60:Te.push(e);break;default:Ct(0,_r)}}function wr(e){switch(e){case 45:ye=Tr;break;default:Ct(0,_r)}}function Tr(e){switch(e){case 45:ye=Sr;break;default:Ct(0,kr)}}function Sr(e){switch(e){case 62:case-1:default:Ct(0,xr)}}function kr(e){switch(e){case 45:ye=xr;break;case-1:ft(d,ae(Te)),ht();break;default:Te.push(45),Ct(0,_r)}}function xr(e){switch(e){case 62:ye=At,ft(d,ae(Te));break;case 33:ye=Nr;break;case 45:Te.push(45);break;case-1:ft(d,ae(Te)),ht();break;default:Te.push(45),Te.push(45),Ct(0,_r)}}function Nr(e){switch(e){case 45:Te.push(45),Te.push(45),Te.push(33),ye=kr;break;case 62:ye=At,ft(d,ae(Te));break;case-1:ft(d,ae(Te)),ht();break;default:Te.push(45),Te.push(45),Te.push(33),Ct(0,_r)}}function Rr(e){switch(e){case 9:case 10:case 12:case 32:ye=Cr;break;case-1:rt(),ot(),pt(),ht();break;default:Ct(0,Cr)}}function Cr(e){switch(e){case 9:case 10:case 12:case 32:break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:rt(),Se.push(e+32),ye=Ar;break;case 0:rt(),Se.push(65533),ye=Ar;break;case 62:rt(),ot(),ye=At,pt();break;case-1:rt(),ot(),pt(),ht();break;default:rt(),Se.push(e),ye=Ar}}function Ar(e){switch(e){case 9:case 10:case 12:case 32:ye=Or;break;case 62:ye=At,pt();break;case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:Se.push(e+32);break;case 0:Se.push(65533);break;case-1:ot(),pt(),ht();break;default:Se.push(e)}}function Or(e,t,r){switch(e){case 9:case 10:case 12:case 32:D+=1;break;case 62:ye=At,D+=1,pt();break;case-1:ot(),pt(),ht();break;default:"PUBLIC"===(t=t.toUpperCase())?(D+=6,ye=Lr):"SYSTEM"===t?(D+=6,ye=Hr):(ot(),ye=zr)}}function Lr(e){switch(e){case 9:case 10:case 12:case 32:ye=Dr;break;case 34:nt(),ye=Ir;break;case 39:nt(),ye=Mr;break;case 62:ot(),ye=At,pt();break;case-1:ot(),pt(),ht();break;default:ot(),ye=zr}}function Dr(e){switch(e){case 9:case 10:case 12:case 32:break;case 34:nt(),ye=Ir;break;case 39:nt(),ye=Mr;break;case 62:ot(),ye=At,pt();break;case-1:ot(),pt(),ht();break;default:ot(),ye=zr}}function Ir(e){switch(e){case 34:ye=Pr;break;case 0:ke.push(65533);break;case 62:ot(),ye=At,pt();break;case-1:ot(),pt(),ht();break;default:ke.push(e)}}function Mr(e){switch(e){case 39:ye=Pr;break;case 0:ke.push(65533);break;case 62:ot(),ye=At,pt();break;case-1:ot(),pt(),ht();break;default:ke.push(e)}}function Pr(e){switch(e){case 9:case 10:case 12:case 32:ye=qr;break;case 62:ye=At,pt();break;case 34:it(),ye=jr;break;case 39:it(),ye=Fr;break;case-1:ot(),pt(),ht();break;default:ot(),ye=zr}}function qr(e){switch(e){case 9:case 10:case 12:case 32:break;case 62:ye=At,pt();break;case 34:it(),ye=jr;break;case 39:it(),ye=Fr;break;case-1:ot(),pt(),ht();break;default:ot(),ye=zr}}function Hr(e){switch(e){case 9:case 10:case 12:case 32:ye=Br;break;case 34:it(),ye=jr;break;case 39:it(),ye=Fr;break;case 62:ot(),ye=At,pt();break;case-1:ot(),pt(),ht();break;default:ot(),ye=zr}}function Br(e){switch(e){case 9:case 10:case 12:case 32:break;case 34:it(),ye=jr;break;case 39:it(),ye=Fr;break;case 62:ot(),ye=At,pt();break;case-1:ot(),pt(),ht();break;default:ot(),ye=zr}}function jr(e){switch(e){case 34:ye=Ur;break;case 0:xe.push(65533);break;case 62:ot(),ye=At,pt();break;case-1:ot(),pt(),ht();break;default:xe.push(e)}}function Fr(e){switch(e){case 39:ye=Ur;break;case 0:xe.push(65533);break;case 62:ot(),ye=At,pt();break;case-1:ot(),pt(),ht();break;default:xe.push(e)}}function Ur(e){switch(e){case 9:case 10:case 12:case 32:break;case 62:ye=At,pt();break;case-1:ot(),pt(),ht();break;default:ye=zr}}function zr(e){switch(e){case 62:ye=At,pt();break;case-1:pt(),ht()}}function Vr(e){switch(e){case 93:ye=Wr;break;case-1:ht();break;case 0:ze=!0;default:lt(Q)||Ue.push(e)}}function Wr(e){switch(e){case 93:ye=Gr;break;default:Ue.push(93),Ct(0,Vr)}}function Gr(e){switch(e){case 93:Ue.push(93);break;case 62:st(),ye=At;break;default:Ue.push(93),Ue.push(93),Ct(0,Vr)}}function Yr(e){switch(Ze(),_e.push(38),e){case 9:case 10:case 12:case 32:case 60:case 38:case-1:Ct(0,tn);break;case 35:_e.push(e),ye=Qr;break;default:Ct(0,Kr)}}function Kr(e){U.lastIndex=D;var t=U.exec(O);if(!t)throw new Error("should never happen");var r=t[1];if(r){switch(D+=r.length,l(_e,function(e){for(var t=[],r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t}(r)),k){case pr:case hr:case fr:if(";"!==r[r.length-1]&&/[=A-Za-z0-9]/.test(O[D]))return void(ye=tn)}Ze();var n=F[r];"number"==typeof n?_e.push(n):l(_e,n),ye=tn}else ye=tn}function Qr(e){switch(x=0,e){case 120:case 88:_e.push(e),ye=$r;break;default:Ct(0,Xr)}}function $r(e){switch(e){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 66:case 67:case 68:case 69:case 70:case 97:case 98:case 99:case 100:case 101:case 102:Ct(0,Zr);break;default:Ct(0,tn)}}function Xr(e){switch(e){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:Ct(0,Jr);break;default:Ct(0,tn)}}function Zr(e){switch(e){case 65:case 66:case 67:case 68:case 69:case 70:x*=16,x+=e-55;break;case 97:case 98:case 99:case 100:case 101:case 102:x*=16,x+=e-87;break;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:x*=16,x+=e-48;break;case 59:ye=en;break;default:Ct(0,en)}}function Jr(e){switch(e){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:x*=10,x+=e-48;break;case 59:ye=en;break;default:Ct(0,en)}}function en(e){x in j?x=j[x]:(x>1114111||x>=55296&&x<57344)&&(x=65533),Ze(),x<=65535?_e.push(x):(x-=65536,_e.push(55296+(x>>10)),_e.push(56320+(1023&x))),Ct(0,tn)}function tn(e){switch(k){case pr:case hr:case fr:we+=ae(_e);break;default:l(Ue,_e)}Ct(0,k)}function rn(e,t,r,n){var i;switch(e){case 1:if(0===(t=t.replace(ie,"")).length)return;break;case 5:return;case 4:return void Ge._appendChild(Ge.createComment(t));case 2:if("html"===t)return i=gt(Ge,t,r),Le.push(i),Ge.appendChild(i),void(Ce=nn);break;case 3:switch(t){case"html":case"head":case"body":case"br":break;default:return}}i=gt(Ge,"html",null),Le.push(i),Ge.appendChild(i),(Ce=nn)(e,t,r,n)}function nn(e,t,r,n){switch(e){case 1:if(0===(t=t.replace(ie,"")).length)return;break;case 5:return;case 4:return void dt(t);case 2:switch(t){case"html":return void cn(e,t,r,n);case"head":var i=vt(t,r);return Me=i,void(Ce=on)}break;case 3:switch(t){case"html":case"head":case"body":case"br":break;default:return}}nn(h,"head",null),Ce(e,t,r,n)}function on(e,t,r,n){switch(e){case 1:var i=t.match(ie);if(i&&(mt(i[0]),t=t.substring(i[0].length)),0===t.length)return;break;case 4:return void dt(t);case 5:return;case 2:switch(t){case"html":return void cn(e,t,r,n);case"meta":case"base":case"basefont":case"bgsound":case"link":return vt(t,r),void Le.pop();case"title":return vt(t,r),ye=Ot,Ae=Ce,void(Ce=ln);case"noscript":if(!qe)return vt(t,r),void(Ce=an);case"noframes":case"style":return void St(t,r);case"script":return bt(function(e){var n=gt(e,t,r);return n._parser_inserted=!0,n._force_async=!1,Ie&&(n._already_started=!0),st(),n}),ye=Dt,Ae=Ce,void(Ce=ln);case"template":return vt(t,r),De.insertMarker(),je=!1,Ce=bn,void Oe.push(Ce);case"head":return}break;case 3:switch(t){case"head":return Le.pop(),void(Ce=sn);case"body":case"html":case"br":break;case"template":if(!Le.contains("template"))return;return Le.generateImpliedEndTags(null,"thorough"),Le.popTag("template"),De.clearToMarker(),Oe.pop(),void Tt();default:return}}on(f,"head",null),Ce(e,t,r,n)}function an(e,t,r,n){switch(e){case 5:return;case 4:return void on(e,t);case 1:var i=t.match(ie);if(i&&(on(e,i[0]),t=t.substring(i[0].length)),0===t.length)return;break;case 2:switch(t){case"html":return void cn(e,t,r,n);case"basefont":case"bgsound":case"link":case"meta":case"noframes":case"style":return void on(e,t,r);case"head":case"noscript":return}break;case 3:switch(t){case"noscript":return Le.pop(),void(Ce=on);case"br":break;default:return}}an(f,"noscript",null),Ce(e,t,r,n)}function sn(e,t,r,n){switch(e){case 1:var i=t.match(ie);if(i&&(mt(i[0]),t=t.substring(i[0].length)),0===t.length)return;break;case 4:return void dt(t);case 5:return;case 2:switch(t){case"html":return void cn(e,t,r,n);case"body":return vt(t,r),je=!1,void(Ce=cn);case"frameset":return vt(t,r),void(Ce=En);case"base":case"basefont":case"bgsound":case"link":case"meta":case"noframes":case"script":case"style":case"template":case"title":return Le.push(Me),on(h,t,r),void Le.removeElement(Me);case"head":return}break;case 3:switch(t){case"template":return on(e,t,r,n);case"body":case"html":case"br":break;default:return}}sn(h,"body",null),je=!0,Ce(e,t,r,n)}function cn(e,t,r,n){var i,o,s,l;switch(e){case 1:if(ze&&0===(t=t.replace(oe,"")).length)return;return je&&te.test(t)&&(je=!1),xt(),void mt(t);case 5:return;case 4:return void dt(t);case-1:return Oe.length?bn(e):void Rt();case 2:switch(t){case"html":if(Le.contains("template"))return;return void fe(r,Le.elements[0]);case"base":case"basefont":case"bgsound":case"link":case"meta":case"noframes":case"script":case"style":case"template":case"title":return void on(h,t,r);case"body":if(!(i=Le.elements[1])||!(i instanceof c.HTMLBodyElement)||Le.contains("template"))return;return je=!1,void fe(r,i);case"frameset":if(!je)return;if(!((i=Le.elements[1])&&i instanceof c.HTMLBodyElement))return;for(i.parentNode&&i.parentNode.removeChild(i);!(Le.top instanceof c.HTMLHtmlElement);)Le.pop();return vt(t,r),void(Ce=En);case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"nav":case"ol":case"p":case"section":case"summary":case"ul":return Le.inButtonScope("p")&&cn(f,"p"),void vt(t,r);case"menu":return Le.inButtonScope("p")&&cn(f,"p"),se(Le.top,"menuitem")&&Le.pop(),void vt(t,r);case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return Le.inButtonScope("p")&&cn(f,"p"),Le.top instanceof c.HTMLHeadingElement&&Le.pop(),void vt(t,r);case"pre":case"listing":return Le.inButtonScope("p")&&cn(f,"p"),vt(t,r),Ve=!0,void(je=!1);case"form":if(Pe&&!Le.contains("template"))return;return Le.inButtonScope("p")&&cn(f,"p"),l=vt(t,r),void(Le.contains("template")||(Pe=l));case"li":for(je=!1,o=Le.elements.length-1;o>=0;o--){if((s=Le.elements[o])instanceof c.HTMLLIElement){cn(f,"li");break}if(se(s,E)&&!se(s,w))break}return Le.inButtonScope("p")&&cn(f,"p"),void vt(t,r);case"dd":case"dt":for(je=!1,o=Le.elements.length-1;o>=0;o--){if(se(s=Le.elements[o],T)){cn(f,s.localName);break}if(se(s,E)&&!se(s,w))break}return Le.inButtonScope("p")&&cn(f,"p"),void vt(t,r);case"plaintext":return Le.inButtonScope("p")&&cn(f,"p"),vt(t,r),void(ye=It);case"button":return void(Le.inScope("button")?(cn(f,"button"),Ce(e,t,r,n)):(xt(),vt(t,r),je=!1));case"a":var u=De.findElementByTag("a");u&&(cn(f,t),De.remove(u),Le.removeElement(u));case"b":case"big":case"code":case"em":case"font":case"i":case"s":case"small":case"strike":case"strong":case"tt":case"u":return xt(),void De.push(vt(t,r),r);case"nobr":return xt(),Le.inScope(t)&&(cn(f,t),xt()),void De.push(vt(t,r),r);case"applet":case"marquee":case"object":return xt(),vt(t,r),De.insertMarker(),void(je=!1);case"table":return!Ge._quirks&&Le.inButtonScope("p")&&cn(f,"p"),vt(t,r),je=!1,void(Ce=un);case"area":case"br":case"embed":case"img":case"keygen":case"wbr":return xt(),vt(t,r),Le.pop(),void(je=!1);case"input":xt(),l=vt(t,r),Le.pop();var p=l.getAttribute("type");return void(p&&"hidden"===p.toLowerCase()||(je=!1));case"param":case"source":case"track":return vt(t,r),void Le.pop();case"hr":return Le.inButtonScope("p")&&cn(f,"p"),se(Le.top,"menuitem")&&Le.pop(),vt(t,r),Le.pop(),void(je=!1);case"image":return void cn(h,"img",r,n);case"textarea":return vt(t,r),Ve=!0,je=!1,ye=Ot,Ae=Ce,void(Ce=ln);case"xmp":return Le.inButtonScope("p")&&cn(f,"p"),xt(),je=!1,void St(t,r);case"iframe":return je=!1,void St(t,r);case"noembed":return void St(t,r);case"noscript":if(qe)return void St(t,r);break;case"select":return xt(),vt(t,r),je=!1,void(Ce=Ce===un||Ce===hn||Ce===dn||Ce===mn||Ce===gn?vn:yn);case"optgroup":case"option":return Le.top instanceof c.HTMLOptionElement&&cn(f,"option"),xt(),void vt(t,r);case"menuitem":return se(Le.top,"menuitem")&&Le.pop(),xt(),void vt(t,r);case"rb":case"rtc":return Le.inScope("ruby")&&Le.generateImpliedEndTags(),void vt(t,r);case"rp":case"rt":return Le.inScope("ruby")&&Le.generateImpliedEndTags("rtc"),void vt(t,r);case"math":return xt(),pe(r),he(r),_t(t,r,a.MATHML),void(n&&Le.pop());case"svg":return xt(),ue(r),he(r),_t(t,r,a.SVG),void(n&&Le.pop());case"caption":case"col":case"colgroup":case"frame":case"head":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return}return xt(),void vt(t,r);case 3:switch(t){case"template":return void on(f,t,r);case"body":if(!Le.inScope("body"))return;return void(Ce=_n);case"html":if(!Le.inScope("body"))return;return void(Ce=_n)(e,t,r);case"address":case"article":case"aside":case"blockquote":case"button":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"listing":case"main":case"menu":case"nav":case"ol":case"pre":case"section":case"summary":case"ul":if(!Le.inScope(t))return;return Le.generateImpliedEndTags(),void Le.popTag(t);case"form":if(Le.contains("template")){if(!Le.inScope("form"))return;Le.generateImpliedEndTags(),Le.popTag("form")}else{var d=Pe;if(Pe=null,!d||!Le.elementInScope(d))return;Le.generateImpliedEndTags(),Le.removeElement(d)}return;case"p":return void(Le.inButtonScope(t)?(Le.generateImpliedEndTags(t),Le.popTag(t)):(cn(h,t,null),Ce(e,t,r,n)));case"li":if(!Le.inListItemScope(t))return;return Le.generateImpliedEndTags(t),void Le.popTag(t);case"dd":case"dt":if(!Le.inScope(t))return;return Le.generateImpliedEndTags(t),void Le.popTag(t);case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":if(!Le.elementTypeInScope(c.HTMLHeadingElement))return;return Le.generateImpliedEndTags(),void Le.popElementType(c.HTMLHeadingElement);case"sarcasm":break;case"a":case"b":case"big":case"code":case"em":case"font":case"i":case"nobr":case"s":case"small":case"strike":case"strong":case"tt":case"u":if(function(e){if(se(Le.top,e)&&-1===De.indexOf(Le.top))return Le.pop(),!0;for(var t=0;t<8;){t++;var r=De.findElementByTag(e);if(!r)return!1;var n=Le.elements.lastIndexOf(r);if(-1===n)return De.remove(r),!0;if(!Le.elementInScope(r))return!0;for(var i,o=null,a=n+1;a<Le.elements.length;a++)if(se(Le.elements[a],E)){o=Le.elements[a],i=a;break}if(!o)return Le.popElement(r),De.remove(r),!0;var s=Le.elements[n-1];De.insertAfter(r,Nt);for(var l,u=o,p=o,h=i,f=0;f++,(u=Le.elements[--h])!==r;)if(l=De.indexOf(u),f>3&&-1!==l&&(De.remove(u),l=-1),-1!==l){var d=kt(s.ownerDocument,l);De.replace(u,d.elt,d.attrs),Le.elements[h]=d.elt,u=d.elt,p===o&&(De.remove(Nt),De.insertAfter(d.elt,Nt)),u._appendChild(p),p=u}else Le.removeElement(u);yt&&se(s,S)?wt(function(){return p}):s instanceof c.HTMLTemplateElement?s.content._appendChild(p):s._appendChild(p);for(var m=kt(o.ownerDocument,De.indexOf(r));o.hasChildNodes();)m.elt._appendChild(o.firstChild);o._appendChild(m.elt),De.remove(r),De.replace(Nt,m.elt,m.attrs),Le.removeElement(r);var g=Le.elements.lastIndexOf(o);Le.elements.splice(g+1,0,m.elt)}return!0}(t))return;break;case"applet":case"marquee":case"object":if(!Le.inScope(t))return;return Le.generateImpliedEndTags(),Le.popTag(t),void De.clearToMarker();case"br":return void cn(h,t,null)}for(o=Le.elements.length-1;o>=0;o--){if(se(s=Le.elements[o],t)){Le.generateImpliedEndTags(t),Le.popElement(s);break}if(se(s,E))return}return}}function ln(e,t,r,n){switch(e){case 1:return void mt(t);case-1:return Le.top instanceof c.HTMLScriptElement&&(Le.top._already_started=!0),Le.pop(),void(Ce=Ae)(e);case 3:return Le.pop(),void(Ce=Ae);default:return}}function un(e,t,r,n){switch(e){case 1:if(Be)return void cn(e,t,r,n);if(se(Le.top,S))return He=[],Ae=Ce,void(Ce=pn)(e,t,r,n);break;case 4:return void dt(t);case 5:return;case 2:switch(t){case"caption":return Le.clearToContext(N),De.insertMarker(),vt(t,r),void(Ce=hn);case"colgroup":return Le.clearToContext(N),vt(t,r),void(Ce=fn);case"col":return un(h,"colgroup",null),void Ce(e,t,r,n);case"tbody":case"tfoot":case"thead":return Le.clearToContext(N),vt(t,r),void(Ce=dn);case"td":case"th":case"tr":return un(h,"tbody",null),void Ce(e,t,r,n);case"table":if(!Le.inTableScope(t))return;return un(f,t),void Ce(e,t,r,n);case"style":case"script":case"template":return void on(e,t,r,n);case"input":if("hidden"!==function(e){for(var t=0,r=e.length;t<r;t++)if("type"===e[t][0])return e[t][1].toLowerCase();return null}(r))break;return vt(t,r),void Le.pop();case"form":if(Pe||Le.contains("template"))return;return Pe=vt(t,r),void Le.popElement(Pe)}break;case 3:switch(t){case"table":if(!Le.inTableScope(t))return;return Le.popTag(t),void Tt();case"body":case"caption":case"col":case"colgroup":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return;case"template":return void on(e,t,r,n)}break;case-1:return void cn(e,t,r,n)}yt=!0,cn(e,t,r,n),yt=!1}function pn(e,t,r,n){if(e===p){if(ze&&0===(t=t.replace(oe,"")).length)return;He.push(t)}else{var i=He.join("");He.length=0,te.test(i)?(yt=!0,cn(p,i),yt=!1):mt(i),(Ce=Ae)(e,t,r,n)}}function hn(e,t,r,n){function i(){return!!Le.inTableScope("caption")&&(Le.generateImpliedEndTags(),Le.popTag("caption"),De.clearToMarker(),Ce=un,!0)}switch(e){case 2:switch(t){case"caption":case"col":case"colgroup":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return void(i()&&Ce(e,t,r,n))}break;case 3:switch(t){case"caption":return void i();case"table":return void(i()&&Ce(e,t,r,n));case"body":case"col":case"colgroup":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return}}cn(e,t,r,n)}function fn(e,t,r,n){switch(e){case 1:var i=t.match(ie);if(i&&(mt(i[0]),t=t.substring(i[0].length)),0===t.length)return;break;case 4:return void dt(t);case 5:return;case 2:switch(t){case"html":return void cn(e,t,r,n);case"col":return vt(t,r),void Le.pop();case"template":return void on(e,t,r,n)}break;case 3:switch(t){case"colgroup":if(!se(Le.top,"colgroup"))return;return Le.pop(),void(Ce=un);case"col":return;case"template":return void on(e,t,r,n)}break;case-1:return void cn(e,t,r,n)}se(Le.top,"colgroup")&&(fn(f,"colgroup"),Ce(e,t,r,n))}function dn(e,t,r,n){function i(){(Le.inTableScope("tbody")||Le.inTableScope("thead")||Le.inTableScope("tfoot"))&&(Le.clearToContext(R),dn(f,Le.top.localName,null),Ce(e,t,r,n))}switch(e){case 2:switch(t){case"tr":return Le.clearToContext(R),vt(t,r),void(Ce=mn);case"th":case"td":return dn(h,"tr",null),void Ce(e,t,r,n);case"caption":case"col":case"colgroup":case"tbody":case"tfoot":case"thead":return void i()}break;case 3:switch(t){case"table":return void i();case"tbody":case"tfoot":case"thead":return void(Le.inTableScope(t)&&(Le.clearToContext(R),Le.pop(),Ce=un));case"body":case"caption":case"col":case"colgroup":case"html":case"td":case"th":case"tr":return}}un(e,t,r,n)}function mn(e,t,r,n){function i(){return!!Le.inTableScope("tr")&&(Le.clearToContext(C),Le.pop(),Ce=dn,!0)}switch(e){case 2:switch(t){case"th":case"td":return Le.clearToContext(C),vt(t,r),Ce=gn,void De.insertMarker();case"caption":case"col":case"colgroup":case"tbody":case"tfoot":case"thead":case"tr":return void(i()&&Ce(e,t,r,n))}break;case 3:switch(t){case"tr":return void i();case"table":return void(i()&&Ce(e,t,r,n));case"tbody":case"tfoot":case"thead":return void(Le.inTableScope(t)&&i()&&Ce(e,t,r,n));case"body":case"caption":case"col":case"colgroup":case"html":case"td":case"th":return}}un(e,t,r,n)}function gn(e,t,r,n){switch(e){case 2:switch(t){case"caption":case"col":case"colgroup":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return void(Le.inTableScope("td")?(gn(f,"td"),Ce(e,t,r,n)):Le.inTableScope("th")&&(gn(f,"th"),Ce(e,t,r,n)))}break;case 3:switch(t){case"td":case"th":if(!Le.inTableScope(t))return;return Le.generateImpliedEndTags(),Le.popTag(t),De.clearToMarker(),void(Ce=mn);case"body":case"caption":case"col":case"colgroup":case"html":return;case"table":case"tbody":case"tfoot":case"thead":case"tr":if(!Le.inTableScope(t))return;return gn(f,Le.inTableScope("td")?"td":"th"),void Ce(e,t,r,n)}}cn(e,t,r,n)}function yn(e,t,r,n){switch(e){case 1:if(ze&&0===(t=t.replace(oe,"")).length)return;return void mt(t);case 4:return void dt(t);case 5:return;case-1:return void cn(e,t,r,n);case 2:switch(t){case"html":return void cn(e,t,r,n);case"option":return Le.top instanceof c.HTMLOptionElement&&yn(f,t),void vt(t,r);case"optgroup":return Le.top instanceof c.HTMLOptionElement&&yn(f,"option"),Le.top instanceof c.HTMLOptGroupElement&&yn(f,t),void vt(t,r);case"select":return void yn(f,t);case"input":case"keygen":case"textarea":if(!Le.inSelectScope("select"))return;return yn(f,"select"),void Ce(e,t,r,n);case"script":case"template":return void on(e,t,r,n)}break;case 3:switch(t){case"optgroup":return Le.top instanceof c.HTMLOptionElement&&Le.elements[Le.elements.length-2]instanceof c.HTMLOptGroupElement&&yn(f,"option"),void(Le.top instanceof c.HTMLOptGroupElement&&Le.pop());case"option":return void(Le.top instanceof c.HTMLOptionElement&&Le.pop());case"select":if(!Le.inSelectScope(t))return;return Le.popTag(t),void Tt();case"template":return void on(e,t,r,n)}}}function vn(e,t,r,n){switch(t){case"caption":case"table":case"tbody":case"tfoot":case"thead":case"tr":case"td":case"th":switch(e){case 2:return vn(f,"select"),void Ce(e,t,r,n);case 3:return void(Le.inTableScope(t)&&(vn(f,"select"),Ce(e,t,r,n)))}}yn(e,t,r,n)}function bn(e,t,r,n){function i(i){Ce=i,Oe[Oe.length-1]=Ce,Ce(e,t,r,n)}switch(e){case 1:case 4:case 5:return void cn(e,t,r,n);case-1:return void(Le.contains("template")?(Le.popTag("template"),De.clearToMarker(),Oe.pop(),Tt(),Ce(e,t,r,n)):Rt());case 2:switch(t){case"base":case"basefont":case"bgsound":case"link":case"meta":case"noframes":case"script":case"style":case"template":case"title":return void on(e,t,r,n);case"caption":case"colgroup":case"tbody":case"tfoot":case"thead":return void i(un);case"col":return void i(fn);case"tr":return void i(dn);case"td":case"th":return void i(mn)}return void i(cn);case 3:switch(t){case"template":return void on(e,t,r,n);default:return}}}function _n(e,t,r,n){switch(e){case 1:if(te.test(t))break;return void cn(e,t);case 4:return void Le.elements[0]._appendChild(Ge.createComment(t));case 5:return;case-1:return void Rt();case 2:if("html"===t)return void cn(e,t,r,n);break;case 3:if("html"===t){if(Ie)return;return void(Ce=Tn)}}(Ce=cn)(e,t,r,n)}function En(e,t,r,n){switch(e){case 1:return void((t=t.replace(re,"")).length>0&&mt(t));case 4:return void dt(t);case 5:return;case-1:return void Rt();case 2:switch(t){case"html":return void cn(e,t,r,n);case"frameset":return void vt(t,r);case"frame":return vt(t,r),void Le.pop();case"noframes":return void on(e,t,r,n)}break;case 3:if("frameset"===t){if(Ie&&Le.top instanceof c.HTMLHtmlElement)return;return Le.pop(),void(Ie||Le.top instanceof c.HTMLFrameSetElement||(Ce=wn))}}}function wn(e,t,r,n){switch(e){case 1:return void((t=t.replace(re,"")).length>0&&mt(t));case 4:return void dt(t);case 5:return;case-1:return void Rt();case 2:switch(t){case"html":return void cn(e,t,r,n);case"noframes":return void on(e,t,r,n)}break;case 3:if("html"===t)return void(Ce=Sn)}}function Tn(e,t,r,n){switch(e){case 1:if(te.test(t))break;return void cn(e,t,r,n);case 4:return void Ge._appendChild(Ge.createComment(t));case 5:return void cn(e,t,r,n);case-1:return void Rt();case 2:if("html"===t)return void cn(e,t,r,n)}(Ce=cn)(e,t,r,n)}function Sn(e,t,r,n){switch(e){case 1:return void((t=t.replace(re,"")).length>0&&cn(e,t,r,n));case 4:return void Ge._appendChild(Ge.createComment(t));case 5:return void cn(e,t,r,n);case-1:return void Rt();case 2:switch(t){case"html":return void cn(e,t,r,n);case"noframes":return void on(e,t,r,n)}}}function kn(e,r,n,i){var o,s;switch(e){case 1:return je&&ne.test(r)&&(je=!1),ze&&(r=r.replace(oe,"�")),void mt(r);case 4:return void dt(r);case 5:return;case 2:switch(r){case"font":if(!function(e){for(var t=0,r=e.length;t<r;t++)switch(e[t][0]){case"color":case"face":case"size":return!0}return!1}(n))break;case"b":case"big":case"blockquote":case"body":case"br":case"center":case"code":case"dd":case"div":case"dl":case"dt":case"em":case"embed":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":case"head":case"hr":case"i":case"img":case"li":case"listing":case"menu":case"meta":case"nobr":case"ol":case"p":case"pre":case"ruby":case"s":case"small":case"span":case"strong":case"strike":case"sub":case"sup":case"table":case"tt":case"u":case"ul":case"var":if(Ie)break;do{Le.pop(),o=Le.top}while(o.namespaceURI!==a.HTML&&!ce(o)&&!le(o));return void ft(e,r,n,i)}return(o=1===Le.elements.length&&Ie?t:Le.top).namespaceURI===a.MATHML?pe(n):o.namespaceURI===a.SVG&&(r=(s=r)in B?B[s]:s,ue(n)),he(n),_t(r,n,o.namespaceURI),void(i&&("script"===r&&(o.namespaceURI,a.SVG),Le.pop()));case 3:if(o=Le.top,"script"===r&&o.namespaceURI===a.SVG&&"script"===o.localName)Le.pop();else for(var c=Le.elements.length-1,l=Le.elements[c];;){if(l.localName.toLowerCase()===r){Le.popElement(l);break}if((l=Le.elements[--c]).namespaceURI===a.HTML){Ce(e,r,n,i);break}}return}}return gr.lookahead=">",yr.lookahead=7,Or.lookahead=6,Kr.lookahead=-z,We.testTokenizer=function(e,t,r,n){var i=[];switch(t){case"PCDATA state":ye=At;break;case"RCDATA state":ye=Ot;break;case"RAWTEXT state":ye=Lt;break;case"PLAINTEXT state":ye=It}if(r&&(be=r),ft=function(e,t,r,n){switch(st(),e){case 1:i.length>0&&"Character"===i[i.length-1][0]?i[i.length-1][1]+=t:i.push(["Character",t]);break;case 4:i.push(["Comment",t]);break;case 5:i.push(["DOCTYPE",t,void 0===r?null:r,void 0===n?null:n,!Fe]);break;case 2:for(var o=Object.create(null),a=0;a<r.length;a++){var s=r[a];1===s.length?o[s[0]]="":o[s[0]]=s[1]}var c=["StartTag",t,o];n&&c.push(!0),i.push(c);break;case 3:i.push(["EndTag",t])}},n){for(var o=0;o<e.length;o++)this.parse(e[o]);this.parse("",!0)}else this.parse(e,!0);return i},We}de.ElementStack=function(){this.elements=[],this.top=null},de.ElementStack.prototype.push=function(e){this.elements.push(e),this.top=e},de.ElementStack.prototype.pop=function(e){this.elements.pop(),this.top=this.elements[this.elements.length-1]},de.ElementStack.prototype.popTag=function(e){for(var t=this.elements.length-1;t>0;t--){if(se(this.elements[t],e))break}this.elements.length=t,this.top=this.elements[t-1]},de.ElementStack.prototype.popElementType=function(e){for(var t=this.elements.length-1;t>0&&!(this.elements[t]instanceof e);t--);this.elements.length=t,this.top=this.elements[t-1]},de.ElementStack.prototype.popElement=function(e){for(var t=this.elements.length-1;t>0&&this.elements[t]!==e;t--);this.elements.length=t,this.top=this.elements[t-1]},de.ElementStack.prototype.removeElement=function(e){if(this.top===e)this.pop();else{var t=this.elements.lastIndexOf(e);-1!==t&&this.elements.splice(t,1)}},de.ElementStack.prototype.clearToContext=function(e){for(var t=this.elements.length-1;t>0&&!se(this.elements[t],e);t--);this.elements.length=t+1,this.top=this.elements[t]},de.ElementStack.prototype.contains=function(e){return this.inSpecificScope(e,Object.create(null))},de.ElementStack.prototype.inSpecificScope=function(e,t){for(var r=this.elements.length-1;r>=0;r--){var n=this.elements[r];if(se(n,e))return!0;if(se(n,t))return!1}return!1},de.ElementStack.prototype.elementInSpecificScope=function(e,t){for(var r=this.elements.length-1;r>=0;r--){var n=this.elements[r];if(n===e)return!0;if(se(n,t))return!1}return!1},de.ElementStack.prototype.elementTypeInSpecificScope=function(e,t){for(var r=this.elements.length-1;r>=0;r--){var n=this.elements[r];if(n instanceof e)return!0;if(se(n,t))return!1}return!1},de.ElementStack.prototype.inScope=function(e){return this.inSpecificScope(e,O)},de.ElementStack.prototype.elementInScope=function(e){return this.elementInSpecificScope(e,O)},de.ElementStack.prototype.elementTypeInScope=function(e){return this.elementTypeInSpecificScope(e,O)},de.ElementStack.prototype.inButtonScope=function(e){return this.inSpecificScope(e,D)},de.ElementStack.prototype.inListItemScope=function(e){return this.inSpecificScope(e,L)},de.ElementStack.prototype.inTableScope=function(e){return this.inSpecificScope(e,I)},de.ElementStack.prototype.inSelectScope=function(e){for(var t=this.elements.length-1;t>=0;t--){var r=this.elements[t];if(r.namespaceURI!==a.HTML)return!1;var n=r.localName;if(n===e)return!0;if("optgroup"!==n&&"option"!==n)return!1}return!1},de.ElementStack.prototype.generateImpliedEndTags=function(e,t){for(var r=t?x:k,n=this.elements.length-1;n>=0;n--){var i=this.elements[n];if(e&&se(i,e))break;if(!se(this.elements[n],r))break}this.elements.length=n+1,this.top=this.elements[n]},de.ActiveFormattingElements=function(){this.list=[],this.attrs=[]},de.ActiveFormattingElements.prototype.MARKER={localName:"|"},de.ActiveFormattingElements.prototype.insertMarker=function(){this.list.push(this.MARKER),this.attrs.push(this.MARKER)},de.ActiveFormattingElements.prototype.push=function(e,t){for(var r=0,n=this.list.length-1;n>=0&&this.list[n]!==this.MARKER;n--)if(a(e,this.list[n],this.attrs[n])&&3===++r){this.list.splice(n,1),this.attrs.splice(n,1);break}this.list.push(e);for(var i=[],o=0;o<t.length;o++)i[o]=t[o];function a(e,t,r){if(e.localName!==t.localName)return!1;if(e._numattrs!==r.length)return!1;for(var n=0,i=r.length;n<i;n++){var o=r[n][0],a=r[n][1];if(!e.hasAttribute(o))return!1;if(e.getAttribute(o)!==a)return!1}return!0}this.attrs.push(i)},de.ActiveFormattingElements.prototype.clearToMarker=function(){for(var e=this.list.length-1;e>=0&&this.list[e]!==this.MARKER;e--);e<0&&(e=0),this.list.length=e,this.attrs.length=e},de.ActiveFormattingElements.prototype.findElementByTag=function(e){for(var t=this.list.length-1;t>=0;t--){var r=this.list[t];if(r===this.MARKER)break;if(r.localName===e)return r}return null},de.ActiveFormattingElements.prototype.indexOf=function(e){return this.list.lastIndexOf(e)},de.ActiveFormattingElements.prototype.remove=function(e){var t=this.list.lastIndexOf(e);-1!==t&&(this.list.splice(t,1),this.attrs.splice(t,1))},de.ActiveFormattingElements.prototype.replace=function(e,t,r){var n=this.list.lastIndexOf(e);-1!==n&&(this.list[n]=t,this.attrs[n]=r)},de.ActiveFormattingElements.prototype.insertAfter=function(e,t){var r=this.list.lastIndexOf(e);-1!==r&&(this.list.splice(r,0,t),this.attrs.splice(r,0,t))}},function(e,t,r){"use strict";e.exports=s;var n=r(5),i=r(40),o=r(3),a=r(26);function s(e,t,r){this.nodeType=n.DOCUMENT_TYPE_NODE,this.ownerDocument=null,this.name=e,this.publicId=t||"",this.systemId=r||""}s.prototype=Object.create(i.prototype,{nodeName:{get:function(){return this.name}},nodeValue:{get:function(){return null},set:function(){}},clone:{value:function(){o.DataCloneError()}},isEqual:{value:function(e){return this.name===e.name&&this.publicId===e.publicId&&this.systemId===e.systemId}}}),Object.defineProperties(s.prototype,a)},function(e,t,r){"use strict";var n=r(17),i=r(49),o=r(102),a=r(32),s=r(3);function c(e){this.document=e||(new n).createHTMLDocument(""),this.document._scripting_enabled=!0,this.document.defaultView=this,this.location=new o(this,this.document._address||"about:blank")}e.exports=c,c.prototype=Object.create(i.prototype,{_run:{value:a.Window_run},console:{value:console},history:{value:{back:s.nyi,forward:s.nyi,go:s.nyi}},navigator:{value:r(101)},window:{get:function(){return this}},self:{get:function(){return this}},frames:{get:function(){return this}},parent:{get:function(){return this}},top:{get:function(){return this}},length:{value:0},frameElement:{value:null},opener:{value:null},onload:{get:function(){return this._getEventHandler("load")},set:function(e){this._setEventHandler("load",e)}},getComputedStyle:{value:function(e){return e.style}}}),s.expose(r(100),c),s.expose(r(31),c)},function(e,t,r){"use strict";var n=r(103);function i(e){this._element=e}function o(e){var t=new n.css.Parser,r={property:Object.create(null),priority:Object.create(null)};return t.addListener("property",function(e){e.invalid||(r.property[e.property.text]=e.value.text,e.important&&(r.priority[e.property.text]="important"))}),e=(""+e).replace(/^;/,""),t.parseStyleAttribute(e),r}e.exports=i;var a={};i.prototype=Object.create(Object.prototype,{_parsed:{get:function(){if(!this._parsedStyles||this.cssText!==this._lastParsedText){var e=this.cssText;this._parsedStyles=o(e),this._lastParsedText=e,delete this._names}return this._parsedStyles}},_serialize:{value:function(){var e=this._parsed,t="";for(var r in e.property)t&&(t+=" "),t+=r+": "+e.property[r],e.priority[r]&&(t+=" !"+e.priority[r]),t+=";";this.cssText=t,this._lastParsedText=t,delete this._names}},cssText:{get:function(){return this._element.getAttribute("style")},set:function(e){this._element.setAttribute("style",e)}},length:{get:function(){return this._names||(this._names=Object.getOwnPropertyNames(this._parsed.property)),this._names.length}},item:{value:function(e){return this._names||(this._names=Object.getOwnPropertyNames(this._parsed.property)),this._names[e]}},getPropertyValue:{value:function(e){return e=e.toLowerCase(),this._parsed.property[e]||""}},getPropertyPriority:{value:function(e){return e=e.toLowerCase(),this._parsed.priority[e]||""}},setProperty:{value:function(e,t,r){if(e=e.toLowerCase(),null!==t&&void 0!==t||(t=""),null!==r&&void 0!==r||(r=""),t!==a&&(t=""+t),""!==t){if(""===r||r===a||/^important$/i.test(r)){var n=this._parsed;if(t===a){if(!n.property[e])return;""!==r?n.priority[e]="important":delete n.priority[e]}else{if(-1!==t.indexOf(";"))return;var i=o(e+":"+t);if(0===Object.getOwnPropertyNames(i.property).length)return;if(0!==Object.getOwnPropertyNames(i.priority).length)return;for(var s in i.property)n.property[s]=i.property[s],r!==a&&(""!==r?n.priority[s]="important":n.priority[s]&&delete n.priority[s])}this._serialize()}}else this.removeProperty(e)}},setPropertyValue:{value:function(e,t){return this.setProperty(e,t,a)}},setPropertyPriority:{value:function(e,t){return this.setProperty(e,a,t)}},removeProperty:{value:function(e){e=e.toLowerCase();var t=this._parsed;e in t.property&&(delete t.property[e],delete t.priority[e],this._serialize())}}});var s={background:"background",backgroundAttachment:"background-attachment",backgroundColor:"background-color",backgroundImage:"background-image",backgroundPosition:"background-position",backgroundRepeat:"background-repeat",border:"border",borderCollapse:"border-collapse",borderColor:"border-color",borderSpacing:"border-spacing",borderStyle:"border-style",borderTop:"border-top",borderRight:"border-right",borderBottom:"border-bottom",borderLeft:"border-left",borderTopColor:"border-top-color",borderRightColor:"border-right-color",borderBottomColor:"border-bottom-color",borderLeftColor:"border-left-color",borderTopStyle:"border-top-style",borderRightStyle:"border-right-style",borderBottomStyle:"border-bottom-style",borderLeftStyle:"border-left-style",borderTopWidth:"border-top-width",borderRightWidth:"border-right-width",borderBottomWidth:"border-bottom-width",borderLeftWidth:"border-left-width",borderWidth:"border-width",bottom:"bottom",captionSide:"caption-side",clear:"clear",clip:"clip",color:"color",content:"content",counterIncrement:"counter-increment",counterReset:"counter-reset",cursor:"cursor",direction:"direction",display:"display",emptyCells:"empty-cells",cssFloat:"float",font:"font",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",height:"height",left:"left",letterSpacing:"letter-spacing",lineHeight:"line-height",listStyle:"list-style",listStyleImage:"list-style-image",listStylePosition:"list-style-position",listStyleType:"list-style-type",margin:"margin",marginTop:"margin-top",marginRight:"margin-right",marginBottom:"margin-bottom",marginLeft:"margin-left",markerOffset:"marker-offset",marks:"marks",maxHeight:"max-height",maxWidth:"max-width",minHeight:"min-height",minWidth:"min-width",opacity:"opacity",orphans:"orphans",outline:"outline",outlineColor:"outline-color",outlineStyle:"outline-style",outlineWidth:"outline-width",overflow:"overflow",padding:"padding",paddingTop:"padding-top",paddingRight:"padding-right",paddingBottom:"padding-bottom",paddingLeft:"padding-left",page:"page",pageBreakAfter:"page-break-after",pageBreakBefore:"page-break-before",pageBreakInside:"page-break-inside",position:"position",quotes:"quotes",right:"right",size:"size",tableLayout:"table-layout",textAlign:"text-align",textDecoration:"text-decoration",textIndent:"text-indent",textShadow:"text-shadow",textTransform:"text-transform",top:"top",unicodeBidi:"unicode-bidi",verticalAlign:"vertical-align",visibility:"visibility",whiteSpace:"white-space",widows:"widows",width:"width",wordSpacing:"word-spacing",zIndex:"z-index"};for(var c in s)l(c);function l(e){var t=s[e];Object.defineProperty(i.prototype,e,{get:function(){return this.getPropertyValue(t)},set:function(e){this.setProperty(t,e)}})}},function(e,t,r){"use strict";var n=r(5),i=r(10),o=r(23),a=r(3),s=r(34),c=r(33),l=t.elements={},u=Object.create(null);function p(e){return c(e,y,l,u)}function h(e){return{get:function(){var t=this._getattr(e);if(null===t)return"";var r=this.doc._resolve(t);return null===r?t:r},set:function(t){this._setattr(e,t)}}}function f(e){return{get:function(){var t=this._getattr(e);return null===t?null:"use-credentials"===t.toLowerCase()?"use-credentials":"anonymous"},set:function(t){null===t||void 0===t?this.removeAttribute(e):this._setattr(e,t)}}}t.createElement=function(e,t,r){return new(u[t]||v)(e,t,r)};var d={type:["","no-referrer","no-referrer-when-downgrade","same-origin","origin","strict-origin","origin-when-cross-origin","strict-origin-when-cross-origin","unsafe-url"],missing:""},m={A:!0,LINK:!0,BUTTON:!0,INPUT:!0,SELECT:!0,TEXTAREA:!0,COMMAND:!0},g=function(e,t,r){y.call(this,e,t,r),this._form=null},y=t.HTMLElement=p({superclass:i,ctor:function(e,t,r){i.call(this,e,t,a.NAMESPACE.HTML,r)},props:{innerHTML:{get:function(){return this.serialize()},set:function(e){var t=this.ownerDocument.implementation.mozHTMLParser(this.ownerDocument._address,this);t.parse(e,!0);for(var r=t.document().firstChild,n=this instanceof u.template?this.content:this;n.hasChildNodes();)n.removeChild(n.firstChild);for(n.doc.adoptNode(r);r.hasChildNodes();)n.appendChild(r.firstChild)}},style:{get:function(){return this._style||(this._style=new o(this)),this._style}},click:{value:function(){if(!this._click_in_progress){this._click_in_progress=!0;try{this._pre_click_activation_steps&&this._pre_click_activation_steps();var e=this.ownerDocument.createEvent("MouseEvent");e.initMouseEvent("click",!0,!0,this.ownerDocument.defaultView,1,0,0,0,0,!1,!1,!1,!1,0,null),this.dispatchEvent(e)?this._post_click_activation_steps&&this._post_click_activation_steps(e):this._cancelled_activation_steps&&this._cancelled_activation_steps()}finally{this._click_in_progress=!1}}}}},attributes:{title:String,lang:String,dir:{type:["ltr","rtl","auto"],missing:""},accessKey:String,hidden:Boolean,tabIndex:{type:"long",default:function(){return this.tagName in m||this.contentEditable?0:-1}}},events:["abort","canplay","canplaythrough","change","click","contextmenu","cuechange","dblclick","drag","dragend","dragenter","dragleave","dragover","dragstart","drop","durationchange","emptied","ended","input","invalid","keydown","keypress","keyup","loadeddata","loadedmetadata","loadstart","mousedown","mousemove","mouseout","mouseover","mouseup","mousewheel","pause","play","playing","progress","ratechange","readystatechange","reset","seeked","seeking","select","show","stalled","submit","suspend","timeupdate","volumechange","waiting","blur","error","focus","load","scroll"]}),v=p({ctor:function(e,t,r){y.call(this,e,t,r)}}),b={form:{get:function(){return this._form}}};p({tag:"a",ctor:function(e,t,r){y.call(this,e,t,r)},props:{_post_click_activation_steps:{value:function(e){this.href&&(this.ownerDocument.defaultView.location=this.href)}},blur:{value:function(){}},focus:{value:function(){}}},attributes:{href:h,ping:String,download:String,target:String,rel:String,media:String,hreflang:String,type:String,referrerPolicy:d,coords:String,charset:String,name:String,rev:String,shape:String}}),s._inherit(u.a.prototype),p({tag:"area",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{alt:String,target:String,download:String,rel:String,media:String,href:h,hreflang:String,type:String,shape:String,coords:String,ping:String,referrerPolicy:d,noHref:Boolean}}),p({tag:"br",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{clear:String}}),p({tag:"base",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{target:String}}),p({tag:"body",ctor:function(e,t,r){y.call(this,e,t,r)},events:["afterprint","beforeprint","beforeunload","blur","error","focus","hashchange","load","message","offline","online","pagehide","pageshow","popstate","resize","scroll","storage","unload"],attributes:{text:{type:String,treatNullAsEmptyString:!0},link:{type:String,treatNullAsEmptyString:!0},vLink:{type:String,treatNullAsEmptyString:!0},aLink:{type:String,treatNullAsEmptyString:!0},bgColor:{type:String,treatNullAsEmptyString:!0},background:String}}),p({tag:"button",ctor:function(e,t,r){g.call(this,e,t,r)},props:b,attributes:{name:String,value:String,disabled:Boolean,autofocus:Boolean,type:{type:["submit","reset","button","menu"],missing:"submit"},formTarget:String,formNoValidate:Boolean,formMethod:{type:["get","post","dialog"],invalid:"get",missing:""},formEnctype:{type:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],invalid:"application/x-www-form-urlencoded",missing:""}}}),p({tag:"dl",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{compact:Boolean}}),p({tag:"data",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{value:String}}),p({tag:"datalist",ctor:function(e,t,r){y.call(this,e,t,r)}}),p({tag:"details",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{open:Boolean}}),p({tag:"div",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{align:String}}),p({tag:"embed",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{src:h,type:String,width:String,height:String,align:String,name:String}}),p({tag:"fieldset",ctor:function(e,t,r){g.call(this,e,t,r)},props:b,attributes:{disabled:Boolean,name:String}}),p({tag:"form",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{action:String,autocomplete:{type:["on","off"],missing:"on"},name:String,acceptCharset:{name:"accept-charset"},target:String,noValidate:Boolean,method:{type:["get","post","dialog"],invalid:"get",missing:"get"},enctype:{type:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],invalid:"application/x-www-form-urlencoded",missing:"application/x-www-form-urlencoded"},encoding:{name:"enctype",type:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],invalid:"application/x-www-form-urlencoded",missing:"application/x-www-form-urlencoded"}}}),p({tag:"hr",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{align:String,color:String,noShade:Boolean,size:String,width:String}}),p({tag:"head",ctor:function(e,t,r){y.call(this,e,t,r)}}),p({tags:["h1","h2","h3","h4","h5","h6"],ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{align:String}}),p({tag:"html",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{version:String}}),p({tag:"iframe",ctor:function(e,t,n){y.call(this,e,t,n);var i=r(22);this._contentWindow=new i},props:{contentWindow:{get:function(){return this._contentWindow}},contentDocument:{get:function(){return this.contentWindow.document}}},attributes:{src:h,srcdoc:String,name:String,width:String,height:String,seamless:Boolean,allowFullscreen:Boolean,allowUserMedia:Boolean,allowPaymentRequest:Boolean,referrerPolicy:d,align:String,scrolling:String,frameBorder:String,longDesc:h,marginHeight:{type:String,treatNullAsEmptyString:!0},marginWidth:{type:String,treatNullAsEmptyString:!0}}}),p({tag:"img",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{alt:String,src:h,srcset:String,crossOrigin:f,useMap:String,isMap:Boolean,height:{type:"unsigned long",default:0},width:{type:"unsigned long",default:0},referrerPolicy:d,name:String,lowsrc:h,align:String,hspace:{type:"unsigned long",default:0},vspace:{type:"unsigned long",default:0},longDesc:h,border:{type:String,treatNullAsEmptyString:!0}}}),p({tag:"input",ctor:function(e,t,r){g.call(this,e,t,r)},props:{form:b.form,_post_click_activation_steps:{value:function(e){if("checkbox"===this.type)this.checked=!this.checked;else if("radio"===this.type)for(var t=this.form.getElementsByName(this.name),r=t.length-1;r>=0;r--){var n=t[r];n.checked=n===this}}}},attributes:{name:String,disabled:Boolean,autofocus:Boolean,accept:String,alt:String,max:String,min:String,pattern:String,placeholder:String,step:String,dirName:String,defaultValue:{name:"value"},multiple:Boolean,required:Boolean,readOnly:Boolean,checked:Boolean,value:String,src:h,defaultChecked:{name:"checked",type:Boolean},size:{type:"unsigned long",default:20,min:1,setmin:1},maxLength:{type:"unsigned long",min:0,setmin:0,default:-1},autocomplete:String,type:{type:["text","hidden","search","tel","url","email","password","datetime","date","month","week","time","datetime-local","number","range","color","checkbox","radio","file","submit","image","reset","button"],missing:"text"},formTarget:String,formNoValidate:Boolean,formMethod:{type:["get","post"],invalid:"get",missing:""},formEnctype:{type:["application/x-www-form-urlencoded","multipart/form-data","text/plain"],invalid:"application/x-www-form-urlencoded",missing:""},inputMode:{type:["verbatim","latin","latin-name","latin-prose","full-width-latin","kana","kana-name","katakana","numeric","tel","email","url"],missing:""},align:String,useMap:String}}),p({tag:"keygen",ctor:function(e,t,r){g.call(this,e,t,r)},props:b,attributes:{name:String,disabled:Boolean,autofocus:Boolean,challenge:String,keytype:{type:["rsa"],missing:""}}}),p({tag:"li",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{value:{type:"long",default:0},type:String}}),p({tag:"label",ctor:function(e,t,r){g.call(this,e,t,r)},props:b,attributes:{htmlFor:{name:"for",type:String}}}),p({tag:"legend",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{align:String}}),p({tag:"link",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{href:h,rel:String,media:String,hreflang:String,type:String,crossOrigin:f,nonce:String,integrity:String,referrerPolicy:d,charset:String,rev:String,target:String}}),p({tag:"map",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{name:String}}),p({tag:"menu",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{type:{type:["context","popup","toolbar"],missing:"toolbar"},label:String,compact:Boolean}}),p({tag:"meta",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{name:String,content:String,httpEquiv:{name:"http-equiv",type:String},scheme:String}}),p({tag:"meter",ctor:function(e,t,r){g.call(this,e,t,r)},props:b}),p({tags:["ins","del"],ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{cite:h,dateTime:String}}),p({tag:"ol",ctor:function(e,t,r){y.call(this,e,t,r)},props:{_numitems:{get:function(){var e=0;return this.childNodes.forEach(function(t){t.nodeType===n.ELEMENT_NODE&&"LI"===t.tagName&&e++}),e}}},attributes:{type:String,reversed:Boolean,start:{type:"long",default:function(){return this.reversed?this._numitems:1}},compact:Boolean}}),p({tag:"object",ctor:function(e,t,r){g.call(this,e,t,r)},props:b,attributes:{data:h,type:String,name:String,useMap:String,typeMustMatch:Boolean,width:String,height:String,align:String,archive:String,code:String,declare:Boolean,hspace:{type:"unsigned long",default:0},standby:String,vspace:{type:"unsigned long",default:0},codeBase:h,codeType:String,border:{type:String,treatNullAsEmptyString:!0}}}),p({tag:"optgroup",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{disabled:Boolean,label:String}}),p({tag:"option",ctor:function(e,t,r){y.call(this,e,t,r)},props:{form:{get:function(){for(var e=this.parentNode;e&&e.nodeType===n.ELEMENT_NODE;){if("select"===e.localName)return e.form;e=e.parentNode}}}},attributes:{disabled:Boolean,defaultSelected:{name:"selected",type:Boolean},label:String,value:String}}),p({tag:"output",ctor:function(e,t,r){g.call(this,e,t,r)},props:b,attributes:{name:String}}),p({tag:"p",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{align:String}}),p({tag:"param",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{name:String,value:String,type:String,valueType:String}}),p({tags:["pre","listing","xmp"],ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{width:{type:"long",default:0}}}),p({tag:"progress",ctor:function(e,t,r){g.call(this,e,t,r)},props:b,attributes:{max:{type:Number,float:!0,default:1,min:0}}}),p({tags:["q","blockquote"],ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{cite:h}}),p({tag:"script",ctor:function(e,t,r){y.call(this,e,t,r)},props:{text:{get:function(){for(var e="",t=0,r=this.childNodes.length;t<r;t++){var i=this.childNodes[t];i.nodeType===n.TEXT_NODE&&(e+=i._data)}return e},set:function(e){this.removeChildren(),null!==e&&""!==e&&this.appendChild(this.ownerDocument.createTextNode(e))}}},attributes:{src:h,type:String,charset:String,defer:Boolean,async:Boolean,crossOrigin:f,nonce:String,integrity:String}}),p({tag:"select",ctor:function(e,t,r){g.call(this,e,t,r)},props:{form:b.form,options:{get:function(){return this.getElementsByTagName("option")}}},attributes:{name:String,disabled:Boolean,autofocus:Boolean,multiple:Boolean,required:Boolean,size:{type:"unsigned long",default:0}}}),p({tag:"source",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{src:h,type:String,media:String}}),p({tag:"span",ctor:function(e,t,r){y.call(this,e,t,r)}}),p({tag:"style",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{media:String,type:String,scoped:Boolean}}),p({tag:"caption",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{align:String}}),p({ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{colSpan:{type:"unsigned long",default:1},rowSpan:{type:"unsigned long",default:1},scope:{type:["row","col","rowgroup","colgroup"],missing:""},abbr:String,align:String,axis:String,height:String,width:String,ch:{name:"char",type:String},chOff:{name:"charoff",type:String},noWrap:Boolean,vAlign:String,bgColor:{type:String,treatNullAsEmptyString:!0}}}),p({tags:["col","colgroup"],ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{span:{type:"limited unsigned long with fallback",default:1,min:1},align:String,ch:{name:"char",type:String},chOff:{name:"charoff",type:String},vAlign:String,width:String}}),p({tag:"table",ctor:function(e,t,r){y.call(this,e,t,r)},props:{rows:{get:function(){return this.getElementsByTagName("tr")}}},attributes:{align:String,border:String,frame:String,rules:String,summary:String,width:String,bgColor:{type:String,treatNullAsEmptyString:!0},cellPadding:{type:String,treatNullAsEmptyString:!0},cellSpacing:{type:String,treatNullAsEmptyString:!0}}}),p({tag:"template",ctor:function(e,t,r){y.call(this,e,t,r),this._contentFragment=e._templateDoc.createDocumentFragment()},props:{content:{get:function(){return this._contentFragment}},serialize:{value:function(){return this.content.serialize()}}}}),p({tag:"tr",ctor:function(e,t,r){y.call(this,e,t,r)},props:{cells:{get:function(){return this.querySelectorAll("td,th")}}},attributes:{align:String,ch:{name:"char",type:String},chOff:{name:"charoff",type:String},vAlign:String,bgColor:{type:String,treatNullAsEmptyString:!0}}}),p({tags:["thead","tfoot","tbody"],ctor:function(e,t,r){y.call(this,e,t,r)},props:{rows:{get:function(){return this.getElementsByTagName("tr")}}},attributes:{align:String,ch:{name:"char",type:String},chOff:{name:"charoff",type:String},vAlign:String}}),p({tag:"textarea",ctor:function(e,t,r){g.call(this,e,t,r)},props:b,attributes:{autocomplete:String,name:String,disabled:Boolean,autofocus:Boolean,placeholder:String,wrap:String,dirName:String,required:Boolean,readOnly:Boolean,rows:{type:"limited unsigned long with fallback",default:2},cols:{type:"limited unsigned long with fallback",default:20},maxLength:{type:"unsigned long",min:0,setmin:0,default:-1},inputMode:{type:["verbatim","latin","latin-name","latin-prose","full-width-latin","kana","kana-name","katakana","numeric","tel","email","url"],missing:""}}}),p({tag:"time",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{dateTime:String,pubDate:Boolean}}),p({tag:"title",ctor:function(e,t,r){y.call(this,e,t,r)},props:{text:{get:function(){return this.textContent}}}}),p({tag:"ul",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{type:String,compact:Boolean}}),p({ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{src:h,crossOrigin:f,preload:{type:["metadata","none","auto",{value:"",alias:"auto"}],missing:"auto"},loop:Boolean,autoplay:Boolean,mediaGroup:String,controls:Boolean,defaultMuted:{name:"muted",type:Boolean}}}),p({tag:"audio",superclass:l.HTMLMediaElement,ctor:function(e,t,r){l.HTMLMediaElement.call(this,e,t,r)}}),p({tag:"video",superclass:l.HTMLMediaElement,ctor:function(e,t,r){l.HTMLMediaElement.call(this,e,t,r)},attributes:{poster:h,width:{type:"unsigned long",min:0,default:0},height:{type:"unsigned long",min:0,default:0}}}),p({tag:"td",superclass:l.HTMLTableCellElement,ctor:function(e,t,r){l.HTMLTableCellElement.call(this,e,t,r)}}),p({tag:"th",superclass:l.HTMLTableCellElement,ctor:function(e,t,r){l.HTMLTableCellElement.call(this,e,t,r)}}),p({tag:"frameset",ctor:function(e,t,r){y.call(this,e,t,r)}}),p({tag:"frame",ctor:function(e,t,r){y.call(this,e,t,r)}}),p({tag:"canvas",ctor:function(e,t,r){y.call(this,e,t,r)},props:{getContext:{value:a.nyi},probablySupportsContext:{value:a.nyi},setContext:{value:a.nyi},transferControlToProxy:{value:a.nyi},toDataURL:{value:a.nyi},toBlob:{value:a.nyi}},attributes:{width:{type:"unsigned long",default:300},height:{type:"unsigned long",default:150}}}),p({tag:"dialog",ctor:function(e,t,r){y.call(this,e,t,r)},props:{show:{value:a.nyi},showModal:{value:a.nyi},close:{value:a.nyi}},attributes:{open:Boolean,returnValue:String}}),p({tag:"menuitem",ctor:function(e,t,r){y.call(this,e,t,r)},props:{_label:{get:function(){var e=this._getattr("label");return null!==e&&""!==e?e:(e=this.textContent).replace(/[ \t\n\f\r]+/g," ").trim()}},label:{get:function(){var e=this._getattr("label");return null!==e?e:this._label},set:function(e){this._setattr("label",e)}}},attributes:{type:{type:["command","checkbox","radio"],missing:"command"},icon:h,disabled:Boolean,checked:Boolean,radiogroup:String,default:Boolean}}),p({tag:"source",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{srcset:String,sizes:String,media:String,src:h,type:String}}),p({tag:"track",ctor:function(e,t,r){y.call(this,e,t,r)},attributes:{src:h,srclang:String,label:String,default:Boolean,kind:{type:["subtitles","captions","descriptions","chapters","metadata"],missing:"subtitles",invalid:"metadata"}},props:{NONE:{get:function(){return 0}},LOADING:{get:function(){return 1}},LOADED:{get:function(){return 2}},ERROR:{get:function(){return 3}},readyState:{get:a.nyi},track:{get:a.nyi}}}),p({tags:["abbr","address","article","aside","b","bdi","bdo","cite","code","dd","dfn","dt","em","figcaption","figure","footer","header","hgroup","i","kbd","main","mark","nav","noscript","rb","rp","rt","rtc","ruby","s","samp","section","small","strong","sub","summary","sup","u","var","wbr","acronym","basefont","big","center","nobr","noembed","noframes","plaintext","strike","tt"]})},function(e,t,r){"use strict";function n(e){if(!e)return Object.create(n.prototype);this.url=e.replace(/^[ \t\n\r\f]+|[ \t\n\r\f]+$/g,"");var t=n.pattern.exec(this.url);if(t){if(t[2]&&(this.scheme=t[2]),t[4]){var r=t[4].match(n.userinfoPattern);if(r&&(this.username=r[1],this.password=r[3],t[4]=t[4].substring(r[0].length)),t[4].match(n.portPattern)){var i=t[4].lastIndexOf(":");this.host=t[4].substring(0,i),this.port=t[4].substring(i+1)}else this.host=t[4]}t[5]&&(this.path=t[5]),t[6]&&(this.query=t[7]),t[8]&&(this.fragment=t[9])}}e.exports=n,n.pattern=/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/,n.userinfoPattern=/^([^@:]*)(:([^@]*))?@/,n.portPattern=/:\d+$/,n.authorityPattern=/^[^:\/?#]+:\/\//,n.hierarchyPattern=/^[^:\/?#]+:\//,n.percentEncode=function(e){var t=e.charCodeAt(0);if(t<256)return"%"+t.toString(16);throw Error("can't percent-encode codepoints > 255 yet")},n.prototype={constructor:n,isAbsolute:function(){return!!this.scheme},isAuthorityBased:function(){return n.authorityPattern.test(this.url)},isHierarchical:function(){return n.hierarchyPattern.test(this.url)},toString:function(){var e="";return void 0!==this.scheme&&(e+=this.scheme+":"),this.isAbsolute()&&(e+="//",(this.username||this.password)&&(e+=this.username||"",this.password&&(e+=":"+this.password),e+="@"),e+=this.host),void 0!==this.port&&(e+=":"+this.port),void 0!==this.path&&(e+=this.path),void 0!==this.query&&(e+="?"+this.query),void 0!==this.fragment&&(e+="#"+this.fragment),e},resolve:function(e){var t=this,r=new n(e),i=new n;return void 0!==r.scheme?(i.scheme=r.scheme,i.username=r.username,i.password=r.password,i.host=r.host,i.port=r.port,i.path=o(r.path),i.query=r.query):(i.scheme=t.scheme,void 0!==r.host?(i.username=r.username,i.password=r.password,i.host=r.host,i.port=r.port,i.path=o(r.path),i.query=r.query):(i.username=t.username,i.password=t.password,i.host=t.host,i.port=t.port,r.path?("/"===r.path.charAt(0)?i.path=o(r.path):(i.path=function(e,r){if(void 0!==t.host&&!t.path)return"/"+r;var n=e.lastIndexOf("/");return-1===n?r:e.substring(0,n+1)+r}(t.path,r.path),i.path=o(i.path)),i.query=r.query):(i.path=t.path,void 0!==r.query?i.query=r.query:i.query=t.query))),i.fragment=r.fragment,i.toString();function o(e){if(!e)return e;for(var t="";e.length>0;){if("."===e||".."===e){e="";break}var r=e.substring(0,2),n=e.substring(0,3),i=e.substring(0,4);if("../"===n)e=e.substring(3);else if("./"===r)e=e.substring(2);else if("/./"===n)e="/"+e.substring(3);else if("/."===r&&2===e.length)e="/";else if("/../"===i||"/.."===n&&3===e.length)e="/"+e.substring(4),t=t.replace(/\/?[^\/]*$/,"");else{var o=e.match(/(\/?([^\/]*))/)[0];t+=o,e=e.substring(o.length)}}return t}}}},function(e,t,r){"use strict";var n=r(5),i=function(e,t){for(var r=e.createDocumentFragment(),i=0;i<t.length;i++){var o=t[i],a=o instanceof n;r.appendChild(a?o:e.createTextNode(String(o)))}return r},o={after:{value:function(){var e=Array.prototype.slice.call(arguments),t=this.parentNode,r=this.nextSibling;if(null!==t){for(;r&&e.some(function(e){return e===r});)r=r.nextSibling;var n=i(this.doc,e);t.insertBefore(n,r)}}},before:{value:function(){var e=Array.prototype.slice.call(arguments),t=this.parentNode,r=this.previousSibling;if(null!==t){for(;r&&e.some(function(e){return e===r});)r=r.previousSibling;var n=i(this.doc,e),o=r?r.nextSibling:t.firstChild;t.insertBefore(n,o)}}},remove:{value:function(){null!==this.parentNode&&(this.rooted&&this.doc&&this.doc.mutateRemove(this),this.parentNode.childNodes.splice(this.index,1),this.parentNode.modify(),this.parentNode=null)}},replaceWith:{value:function(){var e=Array.prototype.slice.call(arguments),t=this.parentNode,r=this.nextSibling;if(null!==t){for(;r&&e.some(function(e){return e===r});)r=r.nextSibling;var n=i(this.doc,e);this.parentNode===t?t.replaceChild(n,this):t.insertBefore(n,r)}}}};e.exports=o},function(e,t,r){"use strict";var n=Object.create(null,{location:{get:function(){throw new Error("window.location is not supported.")}}}),i=function(e,t){return 2&function(e,t){return e.compareDocumentPosition(t)}(e,t)?1:-1},o=function(e){for(;(e=e.nextSibling)&&1!==e.nodeType;);return e},a=function(e){for(;(e=e.previousSibling)&&1!==e.nodeType;);return e},s=function(e){if(e=e.firstChild)for(;1!==e.nodeType&&(e=e.nextSibling););return e},c=function(e){if(e=e.lastChild)for(;1!==e.nodeType&&(e=e.previousSibling););return e},l=function(e){if(!e)return e;var t=e[0];return'"'===t||"'"===t?(e=e[e.length-1]===t?e.slice(1,-1):e.slice(1)).replace(b.str_escape,function(e){var t=/^\\(?:([0-9A-Fa-f]+)|([\r\n\f]+))/.exec(e);if(!t)return e.slice(1);if(t[2])return"";var r=parseInt(t[1],16);return String.fromCodePoint?String.fromCodePoint(r):String.fromCharCode(r)}):b.ident.test(e)?u(e):e},u=function(e){return e.replace(b.escape,function(e){var t=/^\\([0-9A-Fa-f]+)/.exec(e);if(!t)return e[1];var r=parseInt(t[1],16);return String.fromCodePoint?String.fromCodePoint(r):String.fromCharCode(r)})},p=Array.prototype.indexOf?Array.prototype.indexOf:function(e,t){for(var r=this.length;r--;)if(this[r]===t)return r;return-1},h=function(e,t){var r=b.inside.source.replace(/</g,e).replace(/>/g,t);return new RegExp(r)},f=function(e,t,r){return e=(e=e.source).replace(t,r.source||r),new RegExp(e)},d=function(e,t){return e.replace(/^(?:\w+:\/\/|\/+)/,"").replace(/(?:\/+|\/*#.*?)$/,"").split("/",t).join("/")},m=function(e,t,r){var n=function(e,t){var r,n=e.replace(/\s+/g,"");return"even"===n?n="2n+0":"odd"===n?n="2n+1":-1===n.indexOf("n")&&(n="0n"+n),{group:"-"===(r=/^([+-])?(\d+)?n([+-])?(\d+)?$/.exec(n))[1]?-(r[2]||1):+(r[2]||1),offset:r[4]?"-"===r[3]?-r[4]:+r[4]:0}}(e),i=n.group,l=n.offset,u=r?c:s,p=r?a:o;return function(e){if(1===e.parentNode.nodeType)for(var r=u(e.parentNode),n=0;r;){if(t(r,e)&&n++,r===e)return n-=l,i&&n?n%i==0&&n<0==i<0:!n;r=p(r)}}},g={"*":function(){return!0},type:function(e){return e=e.toLowerCase(),function(t){return t.nodeName.toLowerCase()===e}},attr:function(e,t,r,n){return t=y[t],function(i){var o;switch(e){case"for":o=i.htmlFor;break;case"class":""===(o=i.className)&&null==i.getAttribute("class")&&(o=null);break;case"href":o=i.getAttribute("href",2);break;case"title":o=i.getAttribute("title")||null;break;case"id":case"lang":case"dir":case"accessKey":case"hidden":case"tabIndex":case"style":if(i.getAttribute){o=i.getAttribute(e);break}default:if(i.hasAttribute&&!i.hasAttribute(e))break;o=null!=i[e]?i[e]:i.getAttribute&&i.getAttribute(e)}if(null!=o)return o+="",n&&(o=o.toLowerCase(),r=r.toLowerCase()),t(o,r)}},":first-child":function(e){return!a(e)&&1===e.parentNode.nodeType},":last-child":function(e){return!o(e)&&1===e.parentNode.nodeType},":only-child":function(e){return!a(e)&&!o(e)&&1===e.parentNode.nodeType},":nth-child":function(e,t){return m(e,function(){return!0},t)},":nth-last-child":function(e){return g[":nth-child"](e,!0)},":root":function(e){return e.ownerDocument.documentElement===e},":empty":function(e){return!e.firstChild},":not":function(e){var t=k(e);return function(e){return!t(e)}},":first-of-type":function(e){if(1===e.parentNode.nodeType){for(var t=e.nodeName;e=a(e);)if(e.nodeName===t)return;return!0}},":last-of-type":function(e){if(1===e.parentNode.nodeType){for(var t=e.nodeName;e=o(e);)if(e.nodeName===t)return;return!0}},":only-of-type":function(e){return g[":first-of-type"](e)&&g[":last-of-type"](e)},":nth-of-type":function(e,t){return m(e,function(e,t){return e.nodeName===t.nodeName},t)},":nth-last-of-type":function(e){return g[":nth-of-type"](e,!0)},":checked":function(e){return!(!e.checked&&!e.selected)},":indeterminate":function(e){return!g[":checked"](e)},":enabled":function(e){return!e.disabled&&"hidden"!==e.type},":disabled":function(e){return!!e.disabled},":target":function(e){return e.id===n.location.hash.substring(1)},":focus":function(e){return e===e.ownerDocument.activeElement},":matches":function(e){return k(e)},":nth-match":function(e,t){var r=e.split(/\s*,\s*/),n=r.shift(),i=k(r.join(","));return m(n,i,t)},":nth-last-match":function(e){return g[":nth-match"](e,!0)},":links-here":function(e){return e+""==n.location+""},":lang":function(e){return function(t){for(;t;){if(t.lang)return 0===t.lang.indexOf(e);t=t.parentNode}}},":dir":function(e){return function(t){for(;t;){if(t.dir)return t.dir===e;t=t.parentNode}}},":scope":function(e,t){var r=t||e.ownerDocument;return 9===r.nodeType?e===r.documentElement:e===r},":any-link":function(e){return"string"==typeof e.href},":local-link":function(e){if(e.nodeName)return e.href&&e.host===n.location.host;var t=+e+1;return function(e){if(e.href){var r=n.location+"",i=e+"";return d(r,t)===d(i,t)}}},":default":function(e){return!!e.defaultSelected},":valid":function(e){return e.willValidate||e.validity&&e.validity.valid},":invalid":function(e){return!g[":valid"](e)},":in-range":function(e){return e.value>e.min&&e.value<=e.max},":out-of-range":function(e){return!g[":in-range"](e)},":required":function(e){return!!e.required},":optional":function(e){return!e.required},":read-only":function(e){if(e.readOnly)return!0;var t=e.getAttribute("contenteditable"),r=e.contentEditable,n=e.nodeName.toLowerCase();return((n="input"!==n&&"textarea"!==n)||e.disabled)&&null==t&&"true"!==r},":read-write":function(e){return!g[":read-only"](e)},":hover":function(){throw new Error(":hover is not supported.")},":active":function(){throw new Error(":active is not supported.")},":link":function(){throw new Error(":link is not supported.")},":visited":function(){throw new Error(":visited is not supported.")},":column":function(){throw new Error(":column is not supported.")},":nth-column":function(){throw new Error(":nth-column is not supported.")},":nth-last-column":function(){throw new Error(":nth-last-column is not supported.")},":current":function(){throw new Error(":current is not supported.")},":past":function(){throw new Error(":past is not supported.")},":future":function(){throw new Error(":future is not supported.")},":contains":function(e){return function(t){return-1!==(t.innerText||t.textContent||t.value||"").indexOf(e)}},":has":function(e){return function(t){return x(e,t).length>0}}},y={"-":function(){return!0},"=":function(e,t){return e===t},"*=":function(e,t){return-1!==e.indexOf(t)},"~=":function(e,t){var r,n,i=e.indexOf(t);if(-1!==i)return r=e[i-1],n=e[i+t.length],!(r&&" "!==r||n&&" "!==n)},"|=":function(e,t){var r,n=e.indexOf(t);if(0===n)return"-"===(r=e[n+t.length])||!r},"^=":function(e,t){return 0===e.indexOf(t)},"$=":function(e,t){return e.indexOf(t)+t.length===e.length},"!=":function(e,t){return e!==t}},v={" ":function(e){return function(t){for(;t=t.parentNode;)if(e(t))return t}},">":function(e){return function(t){if(t=t.parentNode)return e(t)&&t}},"+":function(e){return function(t){if(t=a(t))return e(t)&&t}},"~":function(e){return function(t){for(;t=a(t);)if(e(t))return t}},noop:function(e){return function(t){return e(t)&&t}},ref:function(e,t){var r;function n(e){for(var t=e.ownerDocument.getElementsByTagName("*"),i=t.length;i--;)if(r=t[i],n.test(e))return r=null,!0;r=null}return n.combinator=function(n){if(r&&r.getAttribute){var i=r.getAttribute(t)||"";return"#"===i[0]&&(i=i.substring(1)),i===n.id&&e(r)?r:void 0}},n}},b={escape:/\\(?:[^0-9A-Fa-f\r\n]|[0-9A-Fa-f]{1,6}[\r\n\t ]?)/g,str_escape:/(escape)|\\(\n|\r\n?|\f)/g,nonascii:/[\u00A0-\uFFFF]/,cssid:/(?:(?!-?[0-9])(?:escape|nonascii|[-_a-zA-Z0-9])+)/,qname:/^ *(cssid|\*)/,simple:/^(?:([.#]cssid)|pseudo|attr)/,ref:/^ *\/(cssid)\/ */,combinator:/^(?: +([^ \w*.#\\]) +|( )+|([^ \w*.#\\]))(?! *$)/,attr:/^\[(cssid)(?:([^\w]?=)(inside))?\]/,pseudo:/^(:cssid)(?:\((inside)\))?/,inside:/(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|<[^"'>]*>|\\["'>]|[^"'>])*/,ident:/^(cssid)$/};b.cssid=f(b.cssid,"nonascii",b.nonascii),b.cssid=f(b.cssid,"escape",b.escape),b.qname=f(b.qname,"cssid",b.cssid),b.simple=f(b.simple,"cssid",b.cssid),b.ref=f(b.ref,"cssid",b.cssid),b.attr=f(b.attr,"cssid",b.cssid),b.pseudo=f(b.pseudo,"cssid",b.cssid),b.inside=f(b.inside,"[^\"'>]*",b.inside),b.attr=f(b.attr,"inside",h("\\[","\\]")),b.pseudo=f(b.pseudo,"inside",h("\\(","\\)")),b.simple=f(b.simple,"pseudo",b.pseudo),b.simple=f(b.simple,"attr",b.attr),b.ident=f(b.ident,"cssid",b.cssid),b.str_escape=f(b.str_escape,"escape",b.escape);var _=function(e){for(var t,r,n,i,o,a,s=e.replace(/^\s+|\s+$/g,""),c=[],l=[];s;){if(i=b.qname.exec(s))s=s.substring(i[0].length),n=i[1],l.push(E(n,!0));else{if(!(i=b.simple.exec(s)))throw new SyntaxError("Invalid selector.");s=s.substring(i[0].length),n="*",l.push(E(n,!0)),l.push(E(i))}for(;i=b.simple.exec(s);)s=s.substring(i[0].length),l.push(E(i));if("!"===s[0]&&(s=s.substring(1),(r=S()).qname=n,l.push(r.simple)),i=b.ref.exec(s))s=s.substring(i[0].length),a=v.ref(w(l),u(i[1])),c.push(a.combinator),l=[];else{if(i=b.combinator.exec(s)){if(s=s.substring(i[0].length),","===(o=i[1]||i[2]||i[3])){c.push(v.noop(w(l)));break}}else o="noop";if(!v[o])throw new SyntaxError("Bad combinator.");c.push(v[o](w(l))),l=[]}}return(t=T(c)).qname=n,t.sel=s,r&&(r.lname=t.qname,r.test=t,r.qname=r.qname,r.sel=t.sel,t=r),a&&(a.test=t,a.qname=t.qname,a.sel=t.sel,t=a),t},E=function(e,t){if(t)return"*"===e?g["*"]:g.type(u(e));if(e[1])return"."===e[1][0]?g.attr("class","~=",u(e[1].substring(1))):g.attr("id","=",u(e[1].substring(1)));if(e[2])return e[3]?g[u(e[2])](l(e[3])):g[u(e[2])];if(e[4])return g.attr(u(e[4]),e[5]||"-",l(e[6]),!1);throw new SyntaxError("Unknown Selector.")},w=function(e){var t,r=e.length;return r<2?e[0]:function(n){if(n){for(t=0;t<r;t++)if(!e[t](n))return;return!0}}},T=function(e){return e.length<2?function(t){return!!e[0](t)}:function(t){for(var r=e.length;r--;)if(!(t=e[r](t)))return;return!0}},S=function(){var e;function t(r){for(var n=r.ownerDocument.getElementsByTagName(t.lname),i=n.length;i--;)if(t.test(n[i])&&e===r)return e=null,!0;e=null}return t.simple=function(t){return e=t,!0},t},k=function(e){for(var t=_(e),r=[t];t.sel;)t=_(t.sel),r.push(t);return r.length<2?t:function(e){for(var t=r.length,n=0;n<t;n++)if(r[n](e))return!0}},x=function(e,t){for(var r,n=[],o=_(e),a=t.getElementsByTagName(o.qname),s=0;r=a[s++];)o(r)&&n.push(r);if(o.sel){for(;o.sel;)for(o=_(o.sel),a=t.getElementsByTagName(o.qname),s=0;r=a[s++];)o(r)&&-1===p.call(n,r)&&n.push(r);n.sort(i)}return n};e.exports=t=function(e,t){var r,n;if(11!==t.nodeType&&-1===e.indexOf(" ")){if("#"===e[0]&&t.rooted&&/^#[A-Z_][-A-Z0-9_]*$/i.test(e)&&t.doc._hasMultipleElementsWithId&&(r=e.substring(1),!t.doc._hasMultipleElementsWithId(r)))return(n=t.doc.getElementById(r))?[n]:[];if("."===e[0]&&/^\.\w+$/.test(e))return t.getElementsByClassName(e.substring(1));if(/^\w+$/.test(e))return t.getElementsByTagName(e)}return x(e,t)},t.selectors=g,t.operators=y,t.combinators=v,t.matches=function(e,t){var r={sel:t};do{if((r=_(r.sel))(e))return!0}while(r.sel);return!1}},function(e,t,r){"use strict";t.isValidName=function(e){if(n.test(e))return!0;if(u.test(e))return!0;if(!h.test(e))return!1;if(!m.test(e))return!1;var t=e.match(f),r=e.match(d);return null!==r&&2*r.length===t.length},t.isValidQName=function(e){if(i.test(e))return!0;if(p.test(e))return!0;if(!h.test(e))return!1;if(!g.test(e))return!1;var t=e.match(f),r=e.match(d);return null!==r&&2*r.length===t.length};var n=/^[_:A-Za-z][-.:\w]+$/,i=/^([_A-Za-z][-.\w]+|[_A-Za-z][-.\w]+:[_A-Za-z][-.\w]+)$/,o="_A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�",a="-._A-Za-z0-9·À-ÖØ-öø-˿̀-ͽͿ-῿‌‍‿⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�",s="["+o+"]["+a+"]*",c=o+":",l=a+":",u=new RegExp("^["+c+"]["+l+"]*$"),p=new RegExp("^("+s+"|"+s+":"+s+")$"),h=/[\uD800-\uDB7F\uDC00-\uDFFF]/,f=/[\uD800-\uDB7F\uDC00-\uDFFF]/g,d=/[\uD800-\uDB7F][\uDC00-\uDFFF]/g;s="["+(o+="\ud800-󯰀-\udfff")+"]["+(a+="\ud800-󯰀-\udfff")+"]*",c=o+":",l=a+":";var m=new RegExp("^["+c+"]["+l+"]*$"),g=new RegExp("^("+s+"|"+s+":"+s+")$")},function(e,t,r){"use strict";e.exports=k;var n=r(5),i=r(16),o=r(10),a=r(41),s=r(39),c=r(11),l=r(38),u=r(37),p=r(17),h=r(106),f=r(105),d=r(14),m=r(25),g=r(27),y=r(35),v=r(28),b=r(24),_=r(30),E=r(3),w=r(99),T=E.NAMESPACE,S=r(45).isApiWritable;function k(e,t){this.nodeType=n.DOCUMENT_NODE,this.isHTML=e,this._address=t||"about:blank",this.readyState="loading",this.implementation=new p,this.ownerDocument=null,this.doctype=null,this.documentElement=null,this.childNodes=new i,this._templateDocCache=null,this._nid=1,this._nextnid=2,this._nodes=[null,this],this.byId=Object.create(null),this.modclock=0}var x={event:"Event",customevent:"CustomEvent",uievent:"UIEvent",mouseevent:"MouseEvent"},N={events:"event",htmlevents:"event",mouseevents:"mouseevent",mutationevents:"mutationevent",uievents:"uievent"},R=function(e,t,r){return{get:function(){var n=e.call(this);return n?n[t]:r},set:function(r){var n=e.call(this);n&&(n[t]=r)}}};k.prototype=Object.create(n.prototype,{_setMutationHandler:{value:function(e){this.mutationHandler=e}},_dispatchRendererEvent:{value:function(e,t,r){var n=this._nodes[e];n&&n._dispatchEvent(new c(t,r),!0)}},nodeName:{value:"#document"},nodeValue:{get:function(){return null},set:function(){}},documentURI:{get:E.nyi,set:E.nyi},compatMode:{get:function(){return this._quirks?"BackCompat":"CSS1Compat"}},parentNode:{value:null},createTextNode:{value:function(e){return new a(this,""+e)}},createComment:{value:function(e){return new s(this,e)}},createDocumentFragment:{value:function(){return new l(this)}},createProcessingInstruction:{value:function(e,t){return v.isValidName(e)&&-1===t.indexOf("?>")||E.InvalidCharacterError(),new u(this,e,t)}},createElement:{value:function(e){return v.isValidName(e)||E.InvalidCharacterError(),this.isHTML&&(e=E.toASCIILowerCase(e)),b.createElement(this,e,null)},writable:S},createElementNS:{value:function(e,t){var r,n,i;return v.isValidName(t)||E.InvalidCharacterError(),v.isValidQName(t)||E.NamespaceError(),-1!==(r=t.indexOf(":"))?(n=t.substring(0,r),i=t.substring(r+1),(""===e||"xml"===n&&e!==T.XML)&&E.NamespaceError()):(n=null,i=t),(("xmlns"===t||"xmlns"===n)&&e!==T.XMLNS||e===T.XMLNS&&"xmlns"!==t&&"xmlns"!==n)&&E.NamespaceError(),e===T.HTML?b.createElement(this,i,n):e===T.SVG?_.createElement(this,i,n):new o(this,i,e,n)},writable:S},createEvent:{value:function(e){e=e.toLowerCase();var t=y[x[N[e]||e]];if(t){var r=new t;return r._initialized=!1,r}E.NotSupportedError()}},createTreeWalker:{value:function(e,t,r){return t=void 0===t?d.SHOW_ALL:t,r&&"object"==typeof r&&"function"==typeof r.acceptNode?r=r.acceptNode.bind(r):"function"!=typeof r&&(r=null),new h(e,t,r)}},createNodeIterator:{value:function(e,t,r){return t=void 0===t?d.SHOW_ALL:t,r&&"object"==typeof r&&"function"==typeof r.acceptNode?r=r.acceptNode.bind(r):"function"!=typeof r&&(r=null),new f(e,t,r)}},_updateDocTypeElement:{value:function(){var e,t,r=this.childNodes,i=r.length;for(this.doctype=this.documentElement=null,e=0;e<i;e++)(t=r[e]).nodeType===n.DOCUMENT_TYPE_NODE?this.doctype=t:t.nodeType===n.ELEMENT_NODE&&(this.documentElement=t)}},insertBefore:{value:function(e,t){return n.prototype.insertBefore.call(this,e,t),this._updateDocTypeElement(),e}},replaceChild:{value:function(e,t){return n.prototype.replaceChild.call(this,e,t),this._updateDocTypeElement(),t}},removeChild:{value:function(e){return n.prototype.removeChild.call(this,e),this._updateDocTypeElement(),e}},getElementById:{value:function(e){var t=this.byId[e];return t?t instanceof A?t.getFirst():t:null}},_hasMultipleElementsWithId:{value:function(e){return this.byId[e]instanceof A}},getElementsByName:{value:o.prototype.getElementsByName},getElementsByTagName:{value:o.prototype.getElementsByTagName},getElementsByTagNameNS:{value:o.prototype.getElementsByTagNameNS},getElementsByClassName:{value:o.prototype.getElementsByClassName},adoptNode:{value:function(e){return e.nodeType===n.DOCUMENT_NODE&&E.NotSupportedError(),e.parentNode&&e.parentNode.removeChild(e),e.ownerDocument!==this&&function e(t,r){t.ownerDocument=r;t._lastModTime=void 0;var n=t.childNodes;for(var i=0,o=n.length;i<o;i++)e(n[i],r)}(e,this),e}},importNode:{value:function(e,t){return this.adoptNode(e.cloneNode(t))},writable:S},URL:{get:E.nyi},domain:{get:E.nyi,set:E.nyi},referrer:{get:E.nyi},cookie:{get:E.nyi,set:E.nyi},lastModified:{get:E.nyi},location:{get:function(){return this.defaultView?this.defaultView.location:null},set:E.nyi},_titleElement:{get:function(){return this.getElementsByTagName("title").item(0)||null}},title:{get:function(){var e=this._titleElement;return(e?e.textContent:"").replace(/[ \t\n\r\f]+/g," ").trim()},set:function(e){var t=this._titleElement,r=this.head;(t||r)&&(t||(t=this.createElement("title"),r.appendChild(t)),t.textContent=e)}},dir:R(function(){var e=this.documentElement;if(e&&"HTML"===e.tagName)return e},"dir",""),fgColor:R(function(){return this.body},"text",""),linkColor:R(function(){return this.body},"link",""),vlinkColor:R(function(){return this.body},"vLink",""),alinkColor:R(function(){return this.body},"aLink",""),bgColor:R(function(){return this.body},"bgColor",""),body:{get:function(){return C(this.documentElement,"body")},set:E.nyi},head:{get:function(){return C(this.documentElement,"head")}},images:{get:E.nyi},embeds:{get:E.nyi},plugins:{get:E.nyi},links:{get:E.nyi},forms:{get:E.nyi},scripts:{get:E.nyi},innerHTML:{get:function(){return this.serialize()},set:E.nyi},outerHTML:{get:function(){return this.serialize()},set:E.nyi},write:{value:function(e){if(this.isHTML||E.InvalidStateError(),this._parser){this._parser;var t=arguments.join("");this._parser.parse(t)}}},writeln:{value:function(e){this.write(Array.prototype.join.call(arguments,"")+"\n")}},open:{value:function(){this.documentElement=null}},close:{value:function(){this.readyState="complete";var e=new c("DOMContentLoaded");this._dispatchEvent(e,!0),this.defaultView&&(e=new c("load"),this.defaultView._dispatchEvent(e,!0))}},clone:{value:function(){E.DataCloneError()}},isEqual:{value:function(e){return!0}},mutateValue:{value:function(e){this.mutationHandler&&this.mutationHandler({type:w.VALUE,target:e,data:e.data})}},mutateAttr:{value:function(e,t){this.mutationHandler&&this.mutationHandler({type:w.ATTR,target:e.ownerElement,attr:e})}},mutateRemoveAttr:{value:function(e){this.mutationHandler&&this.mutationHandler({type:w.REMOVE_ATTR,target:e.ownerElement,attr:e})}},mutateRemove:{value:function(e){this.mutationHandler&&this.mutationHandler({type:w.REMOVE,target:e.parentNode,node:e}),function e(t){!function(e){if(e.nodeType===n.ELEMENT_NODE){var t=e.getAttribute("id");t&&e.ownerDocument.delId(t,e)}e.ownerDocument._nodes[e._nid]=void 0,e._nid=void 0}(t);for(var r=0,i=t.childNodes.length;r<i;r++)e(t.childNodes[r])}(e)}},mutateInsert:{value:function(e){!function e(t){!function(e){if(e._nid=e.ownerDocument._nextnid++,e.ownerDocument._nodes[e._nid]=e,e.nodeType===n.ELEMENT_NODE){var t=e.getAttribute("id");t&&e.ownerDocument.addId(t,e),e._roothook&&e._roothook()}}(t);if(t.nodeType===n.ELEMENT_NODE)for(var r=t.childNodes,i=0,o=r.length;i<o;i++)e(r[i])}(e),this.mutationHandler&&this.mutationHandler({type:w.INSERT,target:e.parentNode,node:e})}},mutateMove:{value:function(e){this.mutationHandler&&this.mutationHandler({type:w.MOVE,target:e})}},addId:{value:function(e,t){var r=this.byId[e];r?(r instanceof A||(r=new A(r),this.byId[e]=r),r.add(t)):this.byId[e]=t}},delId:{value:function(e,t){var r=this.byId[e];E.assert(r),r instanceof A?(r.del(t),1===r.length&&(this.byId[e]=r.downgrade())):this.byId[e]=void 0}},_resolve:{value:function(e){return new m(this._documentBaseURL).resolve(e)}},_documentBaseURL:{get:function(){var e=this._address;"about:blank"===e&&(e="/");var t=this.querySelector("base[href]");return t?new m(e).resolve(t.getAttribute("href")):e}},_templateDoc:{get:function(){if(!this._templateDocCache){var e=new k(this.isHTML,this._address);this._templateDocCache=e._templateDocCache=e}return this._templateDocCache}},querySelector:{value:function(e){return g(e,this)[0]}},querySelectorAll:{value:function(e){var t=g(e,this);return t.item?t:new i(t)}}});function C(e,t){if(e&&e.isHTML)for(var r=e.childNodes,i=0,o=r.length;i<o;i++)if(r[i].nodeType===n.ELEMENT_NODE&&r[i].localName===t&&r[i].namespaceURI===T.HTML)return r[i];return null}function A(e){this.nodes=Object.create(null),this.nodes[e._nid]=e,this.length=1,this.firstNode=void 0}["abort","canplay","canplaythrough","change","click","contextmenu","cuechange","dblclick","drag","dragend","dragenter","dragleave","dragover","dragstart","drop","durationchange","emptied","ended","input","invalid","keydown","keypress","keyup","loadeddata","loadedmetadata","loadstart","mousedown","mousemove","mouseout","mouseover","mouseup","mousewheel","pause","play","playing","progress","ratechange","readystatechange","reset","seeked","seeking","select","show","stalled","submit","suspend","timeupdate","volumechange","waiting","blur","error","focus","load","scroll"].forEach(function(e){Object.defineProperty(k.prototype,"on"+e,{get:function(){return this._getEventHandler(e)},set:function(t){this._setEventHandler(e,t)}})}),A.prototype.add=function(e){this.nodes[e._nid]||(this.nodes[e._nid]=e,this.length++,this.firstNode=void 0)},A.prototype.del=function(e){this.nodes[e._nid]&&(delete this.nodes[e._nid],this.length--,this.firstNode=void 0)},A.prototype.getFirst=function(){var e;if(!this.firstNode)for(e in this.nodes)(void 0===this.firstNode||this.firstNode.compareDocumentPosition(this.nodes[e])&n.DOCUMENT_POSITION_PRECEDING)&&(this.firstNode=this.nodes[e]);return this.firstNode},A.prototype.downgrade=function(){var e;if(1===this.length)for(e in this.nodes)return this.nodes[e];return this}},function(e,t,r){"use strict";var n=r(10),i=r(33),o=r(3),a=r(23),s=t.elements={},c=Object.create(null);function l(e){return i(e,u,s,c)}t.createElement=function(e,t,r){return new(c[t]||u)(e,t,r)};var u=l({superclass:n,ctor:function(e,t,r){n.call(this,e,t,o.NAMESPACE.SVG,r)},props:{style:{get:function(){return this._style||(this._style=new a(this)),this._style}}}});l({ctor:function(e,t,r){u.call(this,e,t,r)},tag:"svg",props:{createSVGRect:{value:function(){return t.createElement(this.ownerDocument,"rect",null)}}}}),l({tags:["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hkern","image","line","linearGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"]})},function(e,t,r){"use strict";var n=r(3);t=e.exports={CSSStyleDeclaration:r(23),CharacterData:r(15),Comment:r(39),DOMException:r(46),DOMImplementation:r(17),DOMTokenList:r(43),Document:r(29),DocumentFragment:r(38),DocumentType:r(21),Element:r(10),HTMLParser:r(20),Node:r(5),NodeList:r(16),NodeFilter:r(14),ProcessingInstruction:r(37),Text:r(41),Window:r(22)},n.merge(t,r(35)),n.merge(t,r(24).elements),n.merge(t,r(30).elements)},function(module,exports){module.exports={Window_run:function _run(code,file){with(file&&(code+="\n//@ sourceURL="+file),this)eval(code)},EventHandlerBuilder_build:function build(){try{with(this.document.defaultView||Object.create(null))with(this.document)with(this.form)with(this.element)return eval("(function(event){"+this.body+"})")}catch(err){return function(){throw err}}}}},function(e,t,r){"use strict";var n=r(44),i=r(32);function o(e,t,r,n){this.body=e,this.document=t,this.form=r,this.element=n}function a(e,t,r,n){var i=e.ownerDocument||Object.create(null),a=e.form||Object.create(null);e[t]=new o(n,i,a,e).build()}e.exports=function(e,t,r,i){var o=e.ctor;if(o){var s=e.props||{};if(e.attributes)for(var c in e.attributes){var l=e.attributes[c];("object"!=typeof l||Array.isArray(l))&&(l={type:l}),l.name||(l.name=c.toLowerCase()),s[c]=n.property(l)}s.constructor={value:o},o.prototype=Object.create((e.superclass||t).prototype,s),e.events&&function(e,t){var r=e.prototype;t.forEach(function(t){Object.defineProperty(r,"on"+t,{get:function(){return this._getEventHandler(t)},set:function(e){this._setEventHandler(t,e)}}),n.registerChangeHandler(e,"on"+t,a)})}(o,e.events),r[o.name]=o}else o=t;return(e.tags||e.tag&&[e.tag]||[]).forEach(function(e){i[e]=o}),o},o.prototype.build=i.EventHandlerBuilder_build},function(e,t,r){"use strict";var n=r(25);function i(){}e.exports=i,i.prototype={constructor:i,get protocol(){var e=new n(this.href);return e.isAbsolute()?e.scheme+":":""},get host(){var e=new n(this.href);return e.isAbsolute()&&e.isAuthorityBased()?e.host+(e.port?":"+e.port:""):""},get hostname(){var e=new n(this.href);return e.isAbsolute()&&e.isAuthorityBased()?e.host:""},get port(){var e=new n(this.href);return e.isAbsolute()&&e.isAuthorityBased()&&void 0!==e.port?e.port:""},get pathname(){var e=new n(this.href);return e.isAbsolute()&&e.isHierarchical()?e.path:""},get search(){var e=new n(this.href);return e.isAbsolute()&&e.isHierarchical()&&void 0!==e.query?"?"+e.query:""},get hash(){var e=new n(this.href);return e.isAbsolute()&&void 0!==e.fragment?"#"+e.fragment:""},get username(){return new n(this.href).username||""},get password(){return new n(this.href).password||""},get origin(){var e=new n(this.href),t=function(t){var r=[e.scheme,e.host,+e.port||t];return r[0]+"://"+r[1]+(r[2]===t?"":":"+r[2])};switch(e.scheme){case"ftp":return t(21);case"gopher":return t(70);case"http":case"ws":return t(80);case"https":case"wss":return t(443);default:return e.scheme+"://"}},set protocol(e){var t=this.href,r=new n(t);r.isAbsolute()&&(e=(e=e.replace(/:+$/,"")).replace(/[^-+\.a-zA-Z0-9]/g,n.percentEncode)).length>0&&(r.scheme=e,t=r.toString()),this.href=t},set host(e){var t=this.href,r=new n(t);r.isAbsolute()&&r.isAuthorityBased()&&(e=e.replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g,n.percentEncode)).length>0&&(r.host=e,delete r.port,t=r.toString()),this.href=t},set hostname(e){var t=this.href,r=new n(t);r.isAbsolute()&&r.isAuthorityBased()&&(e=(e=e.replace(/^\/+/,"")).replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g,n.percentEncode)).length>0&&(r.host=e,t=r.toString()),this.href=t},set port(e){var t=this.href,r=new n(t);r.isAbsolute()&&r.isAuthorityBased()&&(0===(e=(e=(e=""+e).replace(/[^0-9].*$/,"")).replace(/^0+/,"")).length&&(e="0"),parseInt(e,10)<=65535&&(r.port=e,t=r.toString())),this.href=t},set pathname(e){var t=this.href,r=new n(t);r.isAbsolute()&&r.isHierarchical()&&("/"!==e.charAt(0)&&(e="/"+e),e=e.replace(/[^-+\._~!$&'()*,;:=@\/a-zA-Z0-9]/g,n.percentEncode),r.path=e,t=r.toString()),this.href=t},set search(e){var t=this.href,r=new n(t);r.isAbsolute()&&r.isHierarchical()&&("?"===e.charAt(0)&&(e=e.substring(1)),e=e.replace(/[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g,n.percentEncode),r.query=e,t=r.toString()),this.href=t},set hash(e){var t=this.href,r=new n(t);r.isAbsolute()&&("#"===e.charAt(0)&&(e=e.substring(1)),e=e.replace(/[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g,n.percentEncode),r.fragment=e,t=r.toString()),this.href=t},set username(e){var t=this.href,r=new n(t);r.isAbsolute()&&(e=e.replace(/[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\:]/g,n.percentEncode),r.username=e,t=r.toString()),this.href=t},set password(e){var t=this.href,r=new n(t);r.isAbsolute()&&(""===e?r.password=null:(e=e.replace(/[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\]/g,n.percentEncode),r.password=e),t=r.toString()),this.href=t}},i._inherit=function(e){Object.getOwnPropertyNames(i.prototype).forEach(function(t){if("constructor"!==t&&"href"!==t){var r=Object.getOwnPropertyDescriptor(i.prototype,t);Object.defineProperty(e,t,r)}})}},function(e,t,r){"use strict";e.exports={Event:r(11),UIEvent:r(47),MouseEvent:r(48),CustomEvent:r(104)}},function(e,t,r){"use strict";e.exports={nextSkippingChildren:function(e,t){if(e===t)return null;if(null!==e.nextSibling)return e.nextSibling;return n(e,t)},nextAncestorSibling:n,next:function(e,t){var r;if(null!==(r=e.firstChild))return r;if(e===t)return null;if(null!==(r=e.nextSibling))return r;return n(e,t)},previous:function(e,t){var r;if(null!==(r=e.previousSibling))return i(r);if((r=e.parentNode)===t)return null;return r},deepLastChild:i};function n(e,t){for(e=e.parentNode;null!==e;e=e.parentNode){if(e===t)return null;if(null!==e.nextSibling)return e.nextSibling}return null}function i(e){for(;e.lastChild;)e=e.lastChild;return e}},function(e,t,r){"use strict";e.exports=o;var n=r(5),i=r(15);function o(e,t,r){this.nodeType=n.PROCESSING_INSTRUCTION_NODE,this.ownerDocument=e,this.target=t,this._data=r}var a={get:function(){return this._data},set:function(e){this._data=e,this.rooted&&this.ownerDocument.mutateValue(this)}};o.prototype=Object.create(i.prototype,{nodeName:{get:function(){return this.target}},nodeValue:a,textContent:a,data:a,clone:{value:function(){return new o(this.ownerDocument,this.target,this._data)}},isEqual:{value:function(e){return this.target===e.target&&this._data===e._data}}})},function(e,t,r){"use strict";e.exports=c;var n=r(5),i=r(16),o=r(10),a=r(27),s=r(3);function c(e){this.nodeType=n.DOCUMENT_FRAGMENT_NODE,this.ownerDocument=e,this.childNodes=[]}c.prototype=Object.create(n.prototype,{nodeName:{value:"#document-fragment"},nodeValue:{get:function(){return null},set:function(){}},textContent:Object.getOwnPropertyDescriptor(o.prototype,"textContent"),querySelector:{value:function(e){var t=this.querySelectorAll(e);return t.length?t[0]:null}},querySelectorAll:{value:function(e){var t=Object.create(this);t.isHTML=!0,t.getElementsByTagName=o.prototype.getElementsByTagName,t.nextElement=Object.getOwnPropertyDescriptor(o.prototype,"firstElementChild").get;var r=a(e,t);return r.item?r:new i(r)}},clone:{value:function(){return new c(this.ownerDocument)}},isEqual:{value:function(e){return!0}},innerHTML:{get:function(){return this.serialize()},set:s.nyi},outerHTML:{get:function(){return this.serialize()},set:s.nyi}})},function(e,t,r){"use strict";e.exports=o;var n=r(5),i=r(15);function o(e,t){this.nodeType=n.COMMENT_NODE,this.ownerDocument=e,this._data=t,this._index=void 0}var a={get:function(){return this._data},set:function(e){this._data=e,this.rooted&&this.ownerDocument.mutateValue(this)}};o.prototype=Object.create(i.prototype,{nodeName:{value:"#comment"},nodeValue:a,textContent:a,data:a,clone:{value:function(){return new o(this.ownerDocument,this._data)}}})},function(e,t,r){"use strict";e.exports=s;var n=r(5),i=r(3),o=i.HierarchyRequestError,a=i.NotFoundError;function s(){}s.prototype=Object.create(n.prototype,{hasChildNodes:{value:function(){return!1}},firstChild:{value:null},lastChild:{value:null},insertBefore:{value:function(e,t){if(!e.nodeType)throw new TypeError("not a node");o()}},replaceChild:{value:function(e,t){if(!e.nodeType)throw new TypeError("not a node");o()}},removeChild:{value:function(e){if(!e.nodeType)throw new TypeError("not a node");a()}},childNodes:{get:function(){return this._childNodes||(this._childNodes=[]),this._childNodes}}})},function(e,t,r){"use strict";e.exports=a;var n=r(3),i=r(5),o=r(15);function a(e,t){this.nodeType=i.TEXT_NODE,this.ownerDocument=e,this._data=t,this._index=void 0}var s={get:function(){return this._data},set:function(e){e!==this._data&&(this._data=e,this.rooted&&this.ownerDocument.mutateValue(this),this.parentNode&&this.parentNode._textchangehook&&this.parentNode._textchangehook(this))}};a.prototype=Object.create(o.prototype,{nodeName:{value:"#text"},nodeValue:s,textContent:s,data:s,splitText:{value:function(e){(e>this._data.length||e<0)&&n.IndexSizeError();var t=this._data.substring(e),r=this.ownerDocument.createTextNode(t);this.data=this.data.substring(0,e);var i=this.parentNode;return null!==i&&i.insertBefore(r,this.nextSibling),r}},wholeText:{get:n.nyi},replaceWholeText:{value:n.nyi},clone:{value:function(){return new a(this.ownerDocument,this._data)}}})},function(e,t,r){"use strict";var n=r(5),i={nextElementSibling:{get:function(){if(this.parentNode)for(var e=this.parentNode.childNodes,t=this.index+1,r=e.length;t<r;t++)if(e[t].nodeType===n.ELEMENT_NODE)return e[t];return null}},previousElementSibling:{get:function(){if(this.parentNode)for(var e=this.parentNode.childNodes,t=this.index-1;t>=0;t--)if(e[t].nodeType===n.ELEMENT_NODE)return e[t];return null}}};e.exports=i},function(e,t,r){"use strict";var n=r(3);function i(e,t){this._getString=e,this._setString=t,o(this,s(this))}function o(e,t){e.length=t.length;for(var r=0;r<t.length;r++)e[r]=t[r]}function a(e){""!==e&&void 0!==e||n.SyntaxError(),e.indexOf(" ")>-1&&n.InvalidCharacterError()}function s(e){var t=e._getString();return""===t?[]:t.split(" ")}e.exports=i,i.prototype={item:function(e){return e>=this.length?null:this._getString().split(" ")[e]},contains:function(e){return a(e=String(e)),s(this).indexOf(e)>-1},add:function(e){a(e);var t=s(this);t.indexOf(e)>-1||(t.push(e),this._setString(t.join(" ").trim()),o(this,t))},remove:function(e){a(e);var t=s(this),r=t.indexOf(e);r>-1&&(t.splice(r,1),this._setString(t.join(" ").trim())),o(this,t)},toggle:function(e){return this.contains(e)?(this.remove(e),!1):(this.add(e),!0)},toString:function(){return this._getString()}}},function(e,t,r){"use strict";var n=r(3);t.property=function(e){if(Array.isArray(e.type)){var t=Object.create(null);e.type.forEach(function(e){t[e.value||e]=e.alias||e});var r=e.missing;void 0===r&&(r=null);var i=e.invalid;return void 0===i&&(i=r),{get:function(){var n=this._getattr(e.name);return null===n?r:void 0!==(n=t[n.toLowerCase()])?n:null!==i?i:n},set:function(t){this._setattr(e.name,t)}}}if(e.type===Boolean)return{get:function(){return this.hasAttribute(e.name)},set:function(t){t?this._setattr(e.name,""):this.removeAttribute(e.name)}};if(e.type===Number||"long"===e.type||"unsigned long"===e.type||"limited unsigned long with fallback"===e.type)return function(e){var t;t="function"==typeof e.default?e.default:"number"==typeof e.default?function(){return e.default}:function(){n.assert(!1,typeof e.default)};var r="unsigned long"===e.type,i="long"===e.type,o="limited unsigned long with fallback"===e.type,a=e.min,s=e.max,c=e.setmin;void 0===a&&(r&&(a=0),i&&(a=-2147483648),o&&(a=1));void 0===s&&(r||i||o)&&(s=2147483647);return{get:function(){var n=this._getattr(e.name),c=e.float?parseFloat(n):parseInt(n,10);if(null===n||!isFinite(c)||void 0!==a&&c<a||void 0!==s&&c>s)return t.call(this);if(r||i||o){if(!/^[ \t\n\f\r]*[-+]?[0-9]/.test(n))return t.call(this);c|=0}return c},set:function(a){e.float||(a=Math.floor(a)),void 0!==c&&a<c&&n.IndexSizeError(e.name+" set to "+a),r?a=a<0||a>2147483647?t.call(this):0|a:o?a=a<1||a>2147483647?t.call(this):0|a:i&&(a=a<-2147483648||a>2147483647?t.call(this):0|a),this._setattr(e.name,String(a))}}}(e);if(!e.type||e.type===String)return{get:function(){return this._getattr(e.name)||""},set:function(t){e.treatNullAsEmptyString&&null===t&&(t=""),this._setattr(e.name,t)}};if("function"==typeof e.type)return e.type(e.name,e);throw new Error("Invalid attribute definition")},t.registerChangeHandler=function(e,t,r){var n=e.prototype;Object.prototype.hasOwnProperty.call(n,"_attributeChangeHandlers")||(n._attributeChangeHandlers=Object.create(n._attributeChangeHandlers||null)),n._attributeChangeHandlers[t]=r}},function(e,t){t.isApiWritable=!global.__domino_frozen__},function(e,t,r){"use strict";e.exports=a;var n=[null,"INDEX_SIZE_ERR",null,"HIERARCHY_REQUEST_ERR","WRONG_DOCUMENT_ERR","INVALID_CHARACTER_ERR",null,"NO_MODIFICATION_ALLOWED_ERR","NOT_FOUND_ERR","NOT_SUPPORTED_ERR",null,"INVALID_STATE_ERR","SYNTAX_ERR","INVALID_MODIFICATION_ERR","NAMESPACE_ERR","INVALID_ACCESS_ERR",null,"TYPE_MISMATCH_ERR","SECURITY_ERR","NETWORK_ERR","ABORT_ERR","URL_MISMATCH_ERR","QUOTA_EXCEEDED_ERR","TIMEOUT_ERR","INVALID_NODE_TYPE_ERR","DATA_CLONE_ERR"],i=[null,"INDEX_SIZE_ERR (1): the index is not in the allowed range",null,"HIERARCHY_REQUEST_ERR (3): the operation would yield an incorrect nodes model","WRONG_DOCUMENT_ERR (4): the object is in the wrong Document, a call to importNode is required","INVALID_CHARACTER_ERR (5): the string contains invalid characters",null,"NO_MODIFICATION_ALLOWED_ERR (7): the object can not be modified","NOT_FOUND_ERR (8): the object can not be found here","NOT_SUPPORTED_ERR (9): this operation is not supported",null,"INVALID_STATE_ERR (11): the object is in an invalid state","SYNTAX_ERR (12): the string did not match the expected pattern","INVALID_MODIFICATION_ERR (13): the object can not be modified in this way","NAMESPACE_ERR (14): the operation is not allowed by Namespaces in XML","INVALID_ACCESS_ERR (15): the object does not support the operation or argument",null,"TYPE_MISMATCH_ERR (17): the type of the object does not match the expected type","SECURITY_ERR (18): the operation is insecure","NETWORK_ERR (19): a network error occurred","ABORT_ERR (20): the user aborted an operation","URL_MISMATCH_ERR (21): the given URL does not match another URL","QUOTA_EXCEEDED_ERR (22): the quota has been exceeded","TIMEOUT_ERR (23): a timeout occurred","INVALID_NODE_TYPE_ERR (24): the supplied node is invalid or has an invalid ancestor for this operation","DATA_CLONE_ERR (25): the object can not be cloned."],o={INDEX_SIZE_ERR:1,DOMSTRING_SIZE_ERR:2,HIERARCHY_REQUEST_ERR:3,WRONG_DOCUMENT_ERR:4,INVALID_CHARACTER_ERR:5,NO_DATA_ALLOWED_ERR:6,NO_MODIFICATION_ALLOWED_ERR:7,NOT_FOUND_ERR:8,NOT_SUPPORTED_ERR:9,INUSE_ATTRIBUTE_ERR:10,INVALID_STATE_ERR:11,SYNTAX_ERR:12,INVALID_MODIFICATION_ERR:13,NAMESPACE_ERR:14,INVALID_ACCESS_ERR:15,VALIDATION_ERR:16,TYPE_MISMATCH_ERR:17,SECURITY_ERR:18,NETWORK_ERR:19,ABORT_ERR:20,URL_MISMATCH_ERR:21,QUOTA_EXCEEDED_ERR:22,TIMEOUT_ERR:23,INVALID_NODE_TYPE_ERR:24,DATA_CLONE_ERR:25};function a(e){Error.call(this),Error.captureStackTrace(this,this.constructor),this.code=e,this.message=i[e],this.name=n[e]}for(var s in a.prototype.__proto__=Error.prototype,o){var c={value:o[s]};Object.defineProperty(a,s,c),Object.defineProperty(a.prototype,s,c)}},function(e,t,r){"use strict";var n=r(11);function i(){n.call(this),this.view=null,this.detail=0}e.exports=i,i.prototype=Object.create(n.prototype,{constructor:{value:i},initUIEvent:{value:function(e,t,r,n,i){this.initEvent(e,t,r),this.view=n,this.detail=i}}})},function(e,t,r){"use strict";var n=r(47);function i(){n.call(this),this.screenX=this.screenY=this.clientX=this.clientY=0,this.ctrlKey=this.altKey=this.shiftKey=this.metaKey=!1,this.button=0,this.buttons=1,this.relatedTarget=null}e.exports=i,i.prototype=Object.create(n.prototype,{constructor:{value:i},initMouseEvent:{value:function(e,t,r,n,i,o,a,s,c,l,u,p,h,f,d){switch(this.initEvent(e,t,r,n,i),this.screenX=o,this.screenY=a,this.clientX=s,this.clientY=c,this.ctrlKey=l,this.altKey=u,this.shiftKey=p,this.metaKey=h,this.button=f,f){case 0:this.buttons=1;break;case 1:this.buttons=4;break;case 2:this.buttons=2;break;default:this.buttons=0}this.relatedTarget=d}},getModifierState:{value:function(e){switch(e){case"Alt":return this.altKey;case"Control":return this.ctrlKey;case"Shift":return this.shiftKey;case"Meta":return this.metaKey;default:return!1}}}})},function(e,t,r){"use strict";var n=r(11),i=r(48),o=r(3);function a(){}e.exports=a,a.prototype={addEventListener:function(e,t,r){if(t){void 0===r&&(r=!1),this._listeners||(this._listeners=Object.create(null)),this._listeners[e]||(this._listeners[e]=[]);for(var n=this._listeners[e],i=0,o=n.length;i<o;i++){var a=n[i];if(a.listener===t&&a.capture===r)return}var s={listener:t,capture:r};"function"==typeof t&&(s.f=t),n.push(s)}},removeEventListener:function(e,t,r){if(void 0===r&&(r=!1),this._listeners){var n=this._listeners[e];if(n)for(var i=0,o=n.length;i<o;i++){var a=n[i];if(a.listener===t&&a.capture===r)return void(1===n.length?this._listeners[e]=void 0:n.splice(i,1))}}},dispatchEvent:function(e){return this._dispatchEvent(e,!1)},_dispatchEvent:function(e,t){function r(e,t){var r=t.type,i=t.eventPhase;if(t.currentTarget=e,i!==n.CAPTURING_PHASE&&e._handlers&&e._handlers[r]){var o,a=e._handlers[r];if("function"==typeof a)o=a.call(t.currentTarget,t);else{var s=a.handleEvent;if("function"!=typeof s)throw new TypeError("handleEvent property of event handler object isnot a function.");o=s.call(a,t)}switch(t.type){case"mouseover":!0===o&&t.preventDefault();break;case"beforeunload":default:!1===o&&t.preventDefault()}}var c=e._listeners&&e._listeners[r];if(c)for(var l=0,u=(c=c.slice()).length;l<u;l++){if(t._immediatePropagationStopped)return;var p=c[l];if(!(i===n.CAPTURING_PHASE&&!p.capture||i===n.BUBBLING_PHASE&&p.capture))if(p.f)p.f.call(t.currentTarget,t);else{var h=p.listener.handleEvent;if("function"!=typeof h)throw new TypeError("handleEvent property of event listener object is not a function.");h.call(p.listener,t)}}}"boolean"!=typeof t&&(t=!1),e._initialized&&!e._dispatching||o.InvalidStateError(),e.isTrusted=t,e._dispatching=!0,e.target=this;for(var a=[],s=this.parentNode;s;s=s.parentNode)a.push(s);e.eventPhase=n.CAPTURING_PHASE;for(var c=a.length-1;c>=0&&(r(a[c],e),!e._propagationStopped);c--);if(e._propagationStopped||(e.eventPhase=n.AT_TARGET,r(this,e)),e.bubbles&&!e._propagationStopped){e.eventPhase=n.BUBBLING_PHASE;for(var l=0,u=a.length;l<u&&(r(a[l],e),!e._propagationStopped);l++);}if(e._dispatching=!1,e.eventPhase=n.AT_TARGET,e.currentTarget=null,t&&!e.defaultPrevented&&e instanceof i)switch(e.type){case"mousedown":this._armed={x:e.clientX,y:e.clientY,t:e.timeStamp};break;case"mouseout":case"mouseover":this._armed=null;break;case"mouseup":this._isClick(e)&&this._doClick(e),this._armed=null}return!e.defaultPrevented},_isClick:function(e){return null!==this._armed&&"mouseup"===e.type&&e.isTrusted&&0===e.button&&e.timeStamp-this._armed.t<1e3&&Math.abs(e.clientX-this._armed.x)<10&&Math.abs(e.clientY-this._armed.Y)<10},_doClick:function(e){if(!this._click_in_progress){this._click_in_progress=!0;for(var t=this;t&&!t._post_click_activation_steps;)t=t.parentNode;t&&t._pre_click_activation_steps&&t._pre_click_activation_steps();var r=this.ownerDocument.createEvent("MouseEvent");r.initMouseEvent("click",!0,!0,this.ownerDocument.defaultView,1,e.screenX,e.screenY,e.clientX,e.clientY,e.ctrlKey,e.altKey,e.shiftKey,e.metaKey,e.button,null);var n=this._dispatchEvent(r,!0);t&&(n?t._post_click_activation_steps&&t._post_click_activation_steps(r):t._cancelled_activation_steps&&t._cancelled_activation_steps())}},_setEventHandler:function(e,t){this._handlers||(this._handlers=Object.create(null)),this._handlers[e]=t},_getEventHandler:function(e){return this._handlers&&this._handlers[e]||null}}},function(e,t){e.exports=require("url")},function(e,t,r){e.exports=r(2)(26)},function(e,t,r){e.exports=r(2)(82)},function(e,t,r){e.exports=r(2)(36)},function(e,t,r){
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
!function(e,t){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])};function n(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e};
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */function o(e){switch(e.length){case 0:return new t.NoopAnimationPlayer;case 1:return e[0];default:return new t.ɵAnimationGroupPlayer(e)}}function a(e,r,n,i,o,a){void 0===o&&(o={}),void 0===a&&(a={});var s=[],c=[],l=-1,u=null;if(i.forEach(function(e){var n=e.offset,i=n==l,p=i&&u||{};Object.keys(e).forEach(function(n){var i=n,c=e[n];if("offset"!==n)switch(i=r.normalizePropertyName(i,s),c){case t.ɵPRE_STYLE:c=o[n];break;case t.AUTO_STYLE:c=a[n];break;default:c=r.normalizeStyleValue(n,i,c,s)}p[i]=c}),i||c.push(p),u=p,l=n}),s.length)throw new Error("Unable to animate due to the following errors:\n - "+s.join("\n - "));return c}function s(e,t,r,n){switch(t){case"start":e.onStart(function(){return n(r&&c(r,"start",e.totalTime))});break;case"done":e.onDone(function(){return n(r&&c(r,"done",e.totalTime))});break;case"destroy":e.onDestroy(function(){return n(r&&c(r,"destroy",e.totalTime))})}}function c(e,t,r){var n=l(e.element,e.triggerName,e.fromState,e.toState,t||e.phaseName,void 0==r?e.totalTime:r),i=e._data;return null!=i&&(n._data=i),n}function l(e,t,r,n,i,o){return void 0===i&&(i=""),void 0===o&&(o=0),{element:e,triggerName:t,fromState:r,toState:n,phaseName:i,totalTime:o}}function u(e,t,r){var n;return e instanceof Map?(n=e.get(t))||e.set(t,n=r):(n=e[t])||(n=e[t]=r),n}function p(e){var t=e.indexOf(":"),r=e.substring(1,t),n=e.substr(t+1);return[r,n]}var h=function(e,t){return!1},f=function(e,t){return!1},d=function(e,t,r){return[]};if("undefined"!=typeof Element){if(h=function(e,t){return e.contains(t)},Element.prototype.matches)f=function(e,t){return e.matches(t)};else{var m=Element.prototype,g=m.matchesSelector||m.mozMatchesSelector||m.msMatchesSelector||m.oMatchesSelector||m.webkitMatchesSelector;g&&(f=function(e,t){return g.apply(e,[t])})}d=function(e,t,r){var n=[];if(r)n.push.apply(n,e.querySelectorAll(t));else{var i=e.querySelector(t);i&&n.push(i)}return n}}var y=null,v=!1;function b(e){y||(y=_()||{},v=!!y.style&&"WebkitAppearance"in y.style);var t=!0;if(y.style&&!function(e){return"ebkit"==e.substring(1,6)}(e)&&!(t=e in y.style)&&v){var r="Webkit"+e.charAt(0).toUpperCase()+e.substr(1);t=r in y.style}return t}function _(){return"undefined"!=typeof document?document.body:null}var E=f,w=h,T=d,S=function(){function e(){}return e.prototype.validateStyleProperty=function(e){return b(e)},e.prototype.matchesElement=function(e,t){return E(e,t)},e.prototype.containsElement=function(e,t){return w(e,t)},e.prototype.query=function(e,t,r){return T(e,t,r)},e.prototype.computeStyle=function(e,t,r){return r||""},e.prototype.animate=function(e,r,n,i,o,a){return void 0===a&&(a=[]),new t.NoopAnimationPlayer},e}(),k=function(){function e(){}return e.NOOP=new S,e}(),x=1e3,N=".ng-trigger",R=".ng-animating";function C(e){if("number"==typeof e)return e;var t=e.match(/^(-?[\.\d]+)(m?s)/);return!t||t.length<2?0:A(parseFloat(t[1]),t[2])}function A(e,t){switch(t){case"s":return e*x;default:return e}}function O(e,t,r){return e.hasOwnProperty("duration")?e:function(e,t,r){var n,i=0,o="";if("string"==typeof e){var a=e.match(/^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i);if(null===a)return t.push('The provided timing value "'+e+'" is invalid.'),{duration:0,delay:0,easing:""};n=A(parseFloat(a[1]),a[2]);var s=a[3];null!=s&&(i=A(Math.floor(parseFloat(s)),a[4]));var c=a[5];c&&(o=c)}else n=e;if(!r){var l=!1,u=t.length;n<0&&(t.push("Duration values below 0 are not allowed for this animation step."),l=!0),i<0&&(t.push("Delay values below 0 are not allowed for this animation step."),l=!0),l&&t.splice(u,0,'The provided timing value "'+e+'" is invalid.')}return{duration:n,delay:i,easing:o}}(e,t,r)}function L(e,t){return void 0===t&&(t={}),Object.keys(e).forEach(function(r){t[r]=e[r]}),t}function D(e){var t={};return Array.isArray(e)?e.forEach(function(e){return I(e,!1,t)}):I(e,!1,t),t}function I(e,t,r){if(void 0===r&&(r={}),t)for(var n in e)r[n]=e[n];else L(e,r);return r}function M(e,t){e.style&&Object.keys(t).forEach(function(r){var n=z(r);e.style[n]=t[r]})}function P(e,t){e.style&&Object.keys(t).forEach(function(t){var r=z(t);e.style[r]=""})}function q(e){return Array.isArray(e)?1==e.length?e[0]:t.sequence(e):e}var H=new RegExp("{{\\s*(.+?)\\s*}}","g");function B(e){var t=[];if("string"==typeof e){for(var r=e.toString(),n=void 0;n=H.exec(r);)t.push(n[1]);H.lastIndex=0}return t}function j(e,t,r){var n=e.toString(),i=n.replace(H,function(e,n){var i=t[n];return t.hasOwnProperty(n)||(r.push("Please provide a value for the animation param "+n),i=""),i.toString()});return i==n?e:i}function F(e){for(var t=[],r=e.next();!r.done;)t.push(r.value),r=e.next();return t}var U=/-+([a-z0-9])/g;function z(e){return e.replace(U,function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e[1].toUpperCase()})}function V(e,t,r){switch(t.type){case 7:return e.visitTrigger(t,r);case 0:return e.visitState(t,r);case 1:return e.visitTransition(t,r);case 2:return e.visitSequence(t,r);case 3:return e.visitGroup(t,r);case 4:return e.visitAnimate(t,r);case 5:return e.visitKeyframes(t,r);case 6:return e.visitStyle(t,r);case 8:return e.visitReference(t,r);case 9:return e.visitAnimateChild(t,r);case 10:return e.visitAnimateRef(t,r);case 11:return e.visitQuery(t,r);case 12:return e.visitStagger(t,r);default:throw new Error("Unable to resolve animation metadata node #"+t.type)}}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var W="*";function G(e,t){var r=[];return"string"==typeof e?e.split(/\s*,\s*/).forEach(function(e){return function(e,t,r){if(":"==e[0]){var n=function(e,t){switch(e){case":enter":return"void => *";case":leave":return"* => void";case":increment":return function(e,t){return parseFloat(t)>parseFloat(e)};case":decrement":return function(e,t){return parseFloat(t)<parseFloat(e)};default:return t.push('The transition alias value "'+e+'" is not supported'),"* => *"}}(e,r);if("function"==typeof n)return void t.push(n);e=n}var i=e.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);if(null==i||i.length<4)return r.push('The provided transition expression "'+e+'" is not supported'),t;var o=i[1],a=i[2],s=i[3];t.push(Q(o,s));var c=o==W&&s==W;"<"!=a[0]||c||t.push(Q(s,o))}(e,r,t)}):r.push(e),r}var Y=new Set(["true","1"]),K=new Set(["false","0"]);function Q(e,t){var r=Y.has(e)||K.has(e),n=Y.has(t)||K.has(t);return function(i,o){var a=e==W||e==i,s=t==W||t==o;return!a&&r&&"boolean"==typeof i&&(a=i?Y.has(e):K.has(e)),!s&&n&&"boolean"==typeof o&&(s=o?Y.has(t):K.has(t)),a&&s}}var $=":self",X=new RegExp("s*"+$+"s*,?","g");function Z(e,t,r){return new J(e).build(t,r)}var J=function(){function e(e){this._driver=e}return e.prototype.build=function(e,t){var r=new ee(t);return this._resetContextStyleTimingState(r),V(this,q(e),r)},e.prototype._resetContextStyleTimingState=function(e){e.currentQuerySelector="",e.collectedStyles={},e.collectedStyles[""]={},e.currentTime=0},e.prototype.visitTrigger=function(e,t){var r=this,n=t.queryCount=0,i=t.depCount=0,o=[],a=[];return"@"==e.name.charAt(0)&&t.errors.push("animation triggers cannot be prefixed with an `@` sign (e.g. trigger('@foo', [...]))"),e.definitions.forEach(function(e){if(r._resetContextStyleTimingState(t),0==e.type){var s=e,c=s.name;c.split(/\s*,\s*/).forEach(function(e){s.name=e,o.push(r.visitState(s,t))}),s.name=c}else if(1==e.type){var l=r.visitTransition(e,t);n+=l.queryCount,i+=l.depCount,a.push(l)}else t.errors.push("only state() and transition() definitions can sit inside of a trigger()")}),{type:7,name:e.name,states:o,transitions:a,queryCount:n,depCount:i,options:null}},e.prototype.visitState=function(e,t){var r=this.visitStyle(e.styles,t),n=e.options&&e.options.params||null;if(r.containsDynamicStyles){var i=new Set,o=n||{};if(r.styles.forEach(function(e){if(te(e)){var t=e;Object.keys(t).forEach(function(e){B(t[e]).forEach(function(e){o.hasOwnProperty(e)||i.add(e)})})}}),i.size){var a=F(i.values());t.errors.push('state("'+e.name+'", ...) must define default values for all the following style substitutions: '+a.join(", "))}}return{type:0,name:e.name,style:r,options:n?{params:n}:null}},e.prototype.visitTransition=function(e,t){t.queryCount=0,t.depCount=0;var r=V(this,q(e.animation),t),n=G(e.expr,t.errors);return{type:1,matchers:n,animation:r,queryCount:t.queryCount,depCount:t.depCount,options:re(e.options)}},e.prototype.visitSequence=function(e,t){var r=this;return{type:2,steps:e.steps.map(function(e){return V(r,e,t)}),options:re(e.options)}},e.prototype.visitGroup=function(e,t){var r=this,n=t.currentTime,i=0,o=e.steps.map(function(e){t.currentTime=n;var o=V(r,e,t);return i=Math.max(i,t.currentTime),o});return t.currentTime=i,{type:3,steps:o,options:re(e.options)}},e.prototype.visitAnimate=function(e,r){var n,i=function(e,t){var r=null;if(e.hasOwnProperty("duration"))r=e;else if("number"==typeof e){var n=O(e,t).duration;return ne(n,0,"")}var i=e;if(i.split(/\s+/).some(function(e){return"{"==e.charAt(0)&&"{"==e.charAt(1)})){var o=ne(0,0,"");return o.dynamic=!0,o.strValue=i,o}return ne((r=r||O(i,t)).duration,r.delay,r.easing)}(e.timings,r.errors);r.currentAnimateTimings=i;var o=e.styles?e.styles:t.style({});if(5==o.type)n=this.visitKeyframes(o,r);else{var a=e.styles,s=!1;if(!a){s=!0;var c={};i.easing&&(c.easing=i.easing),a=t.style(c)}r.currentTime+=i.duration+i.delay;var l=this.visitStyle(a,r);l.isEmptyStep=s,n=l}return r.currentAnimateTimings=null,{type:4,timings:i,style:n,options:null}},e.prototype.visitStyle=function(e,t){var r=this._makeStyleAst(e,t);return this._validateStyleAst(r,t),r},e.prototype._makeStyleAst=function(e,r){var n=[];Array.isArray(e.styles)?e.styles.forEach(function(e){"string"==typeof e?e==t.AUTO_STYLE?n.push(e):r.errors.push("The provided style string value "+e+" is not allowed."):n.push(e)}):n.push(e.styles);var i=!1,o=null;return n.forEach(function(e){if(te(e)){var t=e,r=t.easing;if(r&&(o=r,delete t.easing),!i)for(var n in t){var a=t[n];if(a.toString().indexOf("{{")>=0){i=!0;break}}}}),{type:6,styles:n,easing:o,offset:e.offset,containsDynamicStyles:i,options:null}},e.prototype._validateStyleAst=function(e,t){var r=this,n=t.currentAnimateTimings,i=t.currentTime,o=t.currentTime;n&&o>0&&(o-=n.duration+n.delay),e.styles.forEach(function(e){"string"!=typeof e&&Object.keys(e).forEach(function(n){if(r._driver.validateStyleProperty(n)){var a,s,c,l,u,p=t.collectedStyles[t.currentQuerySelector],h=p[n],f=!0;h&&(o!=i&&o>=h.startTime&&i<=h.endTime&&(t.errors.push('The CSS property "'+n+'" that exists between the times of "'+h.startTime+'ms" and "'+h.endTime+'ms" is also being animated in a parallel animation between the times of "'+o+'ms" and "'+i+'ms"'),f=!1),o=h.startTime),f&&(p[n]={startTime:o,endTime:i}),t.options&&(a=e[n],s=t.options,c=t.errors,l=s.params||{},(u=B(a)).length&&u.forEach(function(e){l.hasOwnProperty(e)||c.push("Unable to resolve the local animation param "+e+" in the given list of values")}))}else t.errors.push('The provided animation property "'+n+'" is not a supported CSS property for animations')})})},e.prototype.visitKeyframes=function(e,t){var r=this,n={type:5,styles:[],options:null};if(!t.currentAnimateTimings)return t.errors.push("keyframes() must be placed inside of a call to animate()"),n;var i=0,o=[],a=!1,s=!1,c=0,l=e.steps.map(function(e){var n=r._makeStyleAst(e,t),l=null!=n.offset?n.offset:function(e){if("string"==typeof e)return null;var t=null;if(Array.isArray(e))e.forEach(function(e){if(te(e)&&e.hasOwnProperty("offset")){var r=e;t=parseFloat(r.offset),delete r.offset}});else if(te(e)&&e.hasOwnProperty("offset")){var r=e;t=parseFloat(r.offset),delete r.offset}return t}(n.styles),u=0;return null!=l&&(i++,u=n.offset=l),s=s||u<0||u>1,a=a||u<c,c=u,o.push(u),n});s&&t.errors.push("Please ensure that all keyframe offsets are between 0 and 1"),a&&t.errors.push("Please ensure that all keyframe offsets are in order");var u=e.steps.length,p=0;i>0&&i<u?t.errors.push("Not all style() steps within the declared keyframes() contain offsets"):0==i&&(p=1/(u-1));var h=u-1,f=t.currentTime,d=t.currentAnimateTimings,m=d.duration;return l.forEach(function(e,i){var a=p>0?i==h?1:p*i:o[i],s=a*m;t.currentTime=f+d.delay+s,d.duration=s,r._validateStyleAst(e,t),e.offset=a,n.styles.push(e)}),n},e.prototype.visitReference=function(e,t){return{type:8,animation:V(this,q(e.animation),t),options:re(e.options)}},e.prototype.visitAnimateChild=function(e,t){return t.depCount++,{type:9,options:re(e.options)}},e.prototype.visitAnimateRef=function(e,t){return{type:10,animation:this.visitReference(e.animation,t),options:re(e.options)}},e.prototype.visitQuery=function(e,t){var r=t.currentQuerySelector,n=e.options||{};t.queryCount++,t.currentQuery=e;var i=function(e){var t=!!e.split(/\s*,\s*/).find(function(e){return e==$});return t&&(e=e.replace(X,"")),[e=e.replace(/@\*/g,N).replace(/@\w+/g,function(e){return N+"-"+e.substr(1)}).replace(/:animating/g,R),t]}(e.selector),o=i[0],a=i[1];t.currentQuerySelector=r.length?r+" "+o:o,u(t.collectedStyles,t.currentQuerySelector,{});var s=V(this,q(e.animation),t);return t.currentQuery=null,t.currentQuerySelector=r,{type:11,selector:o,limit:n.limit||0,optional:!!n.optional,includeSelf:a,animation:s,originalSelector:e.selector,options:re(e.options)}},e.prototype.visitStagger=function(e,t){t.currentQuery||t.errors.push("stagger() can only be used inside of query()");var r="full"===e.timings?{duration:0,delay:0,easing:"full"}:O(e.timings,t.errors,!0);return{type:12,animation:V(this,q(e.animation),t),timings:r,options:null}},e}(),ee=function(e){this.errors=e,this.queryCount=0,this.depCount=0,this.currentTransition=null,this.currentQuery=null,this.currentQuerySelector=null,this.currentAnimateTimings=null,this.currentTime=0,this.collectedStyles={},this.options=null};function te(e){return!Array.isArray(e)&&"object"==typeof e}function re(e){var t;return e?(e=L(e)).params&&(e.params=(t=e.params)?L(t):null):e={},e}function ne(e,t,r){return{duration:e,delay:t,easing:r}}function ie(e,t,r,n,i,o,a,s){return void 0===a&&(a=null),void 0===s&&(s=!1),{type:1,element:e,keyframes:t,preStyleProps:r,postStyleProps:n,duration:i,delay:o,totalTime:i+o,easing:a,subTimeline:s}}var oe=function(){function e(){this._map=new Map}return e.prototype.consume=function(e){var t=this._map.get(e);return t?this._map.delete(e):t=[],t},e.prototype.append=function(e,t){var r=this._map.get(e);r||this._map.set(e,r=[]),r.push.apply(r,t)},e.prototype.has=function(e){return this._map.has(e)},e.prototype.clear=function(){this._map.clear()},e}(),ae=new RegExp(":enter","g"),se=new RegExp(":leave","g");function ce(e,t,r,n,i,o,a,s,c,l){return void 0===o&&(o={}),void 0===a&&(a={}),void 0===l&&(l=[]),(new le).buildKeyframes(e,t,r,n,i,o,a,s,c,l)}var le=function(){function e(){}return e.prototype.buildKeyframes=function(e,t,r,n,i,o,a,s,c,l){void 0===l&&(l=[]),c=c||new oe;var u=new pe(e,t,c,n,i,l,[]);u.options=s,u.currentTimeline.setStyles([o],null,u.errors,s),V(this,r,u);var p=u.timelines.filter(function(e){return e.containsAnimation()});if(p.length&&Object.keys(a).length){var h=p[p.length-1];h.allowOnlyTimelineStyles()||h.setStyles([a],null,u.errors,s)}return p.length?p.map(function(e){return e.buildKeyframes()}):[ie(t,[],[],[],0,0,"",!1)]},e.prototype.visitTrigger=function(e,t){},e.prototype.visitState=function(e,t){},e.prototype.visitTransition=function(e,t){},e.prototype.visitAnimateChild=function(e,t){var r=t.subInstructions.consume(t.element);if(r){var n=t.createSubContext(e.options),i=t.currentTimeline.currentTime,o=this._visitSubInstructions(r,n,n.options);i!=o&&t.transformIntoNewTimeline(o)}t.previousNode=e},e.prototype.visitAnimateRef=function(e,t){var r=t.createSubContext(e.options);r.transformIntoNewTimeline(),this.visitReference(e.animation,r),t.transformIntoNewTimeline(r.currentTimeline.currentTime),t.previousNode=e},e.prototype._visitSubInstructions=function(e,t,r){var n=t.currentTimeline.currentTime,i=n,o=null!=r.duration?C(r.duration):null,a=null!=r.delay?C(r.delay):null;return 0!==o&&e.forEach(function(e){var r=t.appendInstructionToTimeline(e,o,a);i=Math.max(i,r.duration+r.delay)}),i},e.prototype.visitReference=function(e,t){t.updateOptions(e.options,!0),V(this,e.animation,t),t.previousNode=e},e.prototype.visitSequence=function(e,t){var r=this,n=t.subContextCount,i=t,o=e.options;if(o&&(o.params||o.delay)&&((i=t.createSubContext(o)).transformIntoNewTimeline(),null!=o.delay)){6==i.previousNode.type&&(i.currentTimeline.snapshotCurrentStyles(),i.previousNode=ue);var a=C(o.delay);i.delayNextStep(a)}e.steps.length&&(e.steps.forEach(function(e){return V(r,e,i)}),i.currentTimeline.applyStylesToKeyframe(),i.subContextCount>n&&i.transformIntoNewTimeline()),t.previousNode=e},e.prototype.visitGroup=function(e,t){var r=this,n=[],i=t.currentTimeline.currentTime,o=e.options&&e.options.delay?C(e.options.delay):0;e.steps.forEach(function(a){var s=t.createSubContext(e.options);o&&s.delayNextStep(o),V(r,a,s),i=Math.max(i,s.currentTimeline.currentTime),n.push(s.currentTimeline)}),n.forEach(function(e){return t.currentTimeline.mergeTimelineCollectedStyles(e)}),t.transformIntoNewTimeline(i),t.previousNode=e},e.prototype._visitTiming=function(e,t){if(e.dynamic){var r=e.strValue,n=t.params?j(r,t.params,t.errors):r;return O(n,t.errors)}return{duration:e.duration,delay:e.delay,easing:e.easing}},e.prototype.visitAnimate=function(e,t){var r=t.currentAnimateTimings=this._visitTiming(e.timings,t),n=t.currentTimeline;r.delay&&(t.incrementTime(r.delay),n.snapshotCurrentStyles());var i=e.style;5==i.type?this.visitKeyframes(i,t):(t.incrementTime(r.duration),this.visitStyle(i,t),n.applyStylesToKeyframe()),t.currentAnimateTimings=null,t.previousNode=e},e.prototype.visitStyle=function(e,t){var r=t.currentTimeline,n=t.currentAnimateTimings;!n&&r.getCurrentStyleProperties().length&&r.forwardFrame();var i=n&&n.easing||e.easing;e.isEmptyStep?r.applyEmptyStep(i):r.setStyles(e.styles,i,t.errors,t.options),t.previousNode=e},e.prototype.visitKeyframes=function(e,t){var r=t.currentAnimateTimings,n=t.currentTimeline.duration,i=r.duration,o=t.createSubContext(),a=o.currentTimeline;a.easing=r.easing,e.styles.forEach(function(e){var r=e.offset||0;a.forwardTime(r*i),a.setStyles(e.styles,e.easing,t.errors,t.options),a.applyStylesToKeyframe()}),t.currentTimeline.mergeTimelineCollectedStyles(a),t.transformIntoNewTimeline(n+i),t.previousNode=e},e.prototype.visitQuery=function(e,t){var r=this,n=t.currentTimeline.currentTime,i=e.options||{},o=i.delay?C(i.delay):0;o&&(6===t.previousNode.type||0==n&&t.currentTimeline.getCurrentStyleProperties().length)&&(t.currentTimeline.snapshotCurrentStyles(),t.previousNode=ue);var a=n,s=t.invokeQuery(e.selector,e.originalSelector,e.limit,e.includeSelf,!!i.optional,t.errors);t.currentQueryTotal=s.length;var c=null;s.forEach(function(n,i){t.currentQueryIndex=i;var s=t.createSubContext(e.options,n);o&&s.delayNextStep(o),n===t.element&&(c=s.currentTimeline),V(r,e.animation,s),s.currentTimeline.applyStylesToKeyframe();var l=s.currentTimeline.currentTime;a=Math.max(a,l)}),t.currentQueryIndex=0,t.currentQueryTotal=0,t.transformIntoNewTimeline(a),c&&(t.currentTimeline.mergeTimelineCollectedStyles(c),t.currentTimeline.snapshotCurrentStyles()),t.previousNode=e},e.prototype.visitStagger=function(e,t){var r=t.parentContext,n=t.currentTimeline,i=e.timings,o=Math.abs(i.duration),a=o*(t.currentQueryTotal-1),s=o*t.currentQueryIndex,c=i.duration<0?"reverse":i.easing;switch(c){case"reverse":s=a-s;break;case"full":s=r.currentStaggerTime}var l=t.currentTimeline;s&&l.delayNextStep(s);var u=l.currentTime;V(this,e.animation,t),t.previousNode=e,r.currentStaggerTime=n.currentTime-u+(n.startTime-r.currentTimeline.startTime)},e}(),ue={},pe=function(){function e(e,t,r,n,i,o,a,s){this._driver=e,this.element=t,this.subInstructions=r,this._enterClassName=n,this._leaveClassName=i,this.errors=o,this.timelines=a,this.parentContext=null,this.currentAnimateTimings=null,this.previousNode=ue,this.subContextCount=0,this.options={},this.currentQueryIndex=0,this.currentQueryTotal=0,this.currentStaggerTime=0,this.currentTimeline=s||new he(this._driver,t,0),a.push(this.currentTimeline)}return Object.defineProperty(e.prototype,"params",{get:function(){return this.options.params},enumerable:!0,configurable:!0}),e.prototype.updateOptions=function(e,t){var r=this;if(e){var n=e,i=this.options;null!=n.duration&&(i.duration=C(n.duration)),null!=n.delay&&(i.delay=C(n.delay));var o=n.params;if(o){var a=i.params;a||(a=this.options.params={}),Object.keys(o).forEach(function(e){t&&a.hasOwnProperty(e)||(a[e]=j(o[e],a,r.errors))})}}},e.prototype._copyOptions=function(){var e={};if(this.options){var t=this.options.params;if(t){var r=e.params={};Object.keys(t).forEach(function(e){r[e]=t[e]})}}return e},e.prototype.createSubContext=function(t,r,n){void 0===t&&(t=null);var i=r||this.element,o=new e(this._driver,i,this.subInstructions,this._enterClassName,this._leaveClassName,this.errors,this.timelines,this.currentTimeline.fork(i,n||0));return o.previousNode=this.previousNode,o.currentAnimateTimings=this.currentAnimateTimings,o.options=this._copyOptions(),o.updateOptions(t),o.currentQueryIndex=this.currentQueryIndex,o.currentQueryTotal=this.currentQueryTotal,o.parentContext=this,this.subContextCount++,o},e.prototype.transformIntoNewTimeline=function(e){return this.previousNode=ue,this.currentTimeline=this.currentTimeline.fork(this.element,e),this.timelines.push(this.currentTimeline),this.currentTimeline},e.prototype.appendInstructionToTimeline=function(e,t,r){var n={duration:null!=t?t:e.duration,delay:this.currentTimeline.currentTime+(null!=r?r:0)+e.delay,easing:""},i=new fe(this._driver,e.element,e.keyframes,e.preStyleProps,e.postStyleProps,n,e.stretchStartingKeyframe);return this.timelines.push(i),n},e.prototype.incrementTime=function(e){this.currentTimeline.forwardTime(this.currentTimeline.duration+e)},e.prototype.delayNextStep=function(e){e>0&&this.currentTimeline.delayNextStep(e)},e.prototype.invokeQuery=function(e,t,r,n,i,o){var a=[];if(n&&a.push(this.element),e.length>0){e=(e=e.replace(ae,"."+this._enterClassName)).replace(se,"."+this._leaveClassName);var s=1!=r,c=this._driver.query(this.element,e,s);0!==r&&(c=r<0?c.slice(c.length+r,c.length):c.slice(0,r)),a.push.apply(a,c)}return i||0!=a.length||o.push('`query("'+t+'")` returned zero elements. (Use `query("'+t+'", { optional: true })` if you wish to allow this.)'),a},e}(),he=function(){function e(e,t,r,n){this._driver=e,this.element=t,this.startTime=r,this._elementTimelineStylesLookup=n,this.duration=0,this._previousKeyframe={},this._currentKeyframe={},this._keyframes=new Map,this._styleSummary={},this._pendingStyles={},this._backFill={},this._currentEmptyStepKeyframe=null,this._elementTimelineStylesLookup||(this._elementTimelineStylesLookup=new Map),this._localTimelineStyles=Object.create(this._backFill,{}),this._globalTimelineStyles=this._elementTimelineStylesLookup.get(t),this._globalTimelineStyles||(this._globalTimelineStyles=this._localTimelineStyles,this._elementTimelineStylesLookup.set(t,this._localTimelineStyles)),this._loadKeyframe()}return e.prototype.containsAnimation=function(){switch(this._keyframes.size){case 0:return!1;case 1:return this.getCurrentStyleProperties().length>0;default:return!0}},e.prototype.getCurrentStyleProperties=function(){return Object.keys(this._currentKeyframe)},Object.defineProperty(e.prototype,"currentTime",{get:function(){return this.startTime+this.duration},enumerable:!0,configurable:!0}),e.prototype.delayNextStep=function(e){var t=1==this._keyframes.size&&Object.keys(this._pendingStyles).length;this.duration||t?(this.forwardTime(this.currentTime+e),t&&this.snapshotCurrentStyles()):this.startTime+=e},e.prototype.fork=function(t,r){return this.applyStylesToKeyframe(),new e(this._driver,t,r||this.currentTime,this._elementTimelineStylesLookup)},e.prototype._loadKeyframe=function(){this._currentKeyframe&&(this._previousKeyframe=this._currentKeyframe),this._currentKeyframe=this._keyframes.get(this.duration),this._currentKeyframe||(this._currentKeyframe=Object.create(this._backFill,{}),this._keyframes.set(this.duration,this._currentKeyframe))},e.prototype.forwardFrame=function(){this.duration+=1,this._loadKeyframe()},e.prototype.forwardTime=function(e){this.applyStylesToKeyframe(),this.duration=e,this._loadKeyframe()},e.prototype._updateStyle=function(e,t){this._localTimelineStyles[e]=t,this._globalTimelineStyles[e]=t,this._styleSummary[e]={time:this.currentTime,value:t}},e.prototype.allowOnlyTimelineStyles=function(){return this._currentEmptyStepKeyframe!==this._currentKeyframe},e.prototype.applyEmptyStep=function(e){var r=this;e&&(this._previousKeyframe.easing=e),Object.keys(this._globalTimelineStyles).forEach(function(e){r._backFill[e]=r._globalTimelineStyles[e]||t.AUTO_STYLE,r._currentKeyframe[e]=t.AUTO_STYLE}),this._currentEmptyStepKeyframe=this._currentKeyframe},e.prototype.setStyles=function(e,r,n,i){var o=this;r&&(this._previousKeyframe.easing=r);var a=i&&i.params||{},s=function(e,r){var n,i={};return e.forEach(function(e){"*"===e?(n=n||Object.keys(r)).forEach(function(e){i[e]=t.AUTO_STYLE}):I(e,!1,i)}),i}(e,this._globalTimelineStyles);Object.keys(s).forEach(function(e){var r=j(s[e],a,n);o._pendingStyles[e]=r,o._localTimelineStyles.hasOwnProperty(e)||(o._backFill[e]=o._globalTimelineStyles.hasOwnProperty(e)?o._globalTimelineStyles[e]:t.AUTO_STYLE),o._updateStyle(e,r)})},e.prototype.applyStylesToKeyframe=function(){var e=this,t=this._pendingStyles,r=Object.keys(t);0!=r.length&&(this._pendingStyles={},r.forEach(function(r){var n=t[r];e._currentKeyframe[r]=n}),Object.keys(this._localTimelineStyles).forEach(function(t){e._currentKeyframe.hasOwnProperty(t)||(e._currentKeyframe[t]=e._localTimelineStyles[t])}))},e.prototype.snapshotCurrentStyles=function(){var e=this;Object.keys(this._localTimelineStyles).forEach(function(t){var r=e._localTimelineStyles[t];e._pendingStyles[t]=r,e._updateStyle(t,r)})},e.prototype.getFinalKeyframe=function(){return this._keyframes.get(this.duration)},Object.defineProperty(e.prototype,"properties",{get:function(){var e=[];for(var t in this._currentKeyframe)e.push(t);return e},enumerable:!0,configurable:!0}),e.prototype.mergeTimelineCollectedStyles=function(e){var t=this;Object.keys(e._styleSummary).forEach(function(r){var n=t._styleSummary[r],i=e._styleSummary[r];(!n||i.time>n.time)&&t._updateStyle(r,i.value)})},e.prototype.buildKeyframes=function(){var e=this;this.applyStylesToKeyframe();var r=new Set,n=new Set,i=1===this._keyframes.size&&0===this.duration,o=[];this._keyframes.forEach(function(a,s){var c=I(a,!0);Object.keys(c).forEach(function(e){var i=c[e];i==t.ɵPRE_STYLE?r.add(e):i==t.AUTO_STYLE&&n.add(e)}),i||(c.offset=s/e.duration),o.push(c)});var a=r.size?F(r.values()):[],s=n.size?F(n.values()):[];if(i){var c=o[0],l=L(c);c.offset=0,l.offset=1,o=[c,l]}return ie(this.element,o,a,s,this.duration,this.startTime,this.easing,!1)},e}(),fe=function(e){function t(t,r,n,i,o,a,s){void 0===s&&(s=!1);var c=e.call(this,t,r,a.delay)||this;return c.element=r,c.keyframes=n,c.preStyleProps=i,c.postStyleProps=o,c._stretchStartingKeyframe=s,c.timings={duration:a.duration,delay:a.delay,easing:a.easing},c}return n(t,e),t.prototype.containsAnimation=function(){return this.keyframes.length>1},t.prototype.buildKeyframes=function(){var e=this.keyframes,t=this.timings,r=t.delay,n=t.duration,i=t.easing;if(this._stretchStartingKeyframe&&r){var o=[],a=n+r,s=r/a,c=I(e[0],!1);c.offset=0,o.push(c);var l=I(e[0],!1);l.offset=de(s),o.push(l);for(var u=e.length-1,p=1;p<=u;p++){var h=I(e[p],!1),f=h.offset,d=r+f*n;h.offset=de(d/a),o.push(h)}n=a,r=0,i="",e=o}return ie(this.element,e,this.preStyleProps,this.postStyleProps,n,r,i,!0)},t}(he);function de(e,t){void 0===t&&(t=3);var r=Math.pow(10,t-1);return Math.round(e*r)/r}var me,ge,ye=function(){function e(e,t){this._driver=e;var r=[],n=Z(e,t,r);if(r.length){var i="animation validation failed:\n"+r.join("\n");throw new Error(i)}this._animationAst=n}return e.prototype.buildTimelines=function(e,t,r,n,i){var o=Array.isArray(t)?D(t):t,a=Array.isArray(r)?D(r):r,s=[];i=i||new oe;var c=ce(this._driver,e,this._animationAst,"ng-enter","ng-leave",o,a,n,i,s);if(s.length){var l="animation building failed:\n"+s.join("\n");throw new Error(l)}return c},e}(),ve=function(){},be=function(){function e(){}return e.prototype.normalizePropertyName=function(e,t){return e},e.prototype.normalizeStyleValue=function(e,t,r,n){return r},e}(),_e=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.prototype.normalizePropertyName=function(e,t){return z(e)},t.prototype.normalizeStyleValue=function(e,t,r,n){var i="",o=r.toString().trim();if(Ee[t]&&0!==r&&"0"!==r)if("number"==typeof r)i="px";else{var a=r.match(/^[+-]?[\d\.]+([a-z]*)$/);a&&0==a[1].length&&n.push("Please provide a CSS unit value for "+e+":"+r)}return o+i},t}(ve),Ee=(me="width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective".split(","),ge={},me.forEach(function(e){return ge[e]=!0}),ge);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */function we(e,t,r,n,i,o,a,s,c,l,u,p){return{type:0,element:e,triggerName:t,isRemovalTransition:i,fromState:r,fromStyles:o,toState:n,toStyles:a,timelines:s,queriedElements:c,preStyleProps:l,postStyleProps:u,errors:p}}var Te={},Se=function(){function e(e,t,r){this._triggerName=e,this.ast=t,this._stateStyles=r}return e.prototype.match=function(e,t){return function(e,t,r){return e.some(function(e){return e(t,r)})}(this.ast.matchers,e,t)},e.prototype.buildStyles=function(e,t,r){var n=this._stateStyles["*"],i=this._stateStyles[e],o=n?n.buildStyles(t,r):{};return i?i.buildStyles(t,r):o},e.prototype.build=function(e,t,r,n,o,a,s,c,l){var p=[],h=this.ast.options&&this.ast.options.params||Te,f=s&&s.params||Te,d=this.buildStyles(r,f,p),m=c&&c.params||Te,g=this.buildStyles(n,m,p),y=new Set,v=new Map,b=new Map,_="void"===n,E={params:i({},h,m)},w=ce(e,t,this.ast.animation,o,a,d,g,E,l,p);if(p.length)return we(t,this._triggerName,r,n,_,d,g,[],[],v,b,p);w.forEach(function(e){var r=e.element,n=u(v,r,{});e.preStyleProps.forEach(function(e){return n[e]=!0});var i=u(b,r,{});e.postStyleProps.forEach(function(e){return i[e]=!0}),r!==t&&y.add(r)});var T=F(y.values());return we(t,this._triggerName,r,n,_,d,g,w,T,v,b)},e}(),ke=function(){function e(e,t){this.styles=e,this.defaultParams=t}return e.prototype.buildStyles=function(e,t){var r={},n=L(this.defaultParams);return Object.keys(e).forEach(function(t){var r=e[t];null!=r&&(n[t]=r)}),this.styles.styles.forEach(function(e){if("string"!=typeof e){var i=e;Object.keys(i).forEach(function(e){var o=i[e];o.length>1&&(o=j(o,n,t)),r[e]=o})}}),r},e}(),xe=function(){function e(e,t){var r,n,i=this;this.name=e,this.ast=t,this.transitionFactories=[],this.states={},t.states.forEach(function(e){var t=e.options&&e.options.params||{};i.states[e.name]=new ke(e.style,t)}),Ne(this.states,"true","1"),Ne(this.states,"false","0"),t.transitions.forEach(function(t){i.transitionFactories.push(new Se(e,t,i.states))}),this.fallbackTransition=(r=e,n=this.states,new Se(r,{type:1,animation:{type:2,steps:[],options:null},matchers:[function(e,t){return!0}],options:null,queryCount:0,depCount:0},n))}return Object.defineProperty(e.prototype,"containsQueries",{get:function(){return this.ast.queryCount>0},enumerable:!0,configurable:!0}),e.prototype.matchTransition=function(e,t){var r=this.transitionFactories.find(function(r){return r.match(e,t)});return r||null},e.prototype.matchStyles=function(e,t,r){return this.fallbackTransition.buildStyles(e,t,r)},e}();function Ne(e,t,r){e.hasOwnProperty(t)?e.hasOwnProperty(r)||(e[r]=e[t]):e.hasOwnProperty(r)&&(e[t]=e[r])}var Re=new oe,Ce=function(){function e(e,t){this._driver=e,this._normalizer=t,this._animations={},this._playersById={},this.players=[]}return e.prototype.register=function(e,t){var r=[],n=Z(this._driver,t,r);if(r.length)throw new Error("Unable to build the animation due to the following errors: "+r.join("\n"));this._animations[e]=n},e.prototype._buildPlayer=function(e,t,r){var n=e.element,i=a(this._driver,this._normalizer,0,e.keyframes,t,r);return this._driver.animate(n,i,e.duration,e.delay,e.easing,[])},e.prototype.create=function(e,r,n){var i=this;void 0===n&&(n={});var a,s=[],c=this._animations[e],l=new Map;if(c?(a=ce(this._driver,r,c,"ng-enter","ng-leave",{},{},n,Re,s)).forEach(function(e){var t=u(l,e.element,{});e.postStyleProps.forEach(function(e){return t[e]=null})}):(s.push("The requested animation doesn't exist or has already been destroyed"),a=[]),s.length)throw new Error("Unable to create the animation due to the following errors: "+s.join("\n"));l.forEach(function(e,r){Object.keys(e).forEach(function(n){e[n]=i._driver.computeStyle(r,n,t.AUTO_STYLE)})});var p=a.map(function(e){var t=l.get(e.element);return i._buildPlayer(e,{},t)}),h=o(p);return this._playersById[e]=h,h.onDestroy(function(){return i.destroy(e)}),this.players.push(h),h},e.prototype.destroy=function(e){var t=this._getPlayer(e);t.destroy(),delete this._playersById[e];var r=this.players.indexOf(t);r>=0&&this.players.splice(r,1)},e.prototype._getPlayer=function(e){var t=this._playersById[e];if(!t)throw new Error("Unable to find the timeline player referenced by "+e);return t},e.prototype.listen=function(e,t,r,n){var i=l(t,"","","");return s(this._getPlayer(e),r,i,n),function(){}},e.prototype.command=function(e,t,r,n){if("register"!=r)if("create"!=r){var i=this._getPlayer(e);switch(r){case"play":i.play();break;case"pause":i.pause();break;case"reset":i.reset();break;case"restart":i.restart();break;case"finish":i.finish();break;case"init":i.init();break;case"setPosition":i.setPosition(parseFloat(n[0]));break;case"destroy":this.destroy(e)}}else{var o=n[0]||{};this.create(e,t,o)}else this.register(e,n[0])},e}(),Ae=[],Oe={namespaceId:"",setForRemoval:null,hasAnimation:!1,removedBeforeQueried:!1},Le={namespaceId:"",setForRemoval:null,hasAnimation:!1,removedBeforeQueried:!0},De="__ng_removed",Ie=function(){function e(e,t){void 0===t&&(t=""),this.namespaceId=t;var r=e&&e.hasOwnProperty("value"),n=r?e.value:e;if(this.value=function(e){return null!=e?e:null}(n),r){var i=L(e);delete i.value,this.options=i}else this.options={};this.options.params||(this.options.params={})}return Object.defineProperty(e.prototype,"params",{get:function(){return this.options.params},enumerable:!0,configurable:!0}),e.prototype.absorbOptions=function(e){var t=e.params;if(t){var r=this.options.params;Object.keys(t).forEach(function(e){null==r[e]&&(r[e]=t[e])})}},e}(),Me=new Ie("void"),Pe=new Ie("DELETED"),qe=function(){function e(e,t,r){this.id=e,this.hostElement=t,this._engine=r,this.players=[],this._triggers={},this._queue=[],this._elementListeners=new Map,this._hostClassName="ng-tns-"+e,We(t,this._hostClassName)}return e.prototype.listen=function(e,t,r,n){var i,o=this;if(!this._triggers.hasOwnProperty(t))throw new Error('Unable to listen on the animation trigger event "'+r+'" because the animation trigger "'+t+"\" doesn't exist!");if(null==r||0==r.length)throw new Error('Unable to listen on the animation trigger "'+t+'" because the provided event is undefined!');if("start"!=(i=r)&&"done"!=i)throw new Error('The provided animation trigger event "'+r+'" for the animation trigger "'+t+'" is not supported!');var a=u(this._elementListeners,e,[]),s={name:t,phase:r,callback:n};a.push(s);var c=u(this._engine.statesByElement,e,{});return c.hasOwnProperty(t)||(We(e,"ng-trigger"),We(e,"ng-trigger-"+t),c[t]=Me),function(){o._engine.afterFlush(function(){var e=a.indexOf(s);e>=0&&a.splice(e,1),o._triggers[t]||delete c[t]})}},e.prototype.register=function(e,t){return!this._triggers[e]&&(this._triggers[e]=t,!0)},e.prototype._getTrigger=function(e){var t=this._triggers[e];if(!t)throw new Error('The provided animation trigger "'+e+'" has not been registered!');return t},e.prototype.trigger=function(e,t,r,n){var i=this;void 0===n&&(n=!0);var o=this._getTrigger(t),a=new Be(this.id,t,e),s=this._engine.statesByElement.get(e);s||(We(e,"ng-trigger"),We(e,"ng-trigger-"+t),this._engine.statesByElement.set(e,s={}));var c=s[t],l=new Ie(r,this.id),p=r&&r.hasOwnProperty("value");if(!p&&c&&l.absorbOptions(c.options),s[t]=l,c){if(c===Pe)return a}else c=Me;var h="void"===l.value;if(h||c.value!==l.value){var f=u(this._engine.playersByElement,e,[]);f.forEach(function(e){e.namespaceId==i.id&&e.triggerName==t&&e.queued&&e.destroy()});var d=o.matchTransition(c.value,l.value),m=!1;if(!d){if(!n)return;d=o.fallbackTransition,m=!0}return this._engine.totalQueuedPlayers++,this._queue.push({element:e,triggerName:t,transition:d,fromState:c,toState:l,player:a,isFallbackTransition:m}),m||(We(e,"ng-animate-queued"),a.onStart(function(){Ge(e,"ng-animate-queued")})),a.onDone(function(){var t=i.players.indexOf(a);t>=0&&i.players.splice(t,1);var r=i._engine.playersByElement.get(e);if(r){var n=r.indexOf(a);n>=0&&r.splice(n,1)}}),this.players.push(a),f.push(a),a}if(!function(e,t){var r=Object.keys(e),n=Object.keys(t);if(r.length!=n.length)return!1;for(var i=0;i<r.length;i++){var o=r[i];if(!t.hasOwnProperty(o)||e[o]!==t[o])return!1}return!0}(c.params,l.params)){var g=[],y=o.matchStyles(c.value,c.params,g),v=o.matchStyles(l.value,l.params,g);g.length?this._engine.reportError(g):this._engine.afterFlush(function(){P(e,y),M(e,v)})}},e.prototype.deregister=function(e){var t=this;delete this._triggers[e],this._engine.statesByElement.forEach(function(t,r){delete t[e]}),this._elementListeners.forEach(function(r,n){t._elementListeners.set(n,r.filter(function(t){return t.name!=e}))})},e.prototype.clearElementCache=function(e){this._engine.statesByElement.delete(e),this._elementListeners.delete(e);var t=this._engine.playersByElement.get(e);t&&(t.forEach(function(e){return e.destroy()}),this._engine.playersByElement.delete(e))},e.prototype._signalRemovalForInnerTriggers=function(e,t,r){var n=this;void 0===r&&(r=!1),this._engine.driver.query(e,N,!0).forEach(function(e){if(!e[De]){var r=n._engine.fetchNamespacesByElement(e);r.size?r.forEach(function(r){return r.triggerLeaveAnimation(e,t,!1,!0)}):n.clearElementCache(e)}})},e.prototype.triggerLeaveAnimation=function(e,t,r,n){var i=this,a=this._engine.statesByElement.get(e);if(a){var s=[];if(Object.keys(a).forEach(function(t){if(i._triggers[t]){var r=i.trigger(e,t,"void",n);r&&s.push(r)}}),s.length)return this._engine.markElementAsRemoved(this.id,e,!0,t),r&&o(s).onDone(function(){return i._engine.processLeaveNode(e)}),!0}return!1},e.prototype.prepareLeaveAnimationListeners=function(e){var t=this,r=this._elementListeners.get(e);if(r){var n=new Set;r.forEach(function(r){var i=r.name;if(!n.has(i)){n.add(i);var o=t._triggers[i],a=o.fallbackTransition,s=t._engine.statesByElement.get(e),c=s[i]||Me,l=new Ie("void"),u=new Be(t.id,i,e);t._engine.totalQueuedPlayers++,t._queue.push({element:e,triggerName:i,transition:a,fromState:c,toState:l,player:u,isFallbackTransition:!0})}})}},e.prototype.removeNode=function(e,t){var r=this,n=this._engine;if(e.childElementCount&&this._signalRemovalForInnerTriggers(e,t,!0),!this.triggerLeaveAnimation(e,t,!0)){var i=!1;if(n.totalAnimations){var o=n.players.length?n.playersByQueriedElement.get(e):[];if(o&&o.length)i=!0;else for(var a=e;a=a.parentNode;){var s=n.statesByElement.get(a);if(s){i=!0;break}}}this.prepareLeaveAnimationListeners(e),i?n.markElementAsRemoved(this.id,e,!1,t):(n.afterFlush(function(){return r.clearElementCache(e)}),n.destroyInnerAnimations(e),n._onRemovalComplete(e,t))}},e.prototype.insertNode=function(e,t){We(e,this._hostClassName)},e.prototype.drainQueuedTransitions=function(e){var t=this,r=[];return this._queue.forEach(function(n){var i=n.player;if(!i.destroyed){var o=n.element,a=t._elementListeners.get(o);a&&a.forEach(function(t){if(t.name==n.triggerName){var r=l(o,n.triggerName,n.fromState.value,n.toState.value);r._data=e,s(n.player,t.phase,r,t.callback)}}),i.markedForDestroy?t._engine.afterFlush(function(){i.destroy()}):r.push(n)}}),this._queue=[],r.sort(function(e,r){var n=e.transition.ast.depCount,i=r.transition.ast.depCount;return 0==n||0==i?n-i:t._engine.driver.containsElement(e.element,r.element)?1:-1})},e.prototype.destroy=function(e){this.players.forEach(function(e){return e.destroy()}),this._signalRemovalForInnerTriggers(this.hostElement,e)},e.prototype.elementContainsData=function(e){var t=!1;return this._elementListeners.has(e)&&(t=!0),t=!!this._queue.find(function(t){return t.element===e})||t},e}(),He=function(){function e(e,t){this.driver=e,this._normalizer=t,this.players=[],this.newHostElements=new Map,this.playersByElement=new Map,this.playersByQueriedElement=new Map,this.statesByElement=new Map,this.disabledNodes=new Set,this.totalAnimations=0,this.totalQueuedPlayers=0,this._namespaceLookup={},this._namespaceList=[],this._flushFns=[],this._whenQuietFns=[],this.namespacesByHostElement=new Map,this.collectedEnterElements=[],this.collectedLeaveElements=[],this.onRemovalComplete=function(e,t){}}return e.prototype._onRemovalComplete=function(e,t){this.onRemovalComplete(e,t)},Object.defineProperty(e.prototype,"queuedPlayers",{get:function(){var e=[];return this._namespaceList.forEach(function(t){t.players.forEach(function(t){t.queued&&e.push(t)})}),e},enumerable:!0,configurable:!0}),e.prototype.createNamespace=function(e,t){var r=new qe(e,t,this);return t.parentNode?this._balanceNamespaceList(r,t):(this.newHostElements.set(t,r),this.collectEnterElement(t)),this._namespaceLookup[e]=r},e.prototype._balanceNamespaceList=function(e,t){var r=this._namespaceList.length-1;if(r>=0){for(var n=!1,i=r;i>=0;i--){var o=this._namespaceList[i];if(this.driver.containsElement(o.hostElement,t)){this._namespaceList.splice(i+1,0,e),n=!0;break}}n||this._namespaceList.splice(0,0,e)}else this._namespaceList.push(e);return this.namespacesByHostElement.set(t,e),e},e.prototype.register=function(e,t){var r=this._namespaceLookup[e];return r||(r=this.createNamespace(e,t)),r},e.prototype.registerTrigger=function(e,t,r){var n=this._namespaceLookup[e];n&&n.register(t,r)&&this.totalAnimations++},e.prototype.destroy=function(e,t){var r=this;if(e){var n=this._fetchNamespace(e);this.afterFlush(function(){r.namespacesByHostElement.delete(n.hostElement),delete r._namespaceLookup[e];var t=r._namespaceList.indexOf(n);t>=0&&r._namespaceList.splice(t,1)}),this.afterFlushAnimationsDone(function(){return n.destroy(t)})}},e.prototype._fetchNamespace=function(e){return this._namespaceLookup[e]},e.prototype.fetchNamespacesByElement=function(e){var t=new Set,r=this.statesByElement.get(e);if(r)for(var n=Object.keys(r),i=0;i<n.length;i++){var o=r[n[i]].namespaceId;if(o){var a=this._fetchNamespace(o);a&&t.add(a)}}return t},e.prototype.trigger=function(e,t,r,n){return!!je(t)&&(this._fetchNamespace(e).trigger(t,r,n),!0)},e.prototype.insertNode=function(e,t,r,n){if(je(t)){var i=t[De];if(i&&i.setForRemoval&&(i.setForRemoval=!1),e){var o=this._fetchNamespace(e);o&&o.insertNode(t,r)}n&&this.collectEnterElement(t)}},e.prototype.collectEnterElement=function(e){this.collectedEnterElements.push(e)},e.prototype.markElementAsDisabled=function(e,t){t?this.disabledNodes.has(e)||(this.disabledNodes.add(e),We(e,"ng-animate-disabled")):this.disabledNodes.has(e)&&(this.disabledNodes.delete(e),Ge(e,"ng-animate-disabled"))},e.prototype.removeNode=function(e,t,r){if(je(t)){var n=e?this._fetchNamespace(e):null;n?n.removeNode(t,r):this.markElementAsRemoved(e,t,!1,r)}else this._onRemovalComplete(t,r)},e.prototype.markElementAsRemoved=function(e,t,r,n){this.collectedLeaveElements.push(t),t[De]={namespaceId:e,setForRemoval:n,hasAnimation:r,removedBeforeQueried:!1}},e.prototype.listen=function(e,t,r,n,i){return je(t)?this._fetchNamespace(e).listen(t,r,n,i):function(){}},e.prototype._buildInstruction=function(e,t,r,n){return e.transition.build(this.driver,e.element,e.fromState.value,e.toState.value,r,n,e.fromState.options,e.toState.options,t)},e.prototype.destroyInnerAnimations=function(e){var t=this,r=this.driver.query(e,N,!0);r.forEach(function(e){return t.destroyActiveAnimationsForElement(e)}),0!=this.playersByQueriedElement.size&&(r=this.driver.query(e,R,!0)).forEach(function(e){return t.finishActiveQueriedAnimationOnElement(e)})},e.prototype.destroyActiveAnimationsForElement=function(e){var t=this.playersByElement.get(e);t&&t.forEach(function(e){e.queued?e.markedForDestroy=!0:e.destroy()});var r=this.statesByElement.get(e);r&&Object.keys(r).forEach(function(e){return r[e]=Pe})},e.prototype.finishActiveQueriedAnimationOnElement=function(e){var t=this.playersByQueriedElement.get(e);t&&t.forEach(function(e){return e.finish()})},e.prototype.whenRenderingDone=function(){var e=this;return new Promise(function(t){if(e.players.length)return o(e.players).onDone(function(){return t()});t()})},e.prototype.processLeaveNode=function(e){var t=this,r=e[De];if(r&&r.setForRemoval){if(e[De]=Oe,r.namespaceId){this.destroyInnerAnimations(e);var n=this._fetchNamespace(r.namespaceId);n&&n.clearElementCache(e)}this._onRemovalComplete(e,r.setForRemoval)}this.driver.matchesElement(e,".ng-animate-disabled")&&this.markElementAsDisabled(e,!1),this.driver.query(e,".ng-animate-disabled",!0).forEach(function(r){t.markElementAsDisabled(e,!1)})},e.prototype.flush=function(e){var t=this;void 0===e&&(e=-1);var r=[];if(this.newHostElements.size&&(this.newHostElements.forEach(function(e,r){return t._balanceNamespaceList(e,r)}),this.newHostElements.clear()),this.totalAnimations&&this.collectedEnterElements.length)for(var n=0;n<this.collectedEnterElements.length;n++){var i=this.collectedEnterElements[n];We(i,"ng-star-inserted")}if(this._namespaceList.length&&(this.totalQueuedPlayers||this.collectedLeaveElements.length)){var a=[];try{r=this._flushAnimations(a,e)}finally{for(var n=0;n<a.length;n++)a[n]()}}else for(var n=0;n<this.collectedLeaveElements.length;n++){var s=this.collectedLeaveElements[n];this.processLeaveNode(s)}if(this.totalQueuedPlayers=0,this.collectedEnterElements.length=0,this.collectedLeaveElements.length=0,this._flushFns.forEach(function(e){return e()}),this._flushFns=[],this._whenQuietFns.length){var c=this._whenQuietFns;this._whenQuietFns=[],r.length?o(r).onDone(function(){c.forEach(function(e){return e()})}):c.forEach(function(e){return e()})}},e.prototype.reportError=function(e){throw new Error("Unable to process animations due to the following failed trigger transitions\n "+e.join("\n"))},e.prototype._flushAnimations=function(e,r){var n=this,a=new oe,s=[],c=new Map,l=[],p=new Map,h=new Map,f=new Map,d=new Set;this.disabledNodes.forEach(function(e){d.add(e);for(var t=n.driver.query(e,".ng-animate-queued",!0),r=0;r<t.length;r++)d.add(t[r])});var m=_(),g=Array.from(this.statesByElement.keys()),y=ze(g,this.collectedEnterElements),v=new Map,b=0;y.forEach(function(e,t){var r="ng-enter"+b++;v.set(t,r),e.forEach(function(e){return We(e,r)})});for(var E=[],w=new Set,T=new Set,S=0;S<this.collectedLeaveElements.length;S++){var k=this.collectedLeaveElements[S],x=k[De];x&&x.setForRemoval&&(E.push(k),w.add(k),x.hasAnimation?this.driver.query(k,".ng-star-inserted",!0).forEach(function(e){return w.add(e)}):T.add(k))}var N=new Map,C=ze(g,Array.from(w));C.forEach(function(e,t){var r="ng-leave"+b++;N.set(t,r),e.forEach(function(e){return We(e,r)})}),e.push(function(){y.forEach(function(e,t){var r=v.get(t);e.forEach(function(e){return Ge(e,r)})}),C.forEach(function(e,t){var r=N.get(t);e.forEach(function(e){return Ge(e,r)})}),E.forEach(function(e){n.processLeaveNode(e)})});for(var A=[],O=[],L=this._namespaceList.length-1;L>=0;L--){var D=this._namespaceList[L];D.drainQueuedTransitions(r).forEach(function(e){var t=e.player;A.push(t);var r=e.element;if(m&&n.driver.containsElement(m,r)){var i=N.get(r),o=v.get(r),c=n._buildInstruction(e,a,o,i);if(c.errors&&c.errors.length)O.push(c);else{if(e.isFallbackTransition)return t.onStart(function(){return P(r,c.fromStyles)}),t.onDestroy(function(){return M(r,c.toStyles)}),void s.push(t);c.timelines.forEach(function(e){return e.stretchStartingKeyframe=!0}),a.append(r,c.timelines);var d={instruction:c,player:t,element:r};l.push(d),c.queriedElements.forEach(function(e){return u(p,e,[]).push(t)}),c.preStyleProps.forEach(function(e,t){var r=Object.keys(e);if(r.length){var n=h.get(t);n||h.set(t,n=new Set),r.forEach(function(e){return n.add(e)})}}),c.postStyleProps.forEach(function(e,t){var r=Object.keys(e),n=f.get(t);n||f.set(t,n=new Set),r.forEach(function(e){return n.add(e)})})}}else t.destroy()})}if(O.length){var I=[];O.forEach(function(e){I.push("@"+e.triggerName+" has failed due to:\n"),e.errors.forEach(function(e){return I.push("- "+e+"\n")})}),A.forEach(function(e){return e.destroy()}),this.reportError(I)}var q=new Map,H=new Map;l.forEach(function(e){var t=e.element;a.has(t)&&(H.set(t,t),n._beforeAnimationBuild(e.player.namespaceId,e.instruction,q))}),s.forEach(function(e){var t=e.element,r=n._getPreviousPlayers(t,!1,e.namespaceId,e.triggerName,null);r.forEach(function(e){u(q,t,[]).push(e),e.destroy()})});var B=E.filter(function(e){return Ke(e,h,f)}),j=new Map,F=Ue(j,this.driver,T,f,t.AUTO_STYLE);F.forEach(function(e){Ke(e,h,f)&&B.push(e)});var U=new Map;y.forEach(function(e,r){Ue(U,n.driver,new Set(e),h,t.ɵPRE_STYLE)}),B.forEach(function(e){var t=j.get(e),r=U.get(e);j.set(e,i({},t,r))});var z=[],V=[],W={};l.forEach(function(e){var t=e.element,r=e.player,i=e.instruction;if(a.has(t)){if(d.has(t))return r.onDestroy(function(){return M(t,i.toStyles)}),void s.push(r);var l=W;if(H.size>1){for(var u=t,p=[];u=u.parentNode;){var h=H.get(u);if(h){l=h;break}p.push(u)}p.forEach(function(e){return H.set(e,l)})}var f=n._buildAnimation(r.namespaceId,i,q,c,U,j);if(r.setRealPlayer(f),l===W)z.push(r);else{var m=n.playersByElement.get(l);m&&m.length&&(r.parentPlayer=o(m)),s.push(r)}}else P(t,i.fromStyles),r.onDestroy(function(){return M(t,i.toStyles)}),V.push(r),d.has(t)&&s.push(r)}),V.forEach(function(e){var t=c.get(e.element);if(t&&t.length){var r=o(t);e.setRealPlayer(r)}}),s.forEach(function(e){e.parentPlayer?e.syncPlayerEvents(e.parentPlayer):e.destroy()});for(var G=0;G<E.length;G++){var k=E[G],x=k[De];if(Ge(k,"ng-leave"),!x||!x.hasAnimation){var Y=[];if(p.size){var K=p.get(k);K&&K.length&&Y.push.apply(Y,K);for(var Q=this.driver.query(k,R,!0),$=0;$<Q.length;$++){var X=p.get(Q[$]);X&&X.length&&Y.push.apply(Y,X)}}var Z=Y.filter(function(e){return!e.destroyed});Z.length?Ye(this,k,Z):this.processLeaveNode(k)}}return E.length=0,z.forEach(function(e){n.players.push(e),e.onDone(function(){e.destroy();var t=n.players.indexOf(e);n.players.splice(t,1)}),e.play()}),z},e.prototype.elementContainsData=function(e,t){var r=!1,n=t[De];return n&&n.setForRemoval&&(r=!0),this.playersByElement.has(t)&&(r=!0),this.playersByQueriedElement.has(t)&&(r=!0),this.statesByElement.has(t)&&(r=!0),this._fetchNamespace(e).elementContainsData(t)||r},e.prototype.afterFlush=function(e){this._flushFns.push(e)},e.prototype.afterFlushAnimationsDone=function(e){this._whenQuietFns.push(e)},e.prototype._getPreviousPlayers=function(e,t,r,n,i){var o=[];if(t){var a=this.playersByQueriedElement.get(e);a&&(o=a)}else{var s=this.playersByElement.get(e);if(s){var c=!i||"void"==i;s.forEach(function(e){e.queued||(c||e.triggerName==n)&&o.push(e)})}}return(r||n)&&(o=o.filter(function(e){return!(r&&r!=e.namespaceId||n&&n!=e.triggerName)})),o},e.prototype._beforeAnimationBuild=function(e,t,r){for(var n=t.triggerName,i=t.element,o=t.isRemovalTransition?void 0:e,a=t.isRemovalTransition?void 0:n,s=function(e){var n=e.element,s=n!==i,l=u(r,n,[]),p=c._getPreviousPlayers(n,s,o,a,t.toState);p.forEach(function(e){var t=e.getRealPlayer();t.beforeDestroy&&t.beforeDestroy(),e.destroy(),l.push(e)})},c=this,l=0,p=t.timelines;l<p.length;l++){var h=p[l];s(h)}P(i,t.fromStyles)},e.prototype._buildAnimation=function(e,r,n,i,s,c){var l=this,p=r.triggerName,h=r.element,f=[],d=new Set,m=new Set,g=r.timelines.map(function(r){var o=r.element;d.add(o);var u=o[De];if(u&&u.removedBeforeQueried)return new t.NoopAnimationPlayer;var g,y,v=o!==h,b=(g=(n.get(o)||Ae).map(function(e){return e.getRealPlayer()}),y=[],function e(r,n){for(var i=0;i<r.length;i++){var o=r[i];o instanceof t.ɵAnimationGroupPlayer?e(o.players,n):n.push(o)}}(g,y),y).filter(function(e){var t=e;return!!t.element&&t.element===o}),_=s.get(o),E=c.get(o),w=a(l.driver,l._normalizer,0,r.keyframes,_,E),T=l._buildPlayer(r,w,b);if(r.subTimeline&&i&&m.add(o),v){var S=new Be(e,p,o);S.setRealPlayer(T),f.push(S)}return T});f.forEach(function(e){u(l.playersByQueriedElement,e.element,[]).push(e),e.onDone(function(){return function(e,t,r){var n;if(e instanceof Map){if(n=e.get(t)){if(n.length){var i=n.indexOf(r);n.splice(i,1)}0==n.length&&e.delete(t)}}else if(n=e[t]){if(n.length){var i=n.indexOf(r);n.splice(i,1)}0==n.length&&delete e[t]}return n}(l.playersByQueriedElement,e.element,e)})}),d.forEach(function(e){return We(e,"ng-animating")});var y=o(g);return y.onDestroy(function(){d.forEach(function(e){return Ge(e,"ng-animating")}),M(h,r.toStyles)}),m.forEach(function(e){u(i,e,[]).push(y)}),y},e.prototype._buildPlayer=function(e,r,n){return r.length>0?this.driver.animate(e.element,r,e.duration,e.delay,e.easing,n):new t.NoopAnimationPlayer},e}(),Be=function(){function e(e,r,n){this.namespaceId=e,this.triggerName=r,this.element=n,this._player=new t.NoopAnimationPlayer,this._containsRealPlayer=!1,this._queuedCallbacks={},this.destroyed=!1,this.markedForDestroy=!1,this.queued=!0}return e.prototype.setRealPlayer=function(e){var t=this;this._containsRealPlayer||(this._player=e,Object.keys(this._queuedCallbacks).forEach(function(r){t._queuedCallbacks[r].forEach(function(t){return s(e,r,void 0,t)})}),this._queuedCallbacks={},this._containsRealPlayer=!0,this.queued=!1)},e.prototype.getRealPlayer=function(){return this._player},e.prototype.syncPlayerEvents=function(e){var t=this,r=this._player;r.triggerCallback&&e.onStart(function(){return r.triggerCallback("start")}),e.onDone(function(){return t.finish()}),e.onDestroy(function(){return t.destroy()})},e.prototype._queueEvent=function(e,t){u(this._queuedCallbacks,e,[]).push(t)},e.prototype.onDone=function(e){this.queued&&this._queueEvent("done",e),this._player.onDone(e)},e.prototype.onStart=function(e){this.queued&&this._queueEvent("start",e),this._player.onStart(e)},e.prototype.onDestroy=function(e){this.queued&&this._queueEvent("destroy",e),this._player.onDestroy(e)},e.prototype.init=function(){this._player.init()},e.prototype.hasStarted=function(){return!this.queued&&this._player.hasStarted()},e.prototype.play=function(){!this.queued&&this._player.play()},e.prototype.pause=function(){!this.queued&&this._player.pause()},e.prototype.restart=function(){!this.queued&&this._player.restart()},e.prototype.finish=function(){this._player.finish()},e.prototype.destroy=function(){this.destroyed=!0,this._player.destroy()},e.prototype.reset=function(){!this.queued&&this._player.reset()},e.prototype.setPosition=function(e){this.queued||this._player.setPosition(e)},e.prototype.getPosition=function(){return this.queued?0:this._player.getPosition()},Object.defineProperty(e.prototype,"totalTime",{get:function(){return this._player.totalTime},enumerable:!0,configurable:!0}),e.prototype.triggerCallback=function(e){var t=this._player;t.triggerCallback&&t.triggerCallback(e)},e}();function je(e){return e&&1===e.nodeType}function Fe(e,t){var r=e.style.display;return e.style.display=null!=t?t:"none",r}function Ue(e,t,r,n,i){var o=[];r.forEach(function(e){return o.push(Fe(e))});var a=[];n.forEach(function(r,n){var o={};r.forEach(function(e){var r=o[e]=t.computeStyle(n,e,i);r&&0!=r.length||(n[De]=Le,a.push(n))}),e.set(n,o)});var s=0;return r.forEach(function(e){return Fe(e,o[s++])}),a}function ze(e,t){var r=new Map;if(e.forEach(function(e){return r.set(e,[])}),0==t.length)return r;var n=1,i=new Set(t),o=new Map;return t.forEach(function(e){var t=function e(t){if(!t)return n;var a=o.get(t);if(a)return a;var s=t.parentNode;return a=r.has(s)?s:i.has(s)?n:e(s),o.set(t,a),a}(e);t!==n&&r.get(t).push(e)}),r}var Ve="$$classes";function We(e,t){if(e.classList)e.classList.add(t);else{var r=e[Ve];r||(r=e[Ve]={}),r[t]=!0}}function Ge(e,t){if(e.classList)e.classList.remove(t);else{var r=e[Ve];r&&delete r[t]}}function Ye(e,t,r){o(r).onDone(function(){return e.processLeaveNode(t)})}function Ke(e,t,r){var n=r.get(e);if(!n)return!1;var i=t.get(e);return i?n.forEach(function(e){return i.add(e)}):t.set(e,n),r.delete(e),!0}var Qe=function(){function e(e,t){var r=this;this._driver=e,this._triggerCache={},this.onRemovalComplete=function(e,t){},this._transitionEngine=new He(e,t),this._timelineEngine=new Ce(e,t),this._transitionEngine.onRemovalComplete=function(e,t){return r.onRemovalComplete(e,t)}}return e.prototype.registerTrigger=function(e,t,r,n,i){var o=e+"-"+n,a=this._triggerCache[o];if(!a){var s=[],c=Z(this._driver,i,s);if(s.length)throw new Error('The animation trigger "'+n+'" has failed to build due to the following errors:\n - '+s.join("\n - "));a=function(e,t){return new xe(e,t)}(n,c),this._triggerCache[o]=a}this._transitionEngine.registerTrigger(t,n,a)},e.prototype.register=function(e,t){this._transitionEngine.register(e,t)},e.prototype.destroy=function(e,t){this._transitionEngine.destroy(e,t)},e.prototype.onInsert=function(e,t,r,n){this._transitionEngine.insertNode(e,t,r,n)},e.prototype.onRemove=function(e,t,r){this._transitionEngine.removeNode(e,t,r)},e.prototype.disableAnimations=function(e,t){this._transitionEngine.markElementAsDisabled(e,t)},e.prototype.process=function(e,t,r,n){if("@"==r.charAt(0)){var i=p(r),o=i[0],a=i[1],s=n;this._timelineEngine.command(o,t,a,s)}else this._transitionEngine.trigger(e,t,r,n)},e.prototype.listen=function(e,t,r,n,i){if("@"==r.charAt(0)){var o=p(r),a=o[0],s=o[1];return this._timelineEngine.listen(a,t,s,i)}return this._transitionEngine.listen(e,t,r,n,i)},e.prototype.flush=function(e){void 0===e&&(e=-1),this._transitionEngine.flush(e)},Object.defineProperty(e.prototype,"players",{get:function(){return this._transitionEngine.players.concat(this._timelineEngine.players)},enumerable:!0,configurable:!0}),e.prototype.whenRenderingDone=function(){return this._transitionEngine.whenRenderingDone()},e}(),$e=function(){function e(e,t,r,n){void 0===n&&(n=[]);var i,o,a=this;this.element=e,this.keyframes=t,this.options=r,this.previousPlayers=n,this._onDoneFns=[],this._onStartFns=[],this._onDestroyFns=[],this._initialized=!1,this._finished=!1,this._started=!1,this._destroyed=!1,this.time=0,this.parentPlayer=null,this.previousStyles={},this.currentSnapshot={},this._duration=r.duration,this._delay=r.delay||0,this.time=this._duration+this._delay,i=this._duration,o=this._delay,(0===i||0===o)&&n.forEach(function(e){var t=e.currentSnapshot;Object.keys(t).forEach(function(e){return a.previousStyles[e]=t[e]})})}return e.prototype._onFinish=function(){this._finished||(this._finished=!0,this._onDoneFns.forEach(function(e){return e()}),this._onDoneFns=[])},e.prototype.init=function(){this._buildPlayer(),this._preparePlayerBeforeStart()},e.prototype._buildPlayer=function(){var e=this;if(!this._initialized){this._initialized=!0;var t=this.keyframes.map(function(e){return I(e,!1)}),r=Object.keys(this.previousStyles);if(r.length&&t.length){var n=t[0],i=[];if(r.forEach(function(t){n.hasOwnProperty(t)||i.push(t),n[t]=e.previousStyles[t]}),i.length)for(var o=this,a=function(){var e=t[s];i.forEach(function(t){e[t]=Xe(o.element,t)})},s=1;s<t.length;s++)a()}this.domPlayer=this._triggerWebAnimation(this.element,t,this.options),this._finalKeyframe=t.length?t[t.length-1]:{},this.domPlayer.addEventListener("finish",function(){return e._onFinish()})}},e.prototype._preparePlayerBeforeStart=function(){this._delay?this._resetDomPlayerState():this.domPlayer.pause()},e.prototype._triggerWebAnimation=function(e,t,r){return e.animate(t,r)},e.prototype.onStart=function(e){this._onStartFns.push(e)},e.prototype.onDone=function(e){this._onDoneFns.push(e)},e.prototype.onDestroy=function(e){this._onDestroyFns.push(e)},e.prototype.play=function(){this._buildPlayer(),this.hasStarted()||(this._onStartFns.forEach(function(e){return e()}),this._onStartFns=[],this._started=!0),this.domPlayer.play()},e.prototype.pause=function(){this.init(),this.domPlayer.pause()},e.prototype.finish=function(){this.init(),this._onFinish(),this.domPlayer.finish()},e.prototype.reset=function(){this._resetDomPlayerState(),this._destroyed=!1,this._finished=!1,this._started=!1},e.prototype._resetDomPlayerState=function(){this.domPlayer&&this.domPlayer.cancel()},e.prototype.restart=function(){this.reset(),this.play()},e.prototype.hasStarted=function(){return this._started},e.prototype.destroy=function(){this._destroyed||(this._destroyed=!0,this._resetDomPlayerState(),this._onFinish(),this._onDestroyFns.forEach(function(e){return e()}),this._onDestroyFns=[])},e.prototype.setPosition=function(e){this.domPlayer.currentTime=e*this.time},e.prototype.getPosition=function(){return this.domPlayer.currentTime/this.time},Object.defineProperty(e.prototype,"totalTime",{get:function(){return this._delay+this._duration},enumerable:!0,configurable:!0}),e.prototype.beforeDestroy=function(){var e=this,t={};this.hasStarted()&&Object.keys(this._finalKeyframe).forEach(function(r){"offset"!=r&&(t[r]=e._finished?e._finalKeyframe[r]:Xe(e.element,r))}),this.currentSnapshot=t},e.prototype.triggerCallback=function(e){var t="start"==e?this._onStartFns:this._onDoneFns;t.forEach(function(e){return e()}),t.length=0},e}();function Xe(e,t){return window.getComputedStyle(e)[t]}var Ze=function(){function e(){}return e.prototype.validateStyleProperty=function(e){return b(e)},e.prototype.matchesElement=function(e,t){return E(e,t)},e.prototype.containsElement=function(e,t){return w(e,t)},e.prototype.query=function(e,t,r){return T(e,t,r)},e.prototype.computeStyle=function(e,t,r){return window.getComputedStyle(e)[t]},e.prototype.animate=function(e,t,r,n,i,o){void 0===o&&(o=[]);var a=0==n?"both":"forwards",s={duration:r,delay:n,fill:a};i&&(s.easing=i);var c=o.filter(function(e){return e instanceof $e});return new $e(e,t,s,c)},e}();e.AnimationDriver=k,e.ɵAnimation=ye,e.ɵAnimationStyleNormalizer=ve,e.ɵNoopAnimationStyleNormalizer=be,e.ɵWebAnimationsStyleNormalizer=_e,e.ɵNoopAnimationDriver=S,e.ɵAnimationEngine=Qe,e.ɵWebAnimationsDriver=Ze,e.ɵsupportsWebAnimations=function(){return"undefined"!=typeof Element&&"function"==typeof Element.prototype.animate},e.ɵWebAnimationsPlayer=$e,Object.defineProperty(e,"__esModule",{value:!0})}(t,r(53))},function(e,t,r){e.exports=r(2)(83)},function(e,t,r){e.exports=r(2)(41)},function(e,t,r){"use strict";r.r(t);r(118),r(117),r(116);var n=r(19),i=r(0),o=r(9),a=r(56),s=r(18),c=r(1),l=r(8),u=r(13),p=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},h=function(){function e(){}return e.prototype.ngOnInit=function(){},e=p([Object(i.Component)({selector:"app",template:r(94),styles:[r(93)]})],e)}(),f=r(7),d=function(){function e(){this.recipesChanged=new f.Subject,this.recipes=[]}return e.prototype.getRecipes=function(){return this.recipes?this.recipes.slice():this.recipes},e.prototype.getRecipe=function(e){return this.recipes[e]},e.prototype.addRecipe=function(e){this.recipes.push(e),this.recipesChanged.next(this.recipes.slice())},e.prototype.updateRecipe=function(e,t){this.recipes[e]=t,this.recipesChanged.next(this.recipes.slice())},e.prototype.deleteRecipe=function(e){this.recipes.splice(e,1),this.recipesChanged.next(this.recipes.slice())},e.prototype.fetchRecipes=function(e){this.recipes=e,this.recipesChanged.next(this.recipes.slice())},e}(),m=(r(91),function(){function e(){this.ingredientsChanged=new f.Subject,this.startedEditing=new f.Subject,this.ingredients=[]}return e.prototype.getIngredients=function(){return this.ingredients?this.ingredients.slice():this.ingredients},e.prototype.addIngredient=function(e){e.id=this.ingredients.length+1,this.ingredients.push(e),this.ingredientsChanged.next(this.ingredients.slice())},e.prototype.deleteIngredient=function(e){var t=this.ingredients.find(function(t){return t.id===e});this.ingredients.splice(this.ingredients.indexOf(t),1),this.ingredientsChanged.next(this.ingredients.slice())},e.prototype.clearIngredients=function(){this.ingredients=[],this.ingredientsChanged.next(this.ingredients.slice())},e.prototype.addMultipleIngredients=function(e){var t;(t=this.ingredients).push.apply(t,e),this.ingredientsChanged.next(this.ingredients.slice())},e.prototype.fetchIngredients=function(e){this.ingredients=e,this.ingredientsChanged.next(this.ingredients.slice())},e.prototype.getIngredientById=function(e){return this.ingredients.find(function(t){return t.id===e})},e.prototype.updateIngredient=function(e){var t=this.ingredients.find(function(t){return t.id===e.id});t&&(t.name=e.name,t.amount=e.amount,this.ingredientsChanged.next(this.ingredients.slice()))},e}()),g=r(4),y=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},v=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},b=function(){function e(e,t){this.http=e,this.router=t,this.URL="http://surveygenwebapi.azurewebsites.net/api"}return e.prototype.signupUser=function(e,t){var r={email:e,password:t};this.http.post(this.URL+"/signup",r).subscribe(function(e){console.log(e)},function(e){console.log(e)})},e.prototype.signInUser=function(e,t){var r=this,n={email:e,password:t};localStorage.removeItem("currentUser"),this.http.post(this.URL+"/login",n).subscribe(function(e){var t=e.json().token;localStorage.setItem("currentUser",t),r.router.navigate(["/home/recipes"])},function(e){console.log(e)})},e.prototype.logout=function(){localStorage.removeItem("currentUser"),this.router.navigate([""])},e.prototype.getToken=function(){return localStorage.getItem("currentUser")},e.prototype.isAuthenticated=function(){return null!=localStorage.getItem("currentUser")},e=y([Object(i.Injectable)(),v("design:paramtypes",[u.Http,g.Router])],e)}(),_=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},E=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},w=function(){function e(e,t,r,n){this.httpClient=e,this.recipeService=t,this.slService=r,this.authService=n,this.URL="http://surveygenwebapi.azurewebsites.net/api"}return e.prototype.storeRecipes=function(){return this.httpClient.post(this.URL+"/recipes",this.recipeService.getRecipes()).subscribe(function(e){console.log(e)},function(e){console.log(e)})},e.prototype.storeShoppingList=function(){this.httpClient.post(this.URL+"/shoppinglist",this.slService.getIngredients()).subscribe(function(e){console.log("Response:"+e)},function(e){console.log("Error: "+e)})},e.prototype.fetchRecipes=function(){var e=this;this.httpClient.get(this.URL+"/recipes",{observe:"body",responseType:"json"}).map(function(e){for(var t=0,r=e;t<r.length;t++){var n=r[t];n.ingredients||(n.ingredients=[])}return e}).subscribe(function(t){e.recipeService.fetchRecipes(t)},function(e){})},e.prototype.fetchShoppingList=function(){var e=this;this.httpClient.get(this.URL+"/shoppinglist").subscribe(function(t){console.log(t),e.slService.fetchIngredients(t)},function(e){})},e=_([Object(i.Injectable)(),E("design:paramtypes",[l.HttpClient,d,m,b])],e)}(),T=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},S=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},k=function(){function e(e,t){this.dataStorage=e,this.authService=t}return e.prototype.onSaveData=function(){this.dataStorage.storeRecipes(),this.dataStorage.storeShoppingList()},e.prototype.onFetchData=function(){this.dataStorage.fetchRecipes(),this.dataStorage.fetchShoppingList()},e.prototype.onLogout=function(){this.authService.logout()},e=T([Object(i.Component)({selector:"app-header",template:r(90),styles:[r(89)]}),S("design:paramtypes",[w,b])],e)}(),x=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},N=function(){function e(){}return e=x([Object(i.Component)({selector:"app-recipes",template:r(87),styles:[r(86)]})],e)}(),R=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},C=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},A=function(){function e(e,t,r){this.recipeService=e,this.router=t,this.route=r}return e.prototype.ngOnInit=function(){var e=this;this.subscription=this.recipeService.recipesChanged.subscribe(function(t){e.recipes=t}),this.recipes=this.recipeService.getRecipes()},e.prototype.onNewRecipe=function(){this.router.navigate(["new"],{relativeTo:this.route})},e.prototype.ngOnDestroy=function(){this.subscription.unsubscribe()},e=R([Object(i.Component)({selector:"app-recipe-list",template:r(84),styles:[r(83)]}),C("design:paramtypes",[d,g.Router,g.ActivatedRoute])],e)}(),O=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},L=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},D=function(){function e(e,t,r,n){this.shoppingService=e,this.recipeService=t,this.route=r,this.router=n}return e.prototype.ngOnInit=function(){var e=this;this.route.params.subscribe(function(t){e.id=t.id,e.recipeSel=e.recipeService.getRecipe(+e.route.snapshot.params.id)})},e.prototype.sendToShoppingList=function(){this.shoppingService.addMultipleIngredients(this.recipeSel.ingredients)},e.prototype.onEditRecipe=function(){this.router.navigate(["edit"],{relativeTo:this.route})},e.prototype.onDeleteRecipe=function(){this.recipeService.deleteRecipe(this.id),this.router.navigate(["../"],{relativeTo:this.route})},e=O([Object(i.Component)({selector:"app-recipe-detail",template:r(81),styles:[r(80)]}),L("design:paramtypes",[m,d,g.ActivatedRoute,g.Router])],e)}(),I=function(){return function(e,t,r,n){this.name=e,this.description=t,this.imagePath=r,this.ingredients=n}}(),M=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},P=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},q=function(){function e(){}return e.prototype.ngOnInit=function(){},M([Object(i.Input)(),P("design:type",I)],e.prototype,"recipe",void 0),M([Object(i.Input)(),P("design:type",Number)],e.prototype,"index",void 0),e=M([Object(i.Component)({selector:"app-recipe-item",template:r(78),styles:[r(77)]})],e)}(),H=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},B=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},j=function(){function e(e){this.shoppingService=e}return e.prototype.ngOnInit=function(){var e=this;this.ingredients=this.shoppingService.getIngredients(),this.subscription=this.shoppingService.ingredientsChanged.subscribe(function(t){e.ingredients=t})},e.prototype.onEditItem=function(e){this.shoppingService.startedEditing.next(e)},e.prototype.ngOnDestroy=function(){this.subscription.unsubscribe()},e=H([Object(i.Component)({selector:"app-shopping-list",template:r(75),styles:[r(74)]}),B("design:paramtypes",[m])],e)}(),F=function(){return function(e,t,r){this.id=e,this.name=t,this.amount=r}}(),U=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},z=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},V=function(){function e(e){this.shoppingService=e,this.editMode=!1}return e.prototype.ngOnInit=function(){var e=this;this.subscription=this.shoppingService.startedEditing.subscribe(function(t){e.editMode=!0,e.editedItemId=t,e.editedItem=e.shoppingService.getIngredientById(t),e.slForm.setValue({name:e.editedItem.name,amount:e.editedItem.amount})})},e.prototype.onAddItem=function(e){var t=e.value,r=new F(this.editedItemId,t.name,t.amount);this.editMode?this.shoppingService.updateIngredient(r):this.shoppingService.addIngredient(r),this.onClear()},e.prototype.onClear=function(){this.slForm.reset(),this.editMode=!1},e.prototype.onDeleteIngredient=function(){this.shoppingService.deleteIngredient(this.editedItemId),this.onClear()},e.prototype.ngOnDestroy=function(){this.subscription.unsubscribe()},U([Object(i.ViewChild)("f"),z("design:type",c.NgForm)],e.prototype,"slForm",void 0),e=U([Object(i.Component)({selector:"app-shopping-edit",template:r(72),styles:[r(71)]}),z("design:paramtypes",[m])],e)}(),W=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},G=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},Y=function(){function e(e){this.elRef=e,this.opened=!1}return e.prototype.ngOnInit=function(){},e.prototype.onMouseClick=function(e){this.opened=!this.opened},W([Object(i.HostBinding)("class.open"),G("design:type",Object)],e.prototype,"opened",void 0),W([Object(i.HostListener)("click"),G("design:type",Function),G("design:paramtypes",[Event]),G("design:returntype",void 0)],e.prototype,"onMouseClick",null),e=W([Object(i.Directive)({selector:"[appDropdown]"}),G("design:paramtypes",[i.ElementRef])],e)}(),K=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},Q=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},$=function(){function e(){}return e.prototype.ngOnInit=function(){},e=K([Object(i.Component)({selector:"app-recipe-start",template:r(69),styles:[r(68)]}),Q("design:paramtypes",[])],e)}(),X=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},Z=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},J=function(){function e(e,t,r){this.route=e,this.recipeService=t,this.router=r,this.editMode=!1}return e.prototype.ngOnInit=function(){var e=this;this.route.params.subscribe(function(t){e.id=+t.id,e.editMode=null!=t.id,e.initForm()})},e.prototype.initForm=function(){var e="",t="",r="",n=new c.FormArray([]);if(this.editMode){var i=this.recipeService.getRecipe(this.id);if(e=i.name,t=i.imagePath,r=i.description,i.ingredients)for(var o=0,a=i.ingredients;o<a.length;o++){var s=a[o];n.push(new c.FormGroup({name:new c.FormControl(s.name,c.Validators.required),amount:new c.FormControl(s.amount,[c.Validators.required,c.Validators.pattern(/^[1-9]+[0-9]*$/)])}))}}this.recipeForm=new c.FormGroup({name:new c.FormControl(e,c.Validators.required),description:new c.FormControl(r,c.Validators.required),imagePath:new c.FormControl(t,c.Validators.required),ingredients:n})},e.prototype.onSubmit=function(){this.editMode?this.recipeService.updateRecipe(this.id,this.recipeForm.value):this.recipeService.addRecipe(this.recipeForm.value),this.onCancel()},e.prototype.onAddIngredient=function(){this.recipeForm.get("ingredients").push(new c.FormGroup({name:new c.FormControl(null,c.Validators.required),amount:new c.FormControl(null,[c.Validators.required,c.Validators.pattern(/^[1-9]+[0-9]*$/)])}))},e.prototype.onDeleteIngredient=function(e){this.recipeForm.get("ingredients").removeAt(e)},e.prototype.onCancel=function(){this.router.navigate(["../"],{relativeTo:this.route})},e=X([Object(i.Component)({selector:"app-recipe-edit",template:r(66),styles:[r(65)]}),Z("design:paramtypes",[g.ActivatedRoute,d,g.Router])],e)}(),ee=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},te=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},re=function(){function e(e,t){this.authService=e,this.router=t}return e.prototype.canActivate=function(e,t){return this.authService.isAuthenticated()||this.router.navigate([""]),this.authService.isAuthenticated()},e=ee([Object(i.Injectable)(),te("design:paramtypes",[b,g.Router])],e)}(),ne=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},ie=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},oe=function(){function e(e){this.authService=e}return e.prototype.ngOnInit=function(){localStorage.removeItem("currentUser")},e.prototype.onSignIn=function(e){var t=e.value.email,r=e.value.password;this.authService.signInUser(t,r)},e=ne([Object(i.Component)({selector:"app-login",template:r(63),styles:[r(62)]}),ie("design:paramtypes",[b])],e)}(),ae=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},se=function(){function e(){}return e=ae([Object(i.Component)({selector:"app-home",template:r(60),styles:[r(59)]})],e)}(),ce=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},le=[{path:"",redirectTo:"/login",pathMatch:"full"},{path:"login",component:oe},{path:"home",component:se,children:[{path:"",redirectTo:"recipes",pathMatch:"full"},{path:"recipes",component:N,canActivate:[re],children:[{path:"",component:$},{path:"new",component:J,canActivate:[re]},{path:":id",component:D},{path:":id/edit",component:J,canActivate:[re]}]},{path:"shopping-list",component:j,canActivate:[re]}]}],ue=function(){function e(){}return e=ce([Object(i.NgModule)({imports:[g.RouterModule.forRoot(le)],exports:[g.RouterModule]})],e)}(),pe=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},he=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},fe=function(){function e(e){this.authService=e}return e.prototype.intercept=function(e,t){var r=e.clone({headers:e.headers.set("Authorization","Bearer "+this.authService.getToken())});return t.handle(r)},e=pe([Object(i.Injectable)(),he("design:paramtypes",[b])],e)}(),de=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},me=function(){function e(){}return e=de([Object(i.NgModule)({declarations:[h,k,N,A,D,q,j,V,Y,$,J,oe,se],imports:[s.BrowserModule,c.FormsModule,c.ReactiveFormsModule,ue,u.HttpModule,l.HttpClientModule],providers:[m,d,w,b,re,{provide:l.HTTP_INTERCEPTORS,useClass:fe,multi:!0}],bootstrap:[h]})],e)}(),ge=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},ye=function(){function e(){}return e=ge([Object(i.NgModule)({bootstrap:[h],imports:[o.ServerModule,me]})],e)}();Object(i.enableProdMode)();t.default=Object(a.createServerRenderer)(function(e){var t=[{provide:o.INITIAL_CONFIG,useValue:{document:"<app></app>",url:e.url}},{provide:n.APP_BASE_HREF,useValue:e.baseUrl},{provide:"BASE_URL",useValue:e.origin+e.baseUrl}];return Object(o.platformDynamicServer)(t).bootstrapModule(ye).then(function(e){var t=e.injector.get(i.ApplicationRef),r=e.injector.get(o.PlatformState),n=e.injector.get(i.NgZone);return new Promise(function(i,o){n.onError.subscribe(function(e){return o(e)}),t.isStable.first(function(e){return e}).subscribe(function(){setImmediate(function(){i({html:r.renderToString()}),e.destroy()})})})})})},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(58);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<app-header></app-header>\r\n<br>\r\n<div class="container">\r\n    <div class="row">\r\n        <div class="col-md-12">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </div>\r\n</div>\r\n'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,'/*\r\n    LOGIN SECTION\r\n*/\r\n.form-signin {\r\n    max-width: 330px;\r\n    margin: 0 auto;\r\n}\r\n\r\n    .form-signin .form-signin-heading, .form-signin .checkbox {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .form-signin .checkbox {\r\n        font-weight: normal;\r\n    }\r\n\r\n    .form-signin .form-control {\r\n        position: relative;\r\n        font-size: 16px;\r\n        height: auto;\r\n        padding: 10px;\r\n        -webkit-box-sizing: border-box;\r\n        -moz-box-sizing: border-box;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n        .form-signin .form-control:focus {\r\n            z-index: 2;\r\n        }\r\n\r\n    .form-signin input[type="text"] {\r\n        margin-bottom: -1px;\r\n        border-bottom-left-radius: 0;\r\n        border-bottom-right-radius: 0;\r\n    }\r\n\r\n    .form-signin input[type="password"] {\r\n        margin-bottom: 10px;\r\n        border-top-left-radius: 0;\r\n        border-top-right-radius: 0;\r\n    }\r\n\r\n.account-wall {\r\n    padding: 20px 20px 20px 20px;\r\n    background-color: #f7f7f7;\r\n    -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n    -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n    text-align: center;\r\n}\r\n\r\n.login-title {\r\n    color: #555;\r\n    font-size: 18px;\r\n    font-weight: 400;\r\n    display: block;\r\n}\r\n\r\n.profile-img {\r\n    width: 280px;\r\n    height: auto;\r\n    margin: 0 auto 20px;\r\n    display: block;\r\n}\r\n\r\n.need-help {\r\n    margin-top: 10px;\r\n}\r\n\r\n.new-account {\r\n    display: block;\r\n    margin-top: 10px;\r\n}\r\n\r\ninput[type="checkbox"] {\r\n    box-shadow: inset 0 0px 0px rgba(0,0,0,.3);\r\n    width: 15px;\r\n}\r\n',""])},function(e,t,r){var n=r(61);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<div class="container">\r\n    <div class="row">\r\n        <div class="col-sm-6 col-md-4 col-md-offset-4">\r\n            <div class="account-wall">\r\n                <img class="profile-img" src="https://img.etsystatic.com/il/e614eb/720407533/il_fullxfull.720407533_cfek.jpg?version=0">\r\n                <form (ngSubmit)="onSignIn(f)" #f="ngForm" class="form-signin">\r\n                    <div class="form-group">\r\n                        <input type="email" name="email" id="email" class="form-control" placeholder="Email" autofocus ngModel />\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <input type="password" name="password" id="password" class="form-control" placeholder="Password" ngModel />\r\n                    </div>\r\n                    <button class="btn btn-md btn-primary btn-block" type="submit">Login</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"input.ng-invalid.ng-touched,\r\ntextarea.ng-invalid.ng-touched {\r\n    border: 1px solid red;\r\n}\r\n",""])},function(e,t,r){var n=r(64);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<div class="row">\r\n    <div class="col-xs-12">\r\n        <form [formGroup]="recipeForm" (ngSubmit)="onSubmit()">\r\n            <div class="row">\r\n                <div class="col-xs-12">\r\n                    <button \r\n                            class="btn btn-success" \r\n                            type="submit"\r\n                            [disabled]="!recipeForm.valid">Save</button>\r\n                    <button class="btn btn-danger" type="button" (click)="onCancel()">Cancel</button>\r\n                </div>\r\n            </div>\r\n            <div class="row">\r\n                <div class="col-xs-12">\r\n                    <div class="form-group">\r\n                        <label for="name">Name</label>\r\n                        <input type="text" id="name" class="form-control" formControlName="name" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="row">\r\n                <div class="col-xs-12">\r\n                    <div class="form-group">\r\n                        <label for="imagePath">Image URL</label>\r\n                        <input type="text" id="imagePath" class="form-control" formControlName="imagePath" #imagePath />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="row">\r\n                <div class="col-xs-12">\r\n                    <div class="form-group">\r\n                        <label for="description">Description</label>\r\n                        <textarea id="description" class="form-control" rows="6" formControlName="description"></textarea>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="row">\r\n                <div class="col-xs-12">\r\n                    <img [src]="imagePath.value" class="img-responsive" />\r\n                </div>\r\n            </div>\r\n            <div class="row">\r\n                <div class="col-xs-12" formArrayName="ingredients">\r\n                    <div class="row"\r\n                         *ngFor="let ingredientCtrl of recipeForm.get(\'ingredients\').controls; let i = index;"\r\n                         [formGroupName]="i"\r\n                         style="margin-top: 10px;">\r\n                        \r\n                        <div class="col-xs-8">\r\n                            <input type="text" class="form-control" formControlName="name" />\r\n                        </div>\r\n                        <div class="col-xs-2">\r\n                            <input type="number" class="form-control" formControlName="amount" />\r\n                        </div>\r\n                        <div class="col-xs-2">\r\n                            <button type="button" class="btn btn-danger" (click)="onDeleteIngredient(i)">X</button>\r\n                        </div>\r\n                    </div>\r\n                    <div class="row">\r\n                        <div class="col-xs-12">\r\n                            <button type="button" class="btn btn-success" (click)="onAddIngredient()">Add Ingredient</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(67);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports="<h3>Please select a Recipe!</h3>\n"},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(70);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<div class="row">\n  <div class="col-xs-12">\n    <form (ngSubmit)="onAddItem(f)" #f="ngForm">\n      <div class="row">\n        <div class="col-sm-5 form-group">\n          <label for="name">Name</label>\n          <input type="text" id="name" class="form-control" name="name" ngModel required>\n        </div>\n        <div class="col-sm-2 form-group">\n            <label for="amount">Amount</label>\n            <input type="number" id="amount" class="form-control" name="amount" ngModel required [pattern]="\'^[1-9]+[0-9]*$\'">\n        </div>\n      </div>\n      <div class="row">\n        <div class="col-xs-12">\n          <button class="btn btn-success" type="submit" [disabled]="!f.valid">{{ editMode ? \'Update\' : \'Add\' }}</button>\n          <button class="btn btn-danger" type="button" (click)="onDeleteIngredient()" *ngIf="editMode">Delete</button>\n          <button class="btn btn-primary" type="button" (click)="onClear()">Clear</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(73);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<div class="row">\n  <div class="col-xs-10">\n    <app-shopping-edit></app-shopping-edit>\n    <hr>\n    <ul class="list-group">\n        <a class="list-group-item"\r\n           style="cursor: pointer"\r\n           *ngFor="let ingredient of ingredients"\r\n           (click)="onEditItem(ingredient.id)">\r\n            {{ ingredient.name }} ({{ingredient.amount}})\r\n        </a>\n    </ul>\n  </div>\n</div>\n'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(76);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='\x3c!-- <a class="list-group-item clearfix" (click)="onRecipeClicked()"> --\x3e\n<a class="list-group-item clearfix"routerLinkActive="active" [routerLink]="[index]">\n  <div class="pull-left">\n      <h4 class="list-group-item-heading">{{recipe.name}}</h4>\n      <p class="list-group-item-text">{{recipe.description}}</p>\n  </div>\n  <span class="pull-right">\n      <img [src]="recipe.imagePath" alt="{{recipe.name}}" class="img-responsive" style="max-height: 50px;">\n  </span>\n</a>\n'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(79);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<div class="row">\n  <div class="col-xs-12">\n    <img [src]= "recipeSel.imagePath" alt="" class="img-responsive" style="max-width: 500px">\n  </div>\n</div>\n<div class="row">\n  <div class="col-xs-12">\n    <h1>{{recipeSel.name}}</h1>\n  </div>\n</div>\n<div class="row">\n  <div class="col-xs-12">\n    <div class="btn-group" appDropdown>\n      <button\n        type="button"\n        class="btn btn-primary dropdown-toggle">\n        Manage Recipe <span class="caret"></span>\n      </button>\n      <ul class="dropdown-menu">\n        <li><a (click)="sendToShoppingList()" style="cursor: pointer;">To Shopping List</a></li>\n        <li><a style="cursor: pointer;" (click)="onEditRecipe()">Edit Recipe</a></li>\n        <li><a style="cursor: pointer;" (click)="onDeleteRecipe()">Delete Recipe</a></li>\n      </ul>\n    </div>\n  </div>\n</div>\n\n<div class="row">\n  <div class="col-xs-12">\n    {{recipeSel.description}}\n  </div>\n</div>\n<div class="row">\n  <div class="col-xs-12">\n    <ul class="list-group">\n      <li class="list-group-item"\n      *ngFor="let ingredient of recipeSel.ingredients">\n      {{ ingredient.name }} ({{ingredient.amount}})\n      </li>\n    </ul>\n  </div>\n</div>\n\n'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(82);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<div class="row">\r\n    <div class="col-xs-12">\r\n        <button class="btn btn-success" (click)="onNewRecipe()">New Recipe</button>\r\n    </div>\r\n</div>\r\n<hr>\r\n<div class="row">\r\n    <div class="col-xs-12">\r\n        <app-recipe-item *ngFor="let recipeEl of recipes; let i = index"\r\n                         [recipe]="recipeEl"\r\n                         [index]="i"></app-recipe-item>\r\n    </div>\r\n</div>\r\n'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(85);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<div class="row">\n  <div class="col-md-5">\n    <app-recipe-list></app-recipe-list>\n  </div>\n  <div class="col-md-7">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n'},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"",""])},function(e,t,r){var n=r(88);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<nav class="navbar navbar-default">\r\n<div class="container-fluid">\r\n    <div class="navbar-header">\r\n        <a routerLink="/home" class="navbar-brand">Recipe Book</a>\r\n    </div>\r\n    <div class="navbar-default">\r\n        <ul class="nav navbar-nav">\r\n            \x3c!-- routerLinkActive="active" - The class that dynamically will be loaded --\x3e\r\n            <li routerLinkActive="active"><a routerLink="/home/recipes" >Recipes</a></li>\r\n            <li routerLinkActive="active"><a [routerLink]="[\'/home/shopping-list\']">Shopping List</a></li>\r\n        </ul>\r\n        <ul class="nav navbar-nav navbar-right">\r\n\r\n            \x3c!--<ng-template [ngIf]="!authService.isAuthenticated()">\r\n                <li><a routerLink="signup">Register</a></li>\r\n                <li><a routerLink="signin">Login</a></li>\r\n\r\n            </ng-template>--\x3e\r\n\r\n            <li><a style="cursor:pointer;" (click)="onLogout()" *ngIf="authService.isAuthenticated()">Logout</a></li>\r\n\r\n            <li class="dropdown" appDropdown *ngIf="authService.isAuthenticated()">\r\n                <a style="cursor: pointer" class="dropdown-toggle" role="button">Manage <span class="caret"></span>   </a>\r\n                <ul class="dropdown-menu">\r\n                    <li><a style="cursor: pointer" (click)="onSaveData()">Save Data</a></li>\r\n                    <li><a style="cursor: pointer" (click)="onFetchData()">Fetch Data</a></li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n</nav>\r\n'},function(e,t,r){"use strict";var n=r(12),i=r(51);n.Observable.prototype.map=i.map},function(e,t,r){(e.exports=r(6)(!1)).push([e.i,"body {\r\n    font-family: segoe-ui_normal,Segoe UI,Segoe,Segoe WP,Helvetica Neue,Helvetica,sans-serif;\r\n    padding-top: 50px;\r\n}\r\n\r\nh1, h2.likeAnH1 {\r\n    font-family: segoe-ui_light,Segoe UI Light,Segoe WP,Helvetica Neue,Helvetica,sans-serif;\r\n}\r\n",""])},function(e,t,r){var n=r(92);e.exports="string"==typeof n?n:n.toString()},function(e,t){e.exports='<br>\n<div class="container">\n  <div class="row">\n    <div class="col-md-12">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n</div>\n'},function(e,t){e.exports=require("os")},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("http")},function(e,t,r){(function(){var t,n,i,o,a,s,c,l,u,p,h,f,d=function(e,t){for(var r in t)m.call(t,r)&&(e[r]=t[r]);function n(){this.constructor=e}return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},m={}.hasOwnProperty;c=function(){function e(){this.onloadstart=null,this.onprogress=null,this.onabort=null,this.onerror=null,this.onload=null,this.ontimeout=null,this.onloadend=null,this._listeners={}}return e.prototype.onloadstart=null,e.prototype.onprogress=null,e.prototype.onabort=null,e.prototype.onerror=null,e.prototype.onload=null,e.prototype.ontimeout=null,e.prototype.onloadend=null,e.prototype.addEventListener=function(e,t){var r;e=e.toLowerCase(),(r=this._listeners)[e]||(r[e]=[]),this._listeners[e].push(t)},e.prototype.removeEventListener=function(e,t){var r;e=e.toLowerCase(),this._listeners[e]&&-1!==(r=this._listeners[e].indexOf(t))&&this._listeners[e].splice(r,1)},e.prototype.dispatchEvent=function(e){var t,r,n,i,o;if(e.currentTarget=e.target=this,t=e.type,o=this._listeners[t])for(r=0,n=o.length;r<n;r++)(i=o[r]).call(this,e);(i=this["on"+t])&&i.call(this,e)},e}(),u=r(97),p=r(96),h=r(95),f=r(50),s=function(e){function r(e){r.__super__.constructor.call(this),this.onreadystatechange=null,this._anonymous=e&&e.anon,this.readyState=r.UNSENT,this.response=null,this.responseText="",this.responseType="",this.responseURL="",this.status=0,this.statusText="",this.timeout=0,this.upload=new l(this),this._method=null,this._url=null,this._sync=!1,this._headers=null,this._loweredHeaders=null,this._mimeOverride=null,this._request=null,this._response=null,this._responseParts=null,this._responseHeaders=null,this._aborting=null,this._error=null,this._loadedBytes=0,this._totalBytes=0,this._lengthComputable=!1}return d(r,c),r.prototype.onreadystatechange=null,r.prototype.readyState=null,r.prototype.response=null,r.prototype.responseText=null,r.prototype.responseType=null,r.prototype.status=null,r.prototype.timeout=null,r.prototype.upload=null,r.prototype.open=function(e,t,n,i,a){var s;if((e=e.toUpperCase())in this._restrictedMethods)throw new o("HTTP method "+e+" is not allowed in XHR");switch(s=this._parseUrl(t),void 0===n&&(n=!0),this.readyState){case r.UNSENT:case r.OPENED:case r.DONE:break;case r.HEADERS_RECEIVED:case r.LOADING:}this._method=e,this._url=s,this._sync=!n,this._headers={},this._loweredHeaders={},this._mimeOverride=null,this._setReadyState(r.OPENED),this._request=null,this._response=null,this.status=0,this.statusText="",this._responseParts=[],this._responseHeaders=null,this._loadedBytes=0,this._totalBytes=0,this._lengthComputable=!1},r.prototype.setRequestHeader=function(e,n){var i;if(this.readyState!==r.OPENED)throw new t("XHR readyState must be OPENED");i=e.toLowerCase(),this._restrictedHeaders[i]||/^sec\-/.test(i)||/^proxy-/.test(i)?console.warn('Refused to set unsafe header "'+e+'"'):(n=n.toString(),i in this._loweredHeaders?(e=this._loweredHeaders[i],this._headers[e]=this._headers[e]+", "+n):(this._loweredHeaders[i]=e,this._headers[e]=n))},r.prototype.send=function(e){if(this.readyState!==r.OPENED)throw new t("XHR readyState must be OPENED");if(this._request)throw new t("send() already called");switch(this._url.protocol){case"file:":this._sendFile(e);break;case"http:":case"https:":this._sendHttp(e);break;default:throw new n("Unsupported protocol "+this._url.protocol)}},r.prototype.abort=function(){this._request&&(this._request.abort(),this._setError(),this._dispatchProgress("abort"),this._dispatchProgress("loadend"))},r.prototype.getResponseHeader=function(e){var t;return this._responseHeaders&&(t=e.toLowerCase())in this._responseHeaders?this._responseHeaders[t]:null},r.prototype.getAllResponseHeaders=function(){var e,t;return this._responseHeaders?function(){var r,n;for(e in n=[],r=this._responseHeaders)t=r[e],n.push(e+": "+t);return n}.call(this).join("\r\n"):""},r.prototype.overrideMimeType=function(e){if(this.readyState===r.LOADING||this.readyState===r.DONE)throw new t("overrideMimeType() not allowed in LOADING or DONE");this._mimeOverride=e.toLowerCase()},r.prototype.nodejsSet=function(e){var t;if("httpAgent"in e&&(this.nodejsHttpAgent=e.httpAgent),"httpsAgent"in e&&(this.nodejsHttpsAgent=e.httpsAgent),"baseUrl"in e){if(null!==(t=e.baseUrl)&&!f.parse(t,!1,!0).protocol)throw new a("baseUrl must be an absolute URL");this.nodejsBaseUrl=t}},r.nodejsSet=function(e){r.prototype.nodejsSet(e)},r.prototype.UNSENT=0,r.UNSENT=0,r.prototype.OPENED=1,r.OPENED=1,r.prototype.HEADERS_RECEIVED=2,r.HEADERS_RECEIVED=2,r.prototype.LOADING=3,r.LOADING=3,r.prototype.DONE=4,r.DONE=4,r.prototype.nodejsHttpAgent=u.globalAgent,r.prototype.nodejsHttpsAgent=p.globalAgent,r.prototype.nodejsBaseUrl=null,r.prototype._restrictedMethods={CONNECT:!0,TRACE:!0,TRACK:!0},r.prototype._restrictedHeaders={"accept-charset":!0,"accept-encoding":!0,"access-control-request-headers":!0,"access-control-request-method":!0,connection:!0,"content-length":!0,cookie:!0,cookie2:!0,date:!0,dnt:!0,expect:!0,host:!0,"keep-alive":!0,origin:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,via:!0},r.prototype._privateHeaders={"set-cookie":!0,"set-cookie2":!0},r.prototype._userAgent="Mozilla/5.0 ("+h.type()+" "+h.arch()+") node.js/"+process.versions.node+" v8/"+process.versions.v8,r.prototype._setReadyState=function(e){var t;this.readyState=e,t=new i("readystatechange"),this.dispatchEvent(t)},r.prototype._sendFile=function(){if("GET"!==this._url.method)throw new n("The file protocol only supports GET");throw new Error("Protocol file: not implemented")},r.prototype._sendHttp=function(e){if(this._sync)throw new Error("Synchronous XHR processing not implemented");null==e||"GET"!==this._method&&"HEAD"!==this._method?e||(e=""):(console.warn("Discarding entity body for "+this._method+" requests"),e=null),this.upload._setData(e),this._finalizeHeaders(),this._sendHxxpRequest()},r.prototype._sendHxxpRequest=function(){var e,t,r,n;"http:"===this._url.protocol?(t=u,e=this.nodejsHttpAgent):(t=p,e=this.nodejsHttpsAgent),r=t.request({hostname:this._url.hostname,port:this._url.port,path:this._url.path,auth:this._url.auth,method:this._method,headers:this._headers,agent:e}),this._request=r,this.timeout&&r.setTimeout(this.timeout,(n=this,function(){return n._onHttpTimeout(r)})),r.on("response",function(e){return function(t){return e._onHttpResponse(r,t)}}(this)),r.on("error",function(e){return function(t){return e._onHttpRequestError(r,t)}}(this)),this.upload._startUpload(r),this._request===r&&this._dispatchProgress("loadstart")},r.prototype._finalizeHeaders=function(){this._headers.Connection="keep-alive",this._headers.Host=this._url.host,this._anonymous&&(this._headers.Referer="about:blank"),this._headers["User-Agent"]=this._userAgent,this.upload._finalizeHeaders(this._headers,this._loweredHeaders)},r.prototype._onHttpResponse=function(e,t){var n;if(this._request===e){switch(t.statusCode){case 301:case 302:case 303:case 307:case 308:return this._url=this._parseUrl(t.headers.location),this._method="GET","content-type"in this._loweredHeaders&&(delete this._headers[this._loweredHeaders["content-type"]],delete this._loweredHeaders["content-type"]),"Content-Type"in this._headers&&delete this._headers["Content-Type"],delete this._headers["Content-Length"],this.upload._reset(),this._finalizeHeaders(),void this._sendHxxpRequest()}var i;return this._response=t,this._response.on("data",(i=this,function(e){return i._onHttpResponseData(t,e)})),this._response.on("end",function(e){return function(){return e._onHttpResponseEnd(t)}}(this)),this._response.on("close",function(e){return function(){return e._onHttpResponseClose(t)}}(this)),this.responseURL=this._url.href.split("#")[0],this.status=this._response.statusCode,this.statusText=u.STATUS_CODES[this.status],this._parseResponseHeaders(t),(n=this._responseHeaders["content-length"])?(this._totalBytes=parseInt(n),this._lengthComputable=!0):this._lengthComputable=!1,this._setReadyState(r.HEADERS_RECEIVED)}},r.prototype._onHttpResponseData=function(e,t){if(this._response===e)return this._responseParts.push(t),this._loadedBytes+=t.length,this.readyState!==r.LOADING&&this._setReadyState(r.LOADING),this._dispatchProgress("progress")},r.prototype._onHttpResponseEnd=function(e){if(this._response===e)return this._parseResponse(),this._request=null,this._response=null,this._setReadyState(r.DONE),this._dispatchProgress("load"),this._dispatchProgress("loadend")},r.prototype._onHttpResponseClose=function(e){var t;if(this._response===e)return t=this._request,this._setError(),t.abort(),this._setReadyState(r.DONE),this._dispatchProgress("error"),this._dispatchProgress("loadend")},r.prototype._onHttpTimeout=function(e){if(this._request===e)return this._setError(),e.abort(),this._setReadyState(r.DONE),this._dispatchProgress("timeout"),this._dispatchProgress("loadend")},r.prototype._onHttpRequestError=function(e,t){if(this._request===e)return this._setError(),e.abort(),this._setReadyState(r.DONE),this._dispatchProgress("error"),this._dispatchProgress("loadend")},r.prototype._dispatchProgress=function(e){var t;(t=new i(e)).lengthComputable=this._lengthComputable,t.loaded=this._loadedBytes,t.total=this._totalBytes,this.dispatchEvent(t)},r.prototype._setError=function(){this._request=null,this._response=null,this._responseHeaders=null,this._responseParts=null},r.prototype._parseUrl=function(e){var t,r,n,i,o;return t=null===this.nodejsBaseUrl?e:f.resolve(this.nodejsBaseUrl,e),(o=f.parse(t,!1,!0)).hash=null,o.auth&&(void 0!==i&&null!==i||void 0!==n&&null!==n)&&(-1===(r=o.auth.indexOf(":"))?i||(i=o.auth):(i||(i=o.substring(0,r)),n||(n=o.substring(r+1)))),(i||n)&&(o.auth=i+":"+n),o},r.prototype._parseResponseHeaders=function(e){var t,r,n,i;for(r in this._responseHeaders={},n=e.headers)i=n[r],t=r.toLowerCase(),this._privateHeaders[t]||(null!==this._mimeOverride&&"content-type"===t&&(i=this._mimeOverride),this._responseHeaders[t]=i);null===this._mimeOverride||"content-type"in this._responseHeaders||(this._responseHeaders["content-type"]=this._mimeOverride)},r.prototype._parseResponse=function(){var e,t,r,n,i,o;switch(t=Buffer.concat?Buffer.concat(this._responseParts):this._concatBuffers(this._responseParts),this._responseParts=null,this.responseType){case"text":this._parseTextResponse(t);break;case"json":this.responseText=null;try{this.response=JSON.parse(t.toString("utf-8"))}catch(e){e,this.response=null}break;case"buffer":this.responseText=null,this.response=t;break;case"arraybuffer":for(this.responseText=null,e=new ArrayBuffer(t.length),o=new Uint8Array(e),r=n=0,i=t.length;0<=i?n<i:n>i;r=0<=i?++n:--n)o[r]=t[r];this.response=e;break;default:this._parseTextResponse(t)}},r.prototype._parseTextResponse=function(e){try{this.responseText=e.toString(this._parseResponseEncoding())}catch(t){t,this.responseText=e.toString("binary")}this.response=this.responseText},r.prototype._parseResponseEncoding=function(){var e,t;return null,(e=this._responseHeaders["content-type"])&&(t=/\;\s*charset\=(.*)$/.exec(e))?t[1]:"utf-8"},r.prototype._concatBuffers=function(e){var t,r,n,i,o,a,s;if(0===e.length)return new Buffer(0);if(1===e.length)return e[0];for(a=0,r=0,i=e.length;r<i;r++)a+=(t=e[r]).length;for(s=new Buffer(a),a=0,n=0,o=e.length;n<o;n++)(t=e[n]).copy(s,a),a+=t.length;return s},r}(),e.exports=s,s.XMLHttpRequest=s,o=function(e){function t(){t.__super__.constructor.apply(this,arguments)}return d(t,e),t}(Error),s.SecurityError=o,t=function(e){function t(){t.__super__.constructor.apply(this,arguments)}return d(t,e),t}(Error),t=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return d(t,e),t}(Error),s.InvalidStateError=t,n=function(e){function t(){t.__super__.constructor.apply(this,arguments)}return d(t,e),t}(Error),s.SyntaxError=a,a=function(e){function t(){t.__super__.constructor.apply(this,arguments)}return d(t,e),t}(Error),i=function(){function e(e){this.type=e,this.target=null,this.currentTarget=null,this.lengthComputable=!1,this.loaded=0,this.total=0}return e.prototype.bubbles=!1,e.prototype.cancelable=!1,e.prototype.target=null,e.prototype.loaded=null,e.prototype.lengthComputable=null,e.prototype.total=null,e}(),s.ProgressEvent=i,l=function(e){function t(e){t.__super__.constructor.call(this),this._request=e,this._reset()}return d(t,c),t.prototype._reset=function(){this._contentType=null,this._body=null},t.prototype._setData=function(e){var t,r,n,i,o,a,s,c;if(void 0!==e&&null!==e)if("string"==typeof e)0!==e.length&&(this._contentType="text/plain;charset=UTF-8"),this._body=new Buffer(e,"utf8");else if(Buffer.isBuffer(e))this._body=e;else if(e instanceof ArrayBuffer){for(t=new Buffer(e.byteLength),c=new Uint8Array(e),r=n=0,a=e.byteLength;0<=a?n<a:n>a;r=0<=a?++n:--n)t[r]=c[r];this._body=t}else{if(!(e.buffer&&e.buffer instanceof ArrayBuffer))throw new Error("Unsupported send() data "+e);for(t=new Buffer(e.byteLength),o=e.byteOffset,c=new Uint8Array(e.buffer),r=i=0,s=e.byteLength;0<=s?i<s:i>s;r=0<=s?++i:--i)t[r]=c[r+o];this._body=t}},t.prototype._finalizeHeaders=function(e,t){this._contentType&&("content-type"in t||(e["Content-Type"]=this._contentType)),this._body&&(e["Content-Length"]=this._body.length.toString())},t.prototype._startUpload=function(e){this._body&&e.write(this._body),e.end()},t}(),s.XMLHttpRequestUpload=l}).call(this)},function(e,t,r){"use strict";e.exports={VALUE:1,ATTR:2,REMOVE_ATTR:3,REMOVE:4,MOVE:5,INSERT:6}},function(e,t,r){"use strict";var n={setTimeout:setTimeout,clearTimeout:clearTimeout,setInterval:setInterval,clearInterval:clearInterval};e.exports=n},function(e,t,r){"use strict";var n=Object.create(null,{appCodeName:{value:"Mozilla"},appName:{value:"Netscape"},appVersion:{value:"4.0"},platform:{value:""},product:{value:"Gecko"},productSub:{value:"20100101"},userAgent:{value:""},vendor:{value:""},vendorSub:{value:""},taintEnabled:{value:function(){return!1}}});e.exports=n},function(e,t,r){"use strict";var n=r(25),i=r(34);function o(e,t){this._window=e,this._href=t}e.exports=o,o.prototype=Object.create(i.prototype,{constructor:{value:o},href:{get:function(){return this._href},set:function(e){this.assign(e)}},assign:{value:function(e){var t=new n(this._href).resolve(e);this._href=t}},replace:{value:function(e){this.assign(e)}},reload:{value:function(){this.assign(this.href)}},toString:{value:function(){return this.href}}})},function(e,t,r){"use strict";
/*!
Parser-Lib
Copyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/var n=Object.create(null);!function(){function e(){this._listeners=Object.create(null)}function t(e){this._input=e.replace(/(\r|\n){1,2}/g,"\n"),this._line=1,this._col=1,this._cursor=0}function r(e,t,r){Error.call(this),this.name=this.constructor.name,this.col=r,this.line=t,this.message=e}function i(e,t,r,n){this.col=r,this.line=t,this.text=e,this.type=n}function o(e,r){this._reader=e?new t(e.toString()):null,this._token=null,this._tokenData=r,this._lt=[],this._ltIndex=0,this._ltIndexCache=[]}e.prototype={constructor:e,addListener:function(e,t){this._listeners[e]||(this._listeners[e]=[]),this._listeners[e].push(t)},fire:function(e){if("string"==typeof e&&(e={type:e}),void 0!==e.target&&(e.target=this),void 0===e.type)throw new Error("Event object missing 'type' property.");if(this._listeners[e.type])for(var t=this._listeners[e.type].concat(),r=0,n=t.length;r<n;r++)t[r].call(this,e)},removeListener:function(e,t){if(this._listeners[e])for(var r=this._listeners[e],n=0,i=r.length;n<i;n++)if(r[n]===t){r.splice(n,1);break}}},t.prototype={constructor:t,getCol:function(){return this._col},getLine:function(){return this._line},eof:function(){return this._cursor===this._input.length},peek:function(e){var t=null;return e=void 0===e?1:e,this._cursor<this._input.length&&(t=this._input.charAt(this._cursor+e-1)),t},read:function(){var e=null;return this._cursor<this._input.length&&("\n"===this._input.charAt(this._cursor)?(this._line++,this._col=1):this._col++,e=this._input.charAt(this._cursor++)),e},mark:function(){this._bookmark={cursor:this._cursor,line:this._line,col:this._col}},reset:function(){this._bookmark&&(this._cursor=this._bookmark.cursor,this._line=this._bookmark.line,this._col=this._bookmark.col,delete this._bookmark)},readTo:function(e){for(var t,r="";r.length<e.length||r.lastIndexOf(e)!==r.length-e.length;){if(!(t=this.read()))throw new Error('Expected "'+e+'" at line '+this._line+", col "+this._col+".");r+=t}return r},readWhile:function(e){for(var t="",r=this.read();null!==r&&e(r);)t+=r,r=this.read();return t},readMatch:function(e){var t=this._input.substring(this._cursor),r=null;return"string"==typeof e?0===t.indexOf(e)&&(r=this.readCount(e.length)):e instanceof RegExp&&e.test(t)&&(r=this.readCount(RegExp.lastMatch.length)),r},readCount:function(e){for(var t="";e--;)t+=this.read();return t}},r.prototype=Object.create(Error.prototype),r.prototype.constructor=r,i.fromToken=function(e){return new i(e.value,e.startLine,e.startCol)},i.prototype={constructor:i,valueOf:function(){return this.toString()},toString:function(){return this.text}},o.createTokenData=function(e){var t=[],r=Object.create(null),n=e.concat([]),i=0,o=n.length+1;for(n.UNKNOWN=-1,n.unshift({name:"EOF"});i<o;i++)t.push(n[i].name),n[n[i].name]=i,n[i].text&&(r[n[i].text]=i);return n.name=function(e){return t[e]},n.type=function(e){return r[e]},n},o.prototype={constructor:o,match:function(e,t){e instanceof Array||(e=[e]);for(var r=this.get(t),n=0,i=e.length;n<i;)if(r===e[n++])return!0;return this.unget(),!1},mustMatch:function(e,t){var n;if(e instanceof Array||(e=[e]),!this.match.apply(this,arguments))throw n=this.LT(1),new r("Expected "+this._tokenData[e[0]].name+" at line "+n.startLine+", col "+n.startCol+".",n.startLine,n.startCol)},advance:function(e,t){for(;0!==this.LA(0)&&!this.match(e,t);)this.get();return this.LA(0)},get:function(e){var t,r,n=this._tokenData,i=0;if(this._lt.length&&this._ltIndex>=0&&this._ltIndex<this._lt.length){for(i++,this._token=this._lt[this._ltIndex++],r=n[this._token.type];void 0!==r.channel&&e!==r.channel&&this._ltIndex<this._lt.length;)this._token=this._lt[this._ltIndex++],r=n[this._token.type],i++;if((void 0===r.channel||e===r.channel)&&this._ltIndex<=this._lt.length)return this._ltIndexCache.push(i),this._token.type}return(t=this._getToken()).type>-1&&!n[t.type].hide&&(t.channel=n[t.type].channel,this._token=t,this._lt.push(t),this._ltIndexCache.push(this._lt.length-this._ltIndex+i),this._lt.length>5&&this._lt.shift(),this._ltIndexCache.length>5&&this._ltIndexCache.shift(),this._ltIndex=this._lt.length),(r=n[t.type])&&(r.hide||void 0!==r.channel&&e!==r.channel)?this.get(e):t.type},LA:function(e){var t,r=e;if(e>0){if(e>5)throw new Error("Too much lookahead.");for(;r;)t=this.get(),r--;for(;r<e;)this.unget(),r++}else if(e<0){if(!this._lt[this._ltIndex+e])throw new Error("Too much lookbehind.");t=this._lt[this._ltIndex+e].type}else t=this._token.type;return t},LT:function(e){return this.LA(e),this._lt[this._ltIndex+e-1]},peek:function(){return this.LA(1)},token:function(){return this._token},tokenName:function(e){return e<0||e>this._tokenData.length?"UNKNOWN_TOKEN":this._tokenData[e].name},tokenType:function(e){return this._tokenData[e]||-1},unget:function(){if(!this._ltIndexCache.length)throw new Error("Too much lookahead.");this._ltIndex-=this._ltIndexCache.pop(),this._token=this._lt[this._ltIndex-1]}},n.util={__proto__:null,StringReader:t,SyntaxError:r,SyntaxUnit:i,EventTarget:e,TokenStreamBase:o}}(),function(){var e=n.util.EventTarget,t=n.util.TokenStreamBase,r=(n.util.StringReader,n.util.SyntaxError),i=n.util.SyntaxUnit,o={__proto__:null,aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32",currentColor:"The value of the 'color' property.",activeBorder:"Active window border.",activecaption:"Active window caption.",appworkspace:"Background color of multiple document interface.",background:"Desktop background.",buttonface:"The face background color for 3-D elements that appear 3-D due to one layer of surrounding border.",buttonhighlight:"The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border.",buttonshadow:"The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border.",buttontext:"Text on push buttons.",captiontext:"Text in caption, size box, and scrollbar arrow box.",graytext:"Grayed (disabled) text. This color is set to #000 if the current display driver does not support a solid gray color.",greytext:"Greyed (disabled) text. This color is set to #000 if the current display driver does not support a solid grey color.",highlight:"Item(s) selected in a control.",highlighttext:"Text of item(s) selected in a control.",inactiveborder:"Inactive window border.",inactivecaption:"Inactive window caption.",inactivecaptiontext:"Color of text in an inactive caption.",infobackground:"Background color for tooltip controls.",infotext:"Text color for tooltip controls.",menu:"Menu background.",menutext:"Text in menus.",scrollbar:"Scroll bar gray area.",threeddarkshadow:"The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",threedface:"The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",threedhighlight:"The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",threedlightshadow:"The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",threedshadow:"The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",window:"Window background.",windowframe:"Window frame.",windowtext:"Text in windows."};function a(e,t,r){i.call(this,e,t,r,l.COMBINATOR_TYPE),this.type="unknown",/^\s+$/.test(e)?this.type="descendant":">"===e?this.type="child":"+"===e?this.type="adjacent-sibling":"~"===e&&(this.type="sibling")}function s(e,t){i.call(this,"("+e+(null!==t?":"+t:"")+")",e.startLine,e.startCol,l.MEDIA_FEATURE_TYPE),this.name=e,this.value=t}function c(e,t,r,n,o){i.call(this,(e?e+" ":"")+(t||"")+(t&&r.length>0?" and ":"")+r.join(" and "),n,o,l.MEDIA_QUERY_TYPE),this.modifier=e,this.mediaType=t,this.features=r}function l(t){e.call(this),this.options=t||{},this._tokenStream=null}a.prototype=new i,a.prototype.constructor=a,s.prototype=new i,s.prototype.constructor=s,c.prototype=new i,c.prototype.constructor=c,l.DEFAULT_TYPE=0,l.COMBINATOR_TYPE=1,l.MEDIA_FEATURE_TYPE=2,l.MEDIA_QUERY_TYPE=3,l.PROPERTY_NAME_TYPE=4,l.PROPERTY_VALUE_TYPE=5,l.PROPERTY_VALUE_PART_TYPE=6,l.SELECTOR_TYPE=7,l.SELECTOR_PART_TYPE=8,l.SELECTOR_SUB_PART_TYPE=9,l.prototype=function(){var t,n=new e,o={__proto__:null,constructor:l,DEFAULT_TYPE:0,COMBINATOR_TYPE:1,MEDIA_FEATURE_TYPE:2,MEDIA_QUERY_TYPE:3,PROPERTY_NAME_TYPE:4,PROPERTY_VALUE_TYPE:5,PROPERTY_VALUE_PART_TYPE:6,SELECTOR_TYPE:7,SELECTOR_PART_TYPE:8,SELECTOR_SUB_PART_TYPE:9,_stylesheet:function(){var e,t,n,i=this._tokenStream;for(this.fire("startstylesheet"),this._charset(),this._skipCruft();i.peek()===A.IMPORT_SYM;)this._import(),this._skipCruft();for(;i.peek()===A.NAMESPACE_SYM;)this._namespace(),this._skipCruft();for(n=i.peek();n>A.EOF;){try{switch(n){case A.MEDIA_SYM:this._media(),this._skipCruft();break;case A.PAGE_SYM:this._page(),this._skipCruft();break;case A.FONT_FACE_SYM:this._font_face(),this._skipCruft();break;case A.KEYFRAMES_SYM:this._keyframes(),this._skipCruft();break;case A.VIEWPORT_SYM:this._viewport(),this._skipCruft();break;case A.DOCUMENT_SYM:this._document(),this._skipCruft();break;case A.UNKNOWN_SYM:if(i.get(),this.options.strict)throw new r("Unknown @ rule.",i.LT(0).startLine,i.LT(0).startCol);for(this.fire({type:"error",error:null,message:"Unknown @ rule: "+i.LT(0).value+".",line:i.LT(0).startLine,col:i.LT(0).startCol}),e=0;i.advance([A.LBRACE,A.RBRACE])===A.LBRACE;)e++;for(;e;)i.advance([A.RBRACE]),e--;break;case A.S:this._readWhitespace();break;default:if(!this._ruleset())switch(n){case A.CHARSET_SYM:throw t=i.LT(1),this._charset(!1),new r("@charset not allowed here.",t.startLine,t.startCol);case A.IMPORT_SYM:throw t=i.LT(1),this._import(!1),new r("@import not allowed here.",t.startLine,t.startCol);case A.NAMESPACE_SYM:throw t=i.LT(1),this._namespace(!1),new r("@namespace not allowed here.",t.startLine,t.startCol);default:i.get(),this._unexpectedToken(i.token())}}}catch(e){if(!(e instanceof r)||this.options.strict)throw e;this.fire({type:"error",error:e,message:e.message,line:e.line,col:e.col})}n=i.peek()}n!==A.EOF&&this._unexpectedToken(i.token()),this.fire("endstylesheet")},_charset:function(e){var t,r,n,i=this._tokenStream;i.match(A.CHARSET_SYM)&&(r=i.token().startLine,n=i.token().startCol,this._readWhitespace(),i.mustMatch(A.STRING),t=i.token().value,this._readWhitespace(),i.mustMatch(A.SEMICOLON),!1!==e&&this.fire({type:"charset",charset:t,line:r,col:n}))},_import:function(e){var t,r,n,i=this._tokenStream;i.mustMatch(A.IMPORT_SYM),r=i.token(),this._readWhitespace(),i.mustMatch([A.STRING,A.URI]),t=i.token().value.replace(/^(?:url\()?["']?([^"']+?)["']?\)?$/,"$1"),this._readWhitespace(),n=this._media_query_list(),i.mustMatch(A.SEMICOLON),this._readWhitespace(),!1!==e&&this.fire({type:"import",uri:t,media:n,line:r.startLine,col:r.startCol})},_namespace:function(e){var t,r,n,i,o=this._tokenStream;o.mustMatch(A.NAMESPACE_SYM),t=o.token().startLine,r=o.token().startCol,this._readWhitespace(),o.match(A.IDENT)&&(n=o.token().value,this._readWhitespace()),o.mustMatch([A.STRING,A.URI]),i=o.token().value.replace(/(?:url\()?["']([^"']+)["']\)?/,"$1"),this._readWhitespace(),o.mustMatch(A.SEMICOLON),this._readWhitespace(),!1!==e&&this.fire({type:"namespace",prefix:n,uri:i,line:t,col:r})},_media:function(){var e,t,r,n=this._tokenStream;for(n.mustMatch(A.MEDIA_SYM),e=n.token().startLine,t=n.token().startCol,this._readWhitespace(),r=this._media_query_list(),n.mustMatch(A.LBRACE),this._readWhitespace(),this.fire({type:"startmedia",media:r,line:e,col:t});;)if(n.peek()===A.PAGE_SYM)this._page();else if(n.peek()===A.FONT_FACE_SYM)this._font_face();else if(n.peek()===A.VIEWPORT_SYM)this._viewport();else if(n.peek()===A.DOCUMENT_SYM)this._document();else if(!this._ruleset())break;n.mustMatch(A.RBRACE),this._readWhitespace(),this.fire({type:"endmedia",media:r,line:e,col:t})},_media_query_list:function(){var e=this._tokenStream,t=[];for(this._readWhitespace(),e.peek()!==A.IDENT&&e.peek()!==A.LPAREN||t.push(this._media_query());e.match(A.COMMA);)this._readWhitespace(),t.push(this._media_query());return t},_media_query:function(){var e=this._tokenStream,t=null,r=null,n=null,i=[];if(e.match(A.IDENT)&&("only"!==(r=e.token().value.toLowerCase())&&"not"!==r?(e.unget(),r=null):n=e.token()),this._readWhitespace(),e.peek()===A.IDENT?(t=this._media_type(),null===n&&(n=e.token())):e.peek()===A.LPAREN&&(null===n&&(n=e.LT(1)),i.push(this._media_expression())),null===t&&0===i.length)return null;for(this._readWhitespace();e.match(A.IDENT);)"and"!==e.token().value.toLowerCase()&&this._unexpectedToken(e.token()),this._readWhitespace(),i.push(this._media_expression());return new c(r,t,i,n.startLine,n.startCol)},_media_type:function(){return this._media_feature()},_media_expression:function(){var e,t,r=this._tokenStream,n=null;return r.mustMatch(A.LPAREN),e=this._media_feature(),this._readWhitespace(),r.match(A.COLON)&&(this._readWhitespace(),t=r.LT(1),n=this._expression()),r.mustMatch(A.RPAREN),this._readWhitespace(),new s(e,n?new i(n,t.startLine,t.startCol):null)},_media_feature:function(){var e=this._tokenStream;return this._readWhitespace(),e.mustMatch(A.IDENT),i.fromToken(e.token())},_page:function(){var e,t,r=this._tokenStream,n=null,i=null;r.mustMatch(A.PAGE_SYM),e=r.token().startLine,t=r.token().startCol,this._readWhitespace(),r.match(A.IDENT)&&"auto"===(n=r.token().value).toLowerCase()&&this._unexpectedToken(r.token()),r.peek()===A.COLON&&(i=this._pseudo_page()),this._readWhitespace(),this.fire({type:"startpage",id:n,pseudo:i,line:e,col:t}),this._readDeclarations(!0,!0),this.fire({type:"endpage",id:n,pseudo:i,line:e,col:t})},_margin:function(){var e,t,r=this._tokenStream,n=this._margin_sym();return!!n&&(e=r.token().startLine,t=r.token().startCol,this.fire({type:"startpagemargin",margin:n,line:e,col:t}),this._readDeclarations(!0),this.fire({type:"endpagemargin",margin:n,line:e,col:t}),!0)},_margin_sym:function(){var e=this._tokenStream;return e.match([A.TOPLEFTCORNER_SYM,A.TOPLEFT_SYM,A.TOPCENTER_SYM,A.TOPRIGHT_SYM,A.TOPRIGHTCORNER_SYM,A.BOTTOMLEFTCORNER_SYM,A.BOTTOMLEFT_SYM,A.BOTTOMCENTER_SYM,A.BOTTOMRIGHT_SYM,A.BOTTOMRIGHTCORNER_SYM,A.LEFTTOP_SYM,A.LEFTMIDDLE_SYM,A.LEFTBOTTOM_SYM,A.RIGHTTOP_SYM,A.RIGHTMIDDLE_SYM,A.RIGHTBOTTOM_SYM])?i.fromToken(e.token()):null},_pseudo_page:function(){var e=this._tokenStream;return e.mustMatch(A.COLON),e.mustMatch(A.IDENT),e.token().value},_font_face:function(){var e,t,r=this._tokenStream;r.mustMatch(A.FONT_FACE_SYM),e=r.token().startLine,t=r.token().startCol,this._readWhitespace(),this.fire({type:"startfontface",line:e,col:t}),this._readDeclarations(!0),this.fire({type:"endfontface",line:e,col:t})},_viewport:function(){var e,t,r=this._tokenStream;r.mustMatch(A.VIEWPORT_SYM),e=r.token().startLine,t=r.token().startCol,this._readWhitespace(),this.fire({type:"startviewport",line:e,col:t}),this._readDeclarations(!0),this.fire({type:"endviewport",line:e,col:t})},_document:function(){var e,t=this._tokenStream,r=[],n="";for(t.mustMatch(A.DOCUMENT_SYM),e=t.token(),/^@\-([^\-]+)\-/.test(e.value)&&(n=RegExp.$1),this._readWhitespace(),r.push(this._document_function());t.match(A.COMMA);)this._readWhitespace(),r.push(this._document_function());for(t.mustMatch(A.LBRACE),this._readWhitespace(),this.fire({type:"startdocument",functions:r,prefix:n,line:e.startLine,col:e.startCol});;)if(t.peek()===A.PAGE_SYM)this._page();else if(t.peek()===A.FONT_FACE_SYM)this._font_face();else if(t.peek()===A.VIEWPORT_SYM)this._viewport();else if(t.peek()===A.MEDIA_SYM)this._media();else if(!this._ruleset())break;t.mustMatch(A.RBRACE),this._readWhitespace(),this.fire({type:"enddocument",functions:r,prefix:n,line:e.startLine,col:e.startCol})},_document_function:function(){var e,t=this._tokenStream;return t.match(A.URI)?(e=t.token().value,this._readWhitespace()):e=this._function(),e},_operator:function(e){var t=this._tokenStream,r=null;return(t.match([A.SLASH,A.COMMA])||e&&t.match([A.PLUS,A.STAR,A.MINUS]))&&(r=t.token(),this._readWhitespace()),r?d.fromToken(r):null},_combinator:function(){var e,t=this._tokenStream,r=null;return t.match([A.PLUS,A.GREATER,A.TILDE])&&(r=new a((e=t.token()).value,e.startLine,e.startCol),this._readWhitespace()),r},_unary_operator:function(){var e=this._tokenStream;return e.match([A.MINUS,A.PLUS])?e.token().value:null},_property:function(){var e,t,r,n,i=this._tokenStream,o=null,a=null;return i.peek()===A.STAR&&this.options.starHack&&(i.get(),a=(t=i.token()).value,r=t.startLine,n=t.startCol),i.match(A.IDENT)&&("_"===(e=(t=i.token()).value).charAt(0)&&this.options.underscoreHack&&(a="_",e=e.substring(1)),o=new p(e,a,r||t.startLine,n||t.startCol),this._readWhitespace()),o},_ruleset:function(){var e,t=this._tokenStream;try{e=this._selectors_group()}catch(e){if(!(e instanceof r)||this.options.strict)throw e;if(this.fire({type:"error",error:e,message:e.message,line:e.line,col:e.col}),t.advance([A.RBRACE])!==A.RBRACE)throw e;return!0}return e&&(this.fire({type:"startrule",selectors:e,line:e[0].line,col:e[0].col}),this._readDeclarations(!0),this.fire({type:"endrule",selectors:e,line:e[0].line,col:e[0].col})),e},_selectors_group:function(){var e,t=this._tokenStream,r=[];if(null!==(e=this._selector()))for(r.push(e);t.match(A.COMMA);)this._readWhitespace(),null!==(e=this._selector())?r.push(e):this._unexpectedToken(t.LT(1));return r.length?r:null},_selector:function(){var e=this._tokenStream,t=[],r=null,n=null,i=null;if(null===(r=this._simple_selector_sequence()))return null;for(t.push(r);;)if(null!==(n=this._combinator()))t.push(n),null===(r=this._simple_selector_sequence())?this._unexpectedToken(e.LT(1)):t.push(r);else{if(!this._readWhitespace())break;i=new a(e.token().value,e.token().startLine,e.token().startCol),n=this._combinator(),null===(r=this._simple_selector_sequence())?null!==n&&this._unexpectedToken(e.LT(1)):(null!==n?t.push(n):t.push(i),t.push(r))}return new g(t,t[0].line,t[0].col)},_simple_selector_sequence:function(){var e,t,r=this._tokenStream,n=null,i=[],o="",a=[function(){return r.match(A.HASH)?new v(r.token().value,"id",r.token().startLine,r.token().startCol):null},this._class,this._attrib,this._pseudo,this._negation],s=0,c=a.length,l=null;for(e=r.LT(1).startLine,t=r.LT(1).startCol,(n=this._type_selector())||(n=this._universal()),null!==n&&(o+=n);r.peek()!==A.S;){for(;s<c&&null===l;)l=a[s++].call(this);if(null===l){if(""===o)return null;break}s=0,i.push(l),o+=l.toString(),l=null}return""!==o?new y(n,i,o,e,t):null},_type_selector:function(){var e=this._tokenStream,t=this._namespace_prefix(),r=this._element_name();return r?(t&&(r.text=t+r.text,r.col-=t.length),r):(t&&(e.unget(),t.length>1&&e.unget()),null)},_class:function(){var e,t=this._tokenStream;return t.match(A.DOT)?(t.mustMatch(A.IDENT),new v("."+(e=t.token()).value,"class",e.startLine,e.startCol-1)):null},_element_name:function(){var e,t=this._tokenStream;return t.match(A.IDENT)?new v((e=t.token()).value,"elementName",e.startLine,e.startCol):null},_namespace_prefix:function(){var e=this._tokenStream,t="";return e.LA(1)!==A.PIPE&&e.LA(2)!==A.PIPE||(e.match([A.IDENT,A.STAR])&&(t+=e.token().value),e.mustMatch(A.PIPE),t+="|"),t.length?t:null},_universal:function(){var e,t=this._tokenStream,r="";return(e=this._namespace_prefix())&&(r+=e),t.match(A.STAR)&&(r+="*"),r.length?r:null},_attrib:function(){var e,t,r=this._tokenStream,n=null;return r.match(A.LBRACKET)?(n=(t=r.token()).value,n+=this._readWhitespace(),(e=this._namespace_prefix())&&(n+=e),r.mustMatch(A.IDENT),n+=r.token().value,n+=this._readWhitespace(),r.match([A.PREFIXMATCH,A.SUFFIXMATCH,A.SUBSTRINGMATCH,A.EQUALS,A.INCLUDES,A.DASHMATCH])&&(n+=r.token().value,n+=this._readWhitespace(),r.mustMatch([A.IDENT,A.STRING]),n+=r.token().value,n+=this._readWhitespace()),r.mustMatch(A.RBRACKET),new v(n+"]","attribute",t.startLine,t.startCol)):null},_pseudo:function(){var e,t,r=this._tokenStream,n=null,i=":";return r.match(A.COLON)&&(r.match(A.COLON)&&(i+=":"),r.match(A.IDENT)?(n=r.token().value,e=r.token().startLine,t=r.token().startCol-i.length):r.peek()===A.FUNCTION&&(e=r.LT(1).startLine,t=r.LT(1).startCol-i.length,n=this._functional_pseudo()),n&&(n=new v(i+n,"pseudo",e,t))),n},_functional_pseudo:function(){var e=this._tokenStream,t=null;return e.match(A.FUNCTION)&&(t=e.token().value,t+=this._readWhitespace(),t+=this._expression(),e.mustMatch(A.RPAREN),t+=")"),t},_expression:function(){for(var e=this._tokenStream,t="";e.match([A.PLUS,A.MINUS,A.DIMENSION,A.NUMBER,A.STRING,A.IDENT,A.LENGTH,A.FREQ,A.ANGLE,A.TIME,A.RESOLUTION,A.SLASH]);)t+=e.token().value,t+=this._readWhitespace();return t.length?t:null},_negation:function(){var e,t,r,n=this._tokenStream,i="",o=null;return n.match(A.NOT)&&(i=n.token().value,e=n.token().startLine,t=n.token().startCol,i+=this._readWhitespace(),i+=r=this._negation_arg(),i+=this._readWhitespace(),n.match(A.RPAREN),(o=new v(i+=n.token().value,"not",e,t)).args.push(r)),o},_negation_arg:function(){var e,t,r=this._tokenStream,n=[this._type_selector,this._universal,function(){return r.match(A.HASH)?new v(r.token().value,"id",r.token().startLine,r.token().startCol):null},this._class,this._attrib,this._pseudo],i=null,o=0,a=n.length;for(e=r.LT(1).startLine,t=r.LT(1).startCol;o<a&&null===i;)i=n[o].call(this),o++;return null===i&&this._unexpectedToken(r.LT(1)),"elementName"===i.type?new y(i,[],i.toString(),e,t):new y(null,[i],i.toString(),e,t)},_declaration:function(){var e=this._tokenStream,t=null,r=null,n=null,i=null,o="";if(null!==(t=this._property())){e.mustMatch(A.COLON),this._readWhitespace(),(r=this._expr())&&0!==r.length||this._unexpectedToken(e.LT(1)),n=this._prio(),o=t.toString(),(this.options.starHack&&"*"===t.hack||this.options.underscoreHack&&"_"===t.hack)&&(o=t.text);try{this._validateProperty(o,r)}catch(e){i=e}return this.fire({type:"property",property:t,value:r,important:n,line:t.line,col:t.col,invalid:i}),!0}return!1},_prio:function(){var e=this._tokenStream.match(A.IMPORTANT_SYM);return this._readWhitespace(),e},_expr:function(e){var t=[],r=null,n=null;if(null!==(r=this._term(e)))for(t.push(r);;){if((n=this._operator(e))&&t.push(n),null===(r=this._term(e)))break;t.push(r)}return t.length>0?new h(t,t[0].line,t[0].col):null},_term:function(e){var t,r,n,i,o=this._tokenStream,a=null,s=null;return null!==(t=this._unary_operator())&&(n=o.token().startLine,i=o.token().startCol),o.peek()===A.IE_FUNCTION&&this.options.ieFilters?(a=this._ie_function(),null===t&&(n=o.token().startLine,i=o.token().startCol)):e&&o.match([A.LPAREN,A.LBRACE,A.LBRACKET])?(s=(r=o.token()).endChar,a=r.value+this._expr(e).text,null===t&&(n=o.token().startLine,i=o.token().startCol),o.mustMatch(A.type(s)),a+=s,this._readWhitespace()):o.match([A.NUMBER,A.PERCENTAGE,A.LENGTH,A.ANGLE,A.TIME,A.FREQ,A.STRING,A.IDENT,A.URI,A.UNICODE_RANGE])?(a=o.token().value,null===t&&(n=o.token().startLine,i=o.token().startCol),this._readWhitespace()):null===(r=this._hexcolor())?(null===t&&(n=o.LT(1).startLine,i=o.LT(1).startCol),null===a&&(a=o.LA(3)===A.EQUALS&&this.options.ieFilters?this._ie_function():this._function())):(a=r.value,null===t&&(n=r.startLine,i=r.startCol)),null!==a?new d(null!==t?t+a:a,n,i):null},_function:function(){var e,t=this._tokenStream,r=null;if(t.match(A.FUNCTION)){if(r=t.token().value,this._readWhitespace(),r+=this._expr(!0),this.options.ieFilters&&t.peek()===A.EQUALS)do{for(this._readWhitespace()&&(r+=t.token().value),t.LA(0)===A.COMMA&&(r+=t.token().value),t.match(A.IDENT),r+=t.token().value,t.match(A.EQUALS),r+=t.token().value,e=t.peek();e!==A.COMMA&&e!==A.S&&e!==A.RPAREN;)t.get(),r+=t.token().value,e=t.peek()}while(t.match([A.COMMA,A.S]));t.match(A.RPAREN),r+=")",this._readWhitespace()}return r},_ie_function:function(){var e,t=this._tokenStream,r=null;if(t.match([A.IE_FUNCTION,A.FUNCTION])){r=t.token().value;do{for(this._readWhitespace()&&(r+=t.token().value),t.LA(0)===A.COMMA&&(r+=t.token().value),t.match(A.IDENT),r+=t.token().value,t.match(A.EQUALS),r+=t.token().value,e=t.peek();e!==A.COMMA&&e!==A.S&&e!==A.RPAREN;)t.get(),r+=t.token().value,e=t.peek()}while(t.match([A.COMMA,A.S]));t.match(A.RPAREN),r+=")",this._readWhitespace()}return r},_hexcolor:function(){var e,t=this._tokenStream,n=null;if(t.match(A.HASH)){if(e=(n=t.token()).value,!/#[a-f0-9]{3,6}/i.test(e))throw new r("Expected a hex color but found '"+e+"' at line "+n.startLine+", col "+n.startCol+".",n.startLine,n.startCol);this._readWhitespace()}return n},_keyframes:function(){var e,t,r,n=this._tokenStream,i="";for(n.mustMatch(A.KEYFRAMES_SYM),e=n.token(),/^@\-([^\-]+)\-/.test(e.value)&&(i=RegExp.$1),this._readWhitespace(),r=this._keyframe_name(),this._readWhitespace(),n.mustMatch(A.LBRACE),this.fire({type:"startkeyframes",name:r,prefix:i,line:e.startLine,col:e.startCol}),this._readWhitespace(),t=n.peek();t===A.IDENT||t===A.PERCENTAGE;)this._keyframe_rule(),this._readWhitespace(),t=n.peek();this.fire({type:"endkeyframes",name:r,prefix:i,line:e.startLine,col:e.startCol}),this._readWhitespace(),n.mustMatch(A.RBRACE)},_keyframe_name:function(){var e=this._tokenStream;return e.mustMatch([A.IDENT,A.STRING]),i.fromToken(e.token())},_keyframe_rule:function(){var e=this._key_list();this.fire({type:"startkeyframerule",keys:e,line:e[0].line,col:e[0].col}),this._readDeclarations(!0),this.fire({type:"endkeyframerule",keys:e,line:e[0].line,col:e[0].col})},_key_list:function(){var e=this._tokenStream,t=[];for(t.push(this._key()),this._readWhitespace();e.match(A.COMMA);)this._readWhitespace(),t.push(this._key()),this._readWhitespace();return t},_key:function(){var e,t=this._tokenStream;if(t.match(A.PERCENTAGE))return i.fromToken(t.token());if(t.match(A.IDENT)){if(e=t.token(),/from|to/i.test(e.value))return i.fromToken(e);t.unget()}this._unexpectedToken(t.LT(1))},_skipCruft:function(){for(;this._tokenStream.match([A.S,A.CDO,A.CDC]););},_readDeclarations:function(e,t){var n,i=this._tokenStream;this._readWhitespace(),e&&i.mustMatch(A.LBRACE),this._readWhitespace();try{for(;;){if(i.match(A.SEMICOLON)||t&&this._margin());else{if(!this._declaration())break;if(!i.match(A.SEMICOLON))break}this._readWhitespace()}i.mustMatch(A.RBRACE),this._readWhitespace()}catch(e){if(!(e instanceof r)||this.options.strict)throw e;if(this.fire({type:"error",error:e,message:e.message,line:e.line,col:e.col}),(n=i.advance([A.SEMICOLON,A.RBRACE]))===A.SEMICOLON)this._readDeclarations(!1,t);else if(n!==A.RBRACE)throw e}},_readWhitespace:function(){for(var e=this._tokenStream,t="";e.match(A.S);)t+=e.token().value;return t},_unexpectedToken:function(e){throw new r("Unexpected token '"+e.value+"' at line "+e.startLine+", col "+e.startCol+".",e.startLine,e.startCol)},_verifyEnd:function(){this._tokenStream.LA(1)!==A.EOF&&this._unexpectedToken(this._tokenStream.LT(1))},_validateProperty:function(e,t){O.validate(e,t)},parse:function(e){this._tokenStream=new C(e,A),this._stylesheet()},parseStyleSheet:function(e){return this.parse(e)},parseMediaQuery:function(e){this._tokenStream=new C(e,A);var t=this._media_query();return this._verifyEnd(),t},parsePropertyValue:function(e){this._tokenStream=new C(e,A),this._readWhitespace();var t=this._expr();return this._readWhitespace(),this._verifyEnd(),t},parseRule:function(e){this._tokenStream=new C(e,A),this._readWhitespace();var t=this._ruleset();return this._readWhitespace(),this._verifyEnd(),t},parseSelector:function(e){this._tokenStream=new C(e,A),this._readWhitespace();var t=this._selector();return this._readWhitespace(),this._verifyEnd(),t},parseStyleAttribute:function(e){e+="}",this._tokenStream=new C(e,A),this._readDeclarations()}};for(t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t]);return n}();var u={__proto__:null,"align-items":"flex-start | flex-end | center | baseline | stretch","align-content":"flex-start | flex-end | center | space-between | space-around | stretch","align-self":"auto | flex-start | flex-end | center | baseline | stretch","-webkit-align-items":"flex-start | flex-end | center | baseline | stretch","-webkit-align-content":"flex-start | flex-end | center | space-between | space-around | stretch","-webkit-align-self":"auto | flex-start | flex-end | center | baseline | stretch","alignment-adjust":"auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length>","alignment-baseline":"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical",animation:1,"animation-delay":{multi:"<time>",comma:!0},"animation-direction":{multi:"normal | alternate",comma:!0},"animation-duration":{multi:"<time>",comma:!0},"animation-fill-mode":{multi:"none | forwards | backwards | both",comma:!0},"animation-iteration-count":{multi:"<number> | infinite",comma:!0},"animation-name":{multi:"none | <ident>",comma:!0},"animation-play-state":{multi:"running | paused",comma:!0},"animation-timing-function":1,"-moz-animation-delay":{multi:"<time>",comma:!0},"-moz-animation-direction":{multi:"normal | alternate",comma:!0},"-moz-animation-duration":{multi:"<time>",comma:!0},"-moz-animation-iteration-count":{multi:"<number> | infinite",comma:!0},"-moz-animation-name":{multi:"none | <ident>",comma:!0},"-moz-animation-play-state":{multi:"running | paused",comma:!0},"-ms-animation-delay":{multi:"<time>",comma:!0},"-ms-animation-direction":{multi:"normal | alternate",comma:!0},"-ms-animation-duration":{multi:"<time>",comma:!0},"-ms-animation-iteration-count":{multi:"<number> | infinite",comma:!0},"-ms-animation-name":{multi:"none | <ident>",comma:!0},"-ms-animation-play-state":{multi:"running | paused",comma:!0},"-webkit-animation-delay":{multi:"<time>",comma:!0},"-webkit-animation-direction":{multi:"normal | alternate",comma:!0},"-webkit-animation-duration":{multi:"<time>",comma:!0},"-webkit-animation-fill-mode":{multi:"none | forwards | backwards | both",comma:!0},"-webkit-animation-iteration-count":{multi:"<number> | infinite",comma:!0},"-webkit-animation-name":{multi:"none | <ident>",comma:!0},"-webkit-animation-play-state":{multi:"running | paused",comma:!0},"-o-animation-delay":{multi:"<time>",comma:!0},"-o-animation-direction":{multi:"normal | alternate",comma:!0},"-o-animation-duration":{multi:"<time>",comma:!0},"-o-animation-iteration-count":{multi:"<number> | infinite",comma:!0},"-o-animation-name":{multi:"none | <ident>",comma:!0},"-o-animation-play-state":{multi:"running | paused",comma:!0},appearance:"icon | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal | none | inherit",azimuth:function(e){var t,r=!1,n=!1;if(D.isAny(e,"<angle> | leftwards | rightwards | inherit")||(D.isAny(e,"behind")&&(r=!0,n=!0),D.isAny(e,"left-side | far-left | left | center-left | center | center-right | right | far-right | right-side")&&(n=!0,r||D.isAny(e,"behind"))),e.hasNext())throw t=e.next(),new L(n?"Expected end of value but found '"+t+"'.":"Expected (<'azimuth'>) but found '"+t+"'.",t.line,t.col)},"backface-visibility":"visible | hidden",background:1,"background-attachment":{multi:"<attachment>",comma:!0},"background-clip":{multi:"<box>",comma:!0},"background-color":"<color> | inherit","background-image":{multi:"<bg-image>",comma:!0},"background-origin":{multi:"<box>",comma:!0},"background-position":{multi:"<bg-position>",comma:!0},"background-repeat":{multi:"<repeat-style>"},"background-size":{multi:"<bg-size>",comma:!0},"baseline-shift":"baseline | sub | super | <percentage> | <length>",behavior:1,binding:1,bleed:"<length>","bookmark-label":"<content> | <attr> | <string>","bookmark-level":"none | <integer>","bookmark-state":"open | closed","bookmark-target":"none | <uri> | <attr>",border:"<border-width> || <border-style> || <color>","border-bottom":"<border-width> || <border-style> || <color>","border-bottom-color":"<color> | inherit","border-bottom-left-radius":"<x-one-radius>","border-bottom-right-radius":"<x-one-radius>","border-bottom-style":"<border-style>","border-bottom-width":"<border-width>","border-collapse":"collapse | separate | inherit","border-color":{multi:"<color> | inherit",max:4},"border-image":1,"border-image-outset":{multi:"<length> | <number>",max:4},"border-image-repeat":{multi:"stretch | repeat | round",max:2},"border-image-slice":function(e){var t,r=!1,n=!1,i=0;for(D.isAny(e,"fill")&&(n=!0,r=!0);e.hasNext()&&i<4&&(r=D.isAny(e,"<number> | <percentage>"));)i++;if(n?r=!0:D.isAny(e,"fill"),e.hasNext())throw t=e.next(),new L(r?"Expected end of value but found '"+t+"'.":"Expected ([<number> | <percentage>]{1,4} && fill?) but found '"+t+"'.",t.line,t.col)},"border-image-source":"<image> | none","border-image-width":{multi:"<length> | <percentage> | <number> | auto",max:4},"border-left":"<border-width> || <border-style> || <color>","border-left-color":"<color> | inherit","border-left-style":"<border-style>","border-left-width":"<border-width>","border-radius":function(e){for(var t,r=!1,n=!1,i=0,o=8;e.hasNext()&&i<o;){if(!(r=D.isAny(e,"<length> | <percentage> | inherit"))){if(!("/"===String(e.peek())&&i>0)||n)break;n=!0,o=i+5,e.next()}i++}if(e.hasNext())throw t=e.next(),new L(r?"Expected end of value but found '"+t+"'.":"Expected (<'border-radius'>) but found '"+t+"'.",t.line,t.col)},"border-right":"<border-width> || <border-style> || <color>","border-right-color":"<color> | inherit","border-right-style":"<border-style>","border-right-width":"<border-width>","border-spacing":{multi:"<length> | inherit",max:2},"border-style":{multi:"<border-style>",max:4},"border-top":"<border-width> || <border-style> || <color>","border-top-color":"<color> | inherit","border-top-left-radius":"<x-one-radius>","border-top-right-radius":"<x-one-radius>","border-top-style":"<border-style>","border-top-width":"<border-width>","border-width":{multi:"<border-width>",max:4},bottom:"<margin-width> | inherit","-moz-box-align":"start | end | center | baseline | stretch","-moz-box-decoration-break":"slice |clone","-moz-box-direction":"normal | reverse | inherit","-moz-box-flex":"<number>","-moz-box-flex-group":"<integer>","-moz-box-lines":"single | multiple","-moz-box-ordinal-group":"<integer>","-moz-box-orient":"horizontal | vertical | inline-axis | block-axis | inherit","-moz-box-pack":"start | end | center | justify","-o-box-decoration-break":"slice | clone","-webkit-box-align":"start | end | center | baseline | stretch","-webkit-box-decoration-break":"slice |clone","-webkit-box-direction":"normal | reverse | inherit","-webkit-box-flex":"<number>","-webkit-box-flex-group":"<integer>","-webkit-box-lines":"single | multiple","-webkit-box-ordinal-group":"<integer>","-webkit-box-orient":"horizontal | vertical | inline-axis | block-axis | inherit","-webkit-box-pack":"start | end | center | justify","box-decoration-break":"slice | clone","box-shadow":function(e){var t;if(D.isAny(e,"none")){if(e.hasNext())throw new L("Expected end of value but found '"+(t=e.next())+"'.",t.line,t.col)}else O.multiProperty("<shadow>",e,!0,1/0)},"box-sizing":"content-box | border-box | inherit","break-after":"auto | always | avoid | left | right | page | column | avoid-page | avoid-column","break-before":"auto | always | avoid | left | right | page | column | avoid-page | avoid-column","break-inside":"auto | avoid | avoid-page | avoid-column","caption-side":"top | bottom | inherit",clear:"none | right | left | both | inherit",clip:1,color:"<color> | inherit","color-profile":1,"column-count":"<integer> | auto","column-fill":"auto | balance","column-gap":"<length> | normal","column-rule":"<border-width> || <border-style> || <color>","column-rule-color":"<color>","column-rule-style":"<border-style>","column-rule-width":"<border-width>","column-span":"none | all","column-width":"<length> | auto",columns:1,content:1,"counter-increment":1,"counter-reset":1,crop:"<shape> | auto",cue:"cue-after | cue-before | inherit","cue-after":1,"cue-before":1,cursor:1,direction:"ltr | rtl | inherit",display:"inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | grid | inline-grid | run-in | ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | contents | none | inherit | -moz-box | -moz-inline-block | -moz-inline-box | -moz-inline-grid | -moz-inline-stack | -moz-inline-table | -moz-grid | -moz-grid-group | -moz-grid-line | -moz-groupbox | -moz-deck | -moz-popup | -moz-stack | -moz-marker | -webkit-box | -webkit-inline-box | -ms-flexbox | -ms-inline-flexbox | flex | -webkit-flex | inline-flex | -webkit-inline-flex","dominant-baseline":1,"drop-initial-after-adjust":"central | middle | after-edge | text-after-edge | ideographic | alphabetic | mathematical | <percentage> | <length>","drop-initial-after-align":"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical","drop-initial-before-adjust":"before-edge | text-before-edge | central | middle | hanging | mathematical | <percentage> | <length>","drop-initial-before-align":"caps-height | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical","drop-initial-size":"auto | line | <length> | <percentage>","drop-initial-value":"initial | <integer>",elevation:"<angle> | below | level | above | higher | lower | inherit","empty-cells":"show | hide | inherit",filter:1,fit:"fill | hidden | meet | slice","fit-position":1,flex:"<flex>","flex-basis":"<width>","flex-direction":"row | row-reverse | column | column-reverse","flex-flow":"<flex-direction> || <flex-wrap>","flex-grow":"<number>","flex-shrink":"<number>","flex-wrap":"nowrap | wrap | wrap-reverse","-webkit-flex":"<flex>","-webkit-flex-basis":"<width>","-webkit-flex-direction":"row | row-reverse | column | column-reverse","-webkit-flex-flow":"<flex-direction> || <flex-wrap>","-webkit-flex-grow":"<number>","-webkit-flex-shrink":"<number>","-webkit-flex-wrap":"nowrap | wrap | wrap-reverse","-ms-flex":"<flex>","-ms-flex-align":"start | end | center | stretch | baseline","-ms-flex-direction":"row | row-reverse | column | column-reverse | inherit","-ms-flex-order":"<number>","-ms-flex-pack":"start | end | center | justify","-ms-flex-wrap":"nowrap | wrap | wrap-reverse",float:"left | right | none | inherit","float-offset":1,font:1,"font-family":1,"font-feature-settings":"<feature-tag-value> | normal | inherit","font-kerning":"auto | normal | none | initial | inherit | unset","font-size":"<absolute-size> | <relative-size> | <length> | <percentage> | inherit","font-size-adjust":"<number> | none | inherit","font-stretch":"normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit","font-style":"normal | italic | oblique | inherit","font-variant":"normal | small-caps | inherit","font-variant-caps":"normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps","font-variant-position":"normal | sub | super | inherit | initial | unset","font-weight":"normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit",grid:1,"grid-area":1,"grid-auto-columns":1,"grid-auto-flow":1,"grid-auto-position":1,"grid-auto-rows":1,"grid-cell-stacking":"columns | rows | layer","grid-column":1,"grid-columns":1,"grid-column-align":"start | end | center | stretch","grid-column-sizing":1,"grid-column-start":1,"grid-column-end":1,"grid-column-span":"<integer>","grid-flow":"none | rows | columns","grid-layer":"<integer>","grid-row":1,"grid-rows":1,"grid-row-align":"start | end | center | stretch","grid-row-start":1,"grid-row-end":1,"grid-row-span":"<integer>","grid-row-sizing":1,"grid-template":1,"grid-template-areas":1,"grid-template-columns":1,"grid-template-rows":1,"hanging-punctuation":1,height:"<margin-width> | <content-sizing> | inherit","hyphenate-after":"<integer> | auto","hyphenate-before":"<integer> | auto","hyphenate-character":"<string> | auto","hyphenate-lines":"no-limit | <integer>","hyphenate-resource":1,hyphens:"none | manual | auto",icon:1,"image-orientation":"angle | auto","image-rendering":1,"image-resolution":1,"ime-mode":"auto | normal | active | inactive | disabled | inherit","inline-box-align":"initial | last | <integer>","justify-content":"flex-start | flex-end | center | space-between | space-around","-webkit-justify-content":"flex-start | flex-end | center | space-between | space-around",left:"<margin-width> | inherit","letter-spacing":"<length> | normal | inherit","line-height":"<number> | <length> | <percentage> | normal | inherit","line-break":"auto | loose | normal | strict","line-stacking":1,"line-stacking-ruby":"exclude-ruby | include-ruby","line-stacking-shift":"consider-shifts | disregard-shifts","line-stacking-strategy":"inline-line-height | block-line-height | max-height | grid-height","list-style":1,"list-style-image":"<uri> | none | inherit","list-style-position":"inside | outside | inherit","list-style-type":"disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit",margin:{multi:"<margin-width> | inherit",max:4},"margin-bottom":"<margin-width> | inherit","margin-left":"<margin-width> | inherit","margin-right":"<margin-width> | inherit","margin-top":"<margin-width> | inherit",mark:1,"mark-after":1,"mark-before":1,marks:1,"marquee-direction":1,"marquee-play-count":1,"marquee-speed":1,"marquee-style":1,"max-height":"<length> | <percentage> | <content-sizing> | none | inherit","max-width":"<length> | <percentage> | <content-sizing> | none | inherit","min-height":"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit","min-width":"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit","move-to":1,"nav-down":1,"nav-index":1,"nav-left":1,"nav-right":1,"nav-up":1,"object-fit":"fill | contain | cover | none | scale-down","object-position":"<bg-position>",opacity:"<number> | inherit",order:"<integer>","-webkit-order":"<integer>",orphans:"<integer> | inherit",outline:1,"outline-color":"<color> | invert | inherit","outline-offset":1,"outline-style":"<border-style> | inherit","outline-width":"<border-width> | inherit",overflow:"visible | hidden | scroll | auto | inherit","overflow-style":1,"overflow-wrap":"normal | break-word","overflow-x":1,"overflow-y":1,padding:{multi:"<padding-width> | inherit",max:4},"padding-bottom":"<padding-width> | inherit","padding-left":"<padding-width> | inherit","padding-right":"<padding-width> | inherit","padding-top":"<padding-width> | inherit",page:1,"page-break-after":"auto | always | avoid | left | right | inherit","page-break-before":"auto | always | avoid | left | right | inherit","page-break-inside":"auto | avoid | inherit","page-policy":1,pause:1,"pause-after":1,"pause-before":1,perspective:1,"perspective-origin":1,phonemes:1,pitch:1,"pitch-range":1,"play-during":1,"pointer-events":"auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",position:"static | relative | absolute | fixed | inherit","presentation-level":1,"punctuation-trim":1,quotes:1,"rendering-intent":1,resize:1,rest:1,"rest-after":1,"rest-before":1,richness:1,right:"<margin-width> | inherit",rotation:1,"rotation-point":1,"ruby-align":1,"ruby-overhang":1,"ruby-position":1,"ruby-span":1,size:1,speak:"normal | none | spell-out | inherit","speak-header":"once | always | inherit","speak-numeral":"digits | continuous | inherit","speak-punctuation":"code | none | inherit","speech-rate":1,src:1,stress:1,"string-set":1,"table-layout":"auto | fixed | inherit","tab-size":"<integer> | <length>",target:1,"target-name":1,"target-new":1,"target-position":1,"text-align":"left | right | center | justify | match-parent | start | end | inherit","text-align-last":1,"text-decoration":1,"text-emphasis":1,"text-height":1,"text-indent":"<length> | <percentage> | inherit","text-justify":"auto | none | inter-word | inter-ideograph | inter-cluster | distribute | kashida","text-outline":1,"text-overflow":1,"text-rendering":"auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit","text-shadow":1,"text-transform":"capitalize | uppercase | lowercase | none | inherit","text-wrap":"normal | none | avoid",top:"<margin-width> | inherit","-ms-touch-action":"auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation","touch-action":"auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation",transform:1,"transform-origin":1,"transform-style":1,transition:1,"transition-delay":1,"transition-duration":1,"transition-property":1,"transition-timing-function":1,"unicode-bidi":"normal | embed | isolate | bidi-override | isolate-override | plaintext | inherit","user-modify":"read-only | read-write | write-only | inherit","user-select":"none | text | toggle | element | elements | all | inherit","vertical-align":"auto | use-script | baseline | sub | super | top | text-top | central | middle | bottom | text-bottom | <percentage> | <length> | inherit",visibility:"visible | hidden | collapse | inherit","voice-balance":1,"voice-duration":1,"voice-family":1,"voice-pitch":1,"voice-pitch-range":1,"voice-rate":1,"voice-stress":1,"voice-volume":1,volume:1,"white-space":"normal | pre | nowrap | pre-wrap | pre-line | inherit | -pre-wrap | -o-pre-wrap | -moz-pre-wrap | -hp-pre-wrap","white-space-collapse":1,widows:"<integer> | inherit",width:"<length> | <percentage> | <content-sizing> | auto | inherit","will-change":{multi:"<ident>",comma:!0},"word-break":"normal | keep-all | break-all","word-spacing":"<length> | normal | inherit","word-wrap":"normal | break-word","writing-mode":"horizontal-tb | vertical-rl | vertical-lr | lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr | lr-bt | rl-bt | lr | rl | tb | inherit","z-index":"<integer> | auto | inherit",zoom:"<number> | <percentage> | normal"};function p(e,t,r,n){i.call(this,e,r,n,l.PROPERTY_NAME_TYPE),this.hack=t}function h(e,t,r){i.call(this,e.join(" "),t,r,l.PROPERTY_VALUE_TYPE),this.parts=e}function f(e){this._i=0,this._parts=e.parts,this._marks=[],this.value=e}function d(e,t,r){var n;if(i.call(this,e,t,r,l.PROPERTY_VALUE_PART_TYPE),this.type="unknown",/^([+\-]?[\d\.]+)([a-z]+)$/i.test(e))switch(this.type="dimension",this.value=+RegExp.$1,this.units=RegExp.$2,this.units.toLowerCase()){case"em":case"rem":case"ex":case"px":case"cm":case"mm":case"in":case"pt":case"pc":case"ch":case"vh":case"vw":case"vmax":case"vmin":this.type="length";break;case"fr":this.type="grid";break;case"deg":case"rad":case"grad":this.type="angle";break;case"ms":case"s":this.type="time";break;case"hz":case"khz":this.type="frequency";break;case"dpi":case"dpcm":this.type="resolution"}else/^([+\-]?[\d\.]+)%$/i.test(e)?(this.type="percentage",this.value=+RegExp.$1):/^([+\-]?\d+)$/i.test(e)?(this.type="integer",this.value=+RegExp.$1):/^([+\-]?[\d\.]+)$/i.test(e)?(this.type="number",this.value=+RegExp.$1):/^#([a-f0-9]{3,6})/i.test(e)?(this.type="color",3===(n=RegExp.$1).length?(this.red=parseInt(n.charAt(0)+n.charAt(0),16),this.green=parseInt(n.charAt(1)+n.charAt(1),16),this.blue=parseInt(n.charAt(2)+n.charAt(2),16)):(this.red=parseInt(n.substring(0,2),16),this.green=parseInt(n.substring(2,4),16),this.blue=parseInt(n.substring(4,6),16))):/^rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i.test(e)?(this.type="color",this.red=+RegExp.$1,this.green=+RegExp.$2,this.blue=+RegExp.$3):/^rgb\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(e)?(this.type="color",this.red=255*+RegExp.$1/100,this.green=255*+RegExp.$2/100,this.blue=255*+RegExp.$3/100):/^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d\.]+)\s*\)/i.test(e)?(this.type="color",this.red=+RegExp.$1,this.green=+RegExp.$2,this.blue=+RegExp.$3,this.alpha=+RegExp.$4):/^rgba\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(e)?(this.type="color",this.red=255*+RegExp.$1/100,this.green=255*+RegExp.$2/100,this.blue=255*+RegExp.$3/100,this.alpha=+RegExp.$4):/^hsl\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(e)?(this.type="color",this.hue=+RegExp.$1,this.saturation=+RegExp.$2/100,this.lightness=+RegExp.$3/100):/^hsla\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(e)?(this.type="color",this.hue=+RegExp.$1,this.saturation=+RegExp.$2/100,this.lightness=+RegExp.$3/100,this.alpha=+RegExp.$4):/^url\(["']?([^\)"']+)["']?\)/i.test(e)?(this.type="uri",this.uri=RegExp.$1):/^([^\(]+)\(/i.test(e)?(this.type="function",this.name=RegExp.$1,this.value=e):/^"([^\n\r\f\\"]|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*"/i.test(e)?(this.type="string",this.value=d.parseString(e)):/^'([^\n\r\f\\']|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*'/i.test(e)?(this.type="string",this.value=d.parseString(e)):o[e.toLowerCase()]?(this.type="color",n=o[e.toLowerCase()].substring(1),this.red=parseInt(n.substring(0,2),16),this.green=parseInt(n.substring(2,4),16),this.blue=parseInt(n.substring(4,6),16)):/^[\,\/]$/.test(e)?(this.type="operator",this.value=e):/^[a-z\-_\u0080-\uFFFF][a-z0-9\-_\u0080-\uFFFF]*$/i.test(e)&&(this.type="identifier",this.value=e)}p.prototype=new i,p.prototype.constructor=p,p.prototype.toString=function(){return(this.hack?this.hack:"")+this.text},h.prototype=new i,h.prototype.constructor=h,f.prototype.count=function(){return this._parts.length},f.prototype.isFirst=function(){return 0===this._i},f.prototype.hasNext=function(){return this._i<this._parts.length},f.prototype.mark=function(){this._marks.push(this._i)},f.prototype.peek=function(e){return this.hasNext()?this._parts[this._i+(e||0)]:null},f.prototype.next=function(){return this.hasNext()?this._parts[this._i++]:null},f.prototype.previous=function(){return this._i>0?this._parts[--this._i]:null},f.prototype.restore=function(){this._marks.length&&(this._i=this._marks.pop())},d.prototype=new i,d.prototype.constructor=d,d.parseString=function(e){return(e=e.slice(1,-1)).replace(/\\(\r\n|[^\r0-9a-f]|[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)/gi,function(e,t){if(/^(\n|\r\n|\r|\f)$/.test(t))return"";var r=/^[0-9a-f]{1,6}/i.exec(t);if(r){var n=parseInt(r[0],16);return String.fromCodePoint?String.fromCodePoint(n):String.fromCharCode(n)}return t})},d.serializeString=function(e){return'"'+e.replace(/["\r\n\f]/g,function(e,t){return'"'===t?"\\"+t:"\\"+(String.codePointAt?String.codePointAt(0):String.charCodeAt(0)).toString(16)+" "})+'"'},d.fromToken=function(e){return new d(e.value,e.startLine,e.startCol)};var m={__proto__:null,":first-letter":1,":first-line":1,":before":1,":after":1};function g(e,t,r){i.call(this,e.join(" "),t,r,l.SELECTOR_TYPE),this.parts=e,this.specificity=b.calculate(this)}function y(e,t,r,n,o){i.call(this,r,n,o,l.SELECTOR_PART_TYPE),this.elementName=e,this.modifiers=t}function v(e,t,r,n){i.call(this,e,r,n,l.SELECTOR_SUB_PART_TYPE),this.type=t,this.args=[]}function b(e,t,r,n){this.a=e,this.b=t,this.c=r,this.d=n}m.ELEMENT=1,m.CLASS=2,m.isElement=function(e){return 0===e.indexOf("::")||m[e.toLowerCase()]===m.ELEMENT},g.prototype=new i,g.prototype.constructor=g,y.prototype=new i,y.prototype.constructor=y,v.prototype=new i,v.prototype.constructor=v,b.prototype={constructor:b,compare:function(e){var t,r,n=["a","b","c","d"];for(t=0,r=n.length;t<r;t++){if(this[n[t]]<e[n[t]])return-1;if(this[n[t]]>e[n[t]])return 1}return 0},valueOf:function(){return 1e3*this.a+100*this.b+10*this.c+this.d},toString:function(){return this.a+","+this.b+","+this.c+","+this.d}},b.calculate=function(e){var t,r,n,i=0,o=0,a=0;function s(e){var t,r,n,c,l,u=e.elementName?e.elementName.text:"";for(u&&"*"!==u.charAt(u.length-1)&&a++,t=0,n=e.modifiers.length;t<n;t++)switch((l=e.modifiers[t]).type){case"class":case"attribute":o++;break;case"id":i++;break;case"pseudo":m.isElement(l.text)?a++:o++;break;case"not":for(r=0,c=l.args.length;r<c;r++)s(l.args[r])}}for(t=0,r=e.parts.length;t<r;t++)(n=e.parts[t])instanceof y&&s(n);return new b(0,i,o,a)};var _=/^[0-9a-fA-F]$/,E=/\n|\r\n|\r|\f/;function w(e){return null!==e&&_.test(e)}function T(e){return null!==e&&/\d/.test(e)}function S(e){return null!==e&&/\s/.test(e)}function k(e){return null!==e&&E.test(e)}function x(e){return null!==e&&/[a-z_\u0080-\uFFFF\\]/i.test(e)}function N(e){return null!==e&&(x(e)||/[0-9\-\\]/.test(e))}function R(e){return null!==e&&(x(e)||/\-\\/.test(e))}function C(e){t.call(this,e,A)}C.prototype=function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}(new t,{_getToken:function(e){var t,r=this._reader,n=null,i=r.getLine(),o=r.getCol();for(t=r.read();t;){switch(t){case"/":n="*"===r.peek()?this.commentToken(t,i,o):this.charToken(t,i,o);break;case"|":case"~":case"^":case"$":case"*":n="="===r.peek()?this.comparisonToken(t,i,o):this.charToken(t,i,o);break;case'"':case"'":n=this.stringToken(t,i,o);break;case"#":n=N(r.peek())?this.hashToken(t,i,o):this.charToken(t,i,o);break;case".":n=T(r.peek())?this.numberToken(t,i,o):this.charToken(t,i,o);break;case"-":n="-"===r.peek()?this.htmlCommentEndToken(t,i,o):x(r.peek())?this.identOrFunctionToken(t,i,o):this.charToken(t,i,o);break;case"!":n=this.importantToken(t,i,o);break;case"@":n=this.atRuleToken(t,i,o);break;case":":n=this.notToken(t,i,o);break;case"<":n=this.htmlCommentStartToken(t,i,o);break;case"U":case"u":if("+"===r.peek()){n=this.unicodeRangeToken(t,i,o);break}default:n=T(t)?this.numberToken(t,i,o):S(t)?this.whitespaceToken(t,i,o):R(t)?this.identOrFunctionToken(t,i,o):this.charToken(t,i,o)}break}return n||null!==t||(n=this.createToken(A.EOF,null,i,o)),n},createToken:function(e,t,r,n,i){var o=this._reader;return{value:t,type:e,channel:(i=i||{}).channel,endChar:i.endChar,hide:i.hide||!1,startLine:r,startCol:n,endLine:o.getLine(),endCol:o.getCol()}},atRuleToken:function(e,t,r){var n=e,i=this._reader,o=A.CHAR;return i.mark(),n=e+this.readName(),(o=A.type(n.toLowerCase()))!==A.CHAR&&o!==A.UNKNOWN||(n.length>1?o=A.UNKNOWN_SYM:(o=A.CHAR,n=e,i.reset())),this.createToken(o,n,t,r)},charToken:function(e,t,r){var n=A.type(e),i={};return-1===n?n=A.CHAR:i.endChar=A[n].endChar,this.createToken(n,e,t,r,i)},commentToken:function(e,t,r){var n=this.readComment(e);return this.createToken(A.COMMENT,n,t,r)},comparisonToken:function(e,t,r){var n=e+this._reader.read(),i=A.type(n)||A.CHAR;return this.createToken(i,n,t,r)},hashToken:function(e,t,r){var n=this.readName(e);return this.createToken(A.HASH,n,t,r)},htmlCommentStartToken:function(e,t,r){var n=this._reader,i=e;return n.mark(),"\x3c!--"===(i+=n.readCount(3))?this.createToken(A.CDO,i,t,r):(n.reset(),this.charToken(e,t,r))},htmlCommentEndToken:function(e,t,r){var n=this._reader,i=e;return n.mark(),"--\x3e"===(i+=n.readCount(2))?this.createToken(A.CDC,i,t,r):(n.reset(),this.charToken(e,t,r))},identOrFunctionToken:function(e,t,r){var n=this._reader,i=this.readName(e),o=A.IDENT,a=["url(","url-prefix(","domain("];return"("===n.peek()?(i+=n.read(),a.indexOf(i.toLowerCase())>-1?(o=A.URI,i=this.readURI(i),a.indexOf(i.toLowerCase())>-1&&(o=A.FUNCTION)):o=A.FUNCTION):":"===n.peek()&&"progid"===i.toLowerCase()&&(i+=n.readTo("("),o=A.IE_FUNCTION),this.createToken(o,i,t,r)},importantToken:function(e,t,r){var n,i,o=this._reader,a=e,s=A.CHAR;for(o.mark(),i=o.read();i;){if("/"===i){if("*"!==o.peek())break;if(""===(n=this.readComment(i)))break}else{if(!S(i)){if(/i/i.test(i)){n=o.readCount(8),/mportant/i.test(n)&&(a+=i+n,s=A.IMPORTANT_SYM);break}break}a+=i+this.readWhitespace()}i=o.read()}return s===A.CHAR?(o.reset(),this.charToken(e,t,r)):this.createToken(s,a,t,r)},notToken:function(e,t,r){var n=this._reader,i=e;return n.mark(),":not("===(i+=n.readCount(4)).toLowerCase()?this.createToken(A.NOT,i,t,r):(n.reset(),this.charToken(e,t,r))},numberToken:function(e,t,r){var n,i=this._reader,o=this.readNumber(e),a=A.NUMBER,s=i.peek();return R(s)?(o+=n=this.readName(i.read()),a=/^em$|^ex$|^px$|^gd$|^rem$|^vw$|^vh$|^vmax$|^vmin$|^ch$|^cm$|^mm$|^in$|^pt$|^pc$/i.test(n)?A.LENGTH:/^deg|^rad$|^grad$/i.test(n)?A.ANGLE:/^ms$|^s$/i.test(n)?A.TIME:/^hz$|^khz$/i.test(n)?A.FREQ:/^dpi$|^dpcm$/i.test(n)?A.RESOLUTION:A.DIMENSION):"%"===s&&(o+=i.read(),a=A.PERCENTAGE),this.createToken(a,o,t,r)},stringToken:function(e,t,r){for(var n=e,i=e,o=this._reader,a=e,s=A.STRING,c=o.read();c&&(i+=c,c!==n||"\\"===a);){if(k(o.peek())&&"\\"!==c){s=A.INVALID;break}a=c,c=o.read()}return null===c&&(s=A.INVALID),this.createToken(s,i,t,r)},unicodeRangeToken:function(e,t,r){var n,i=this._reader,o=e,a=A.CHAR;return"+"===i.peek()&&(i.mark(),o+=i.read(),2===(o+=this.readUnicodeRangePart(!0)).length?i.reset():(a=A.UNICODE_RANGE,-1===o.indexOf("?")&&"-"===i.peek()&&(i.mark(),n=i.read(),1===(n+=this.readUnicodeRangePart(!1)).length?i.reset():o+=n))),this.createToken(a,o,t,r)},whitespaceToken:function(e,t,r){var n=e+this.readWhitespace();return this.createToken(A.S,n,t,r)},readUnicodeRangePart:function(e){for(var t=this._reader,r="",n=t.peek();w(n)&&r.length<6;)t.read(),r+=n,n=t.peek();if(e)for(;"?"===n&&r.length<6;)t.read(),r+=n,n=t.peek();return r},readWhitespace:function(){for(var e=this._reader,t="",r=e.peek();S(r);)e.read(),t+=r,r=e.peek();return t},readNumber:function(e){for(var t=this._reader,r=e,n="."===e,i=t.peek();i;){if(T(i))r+=t.read();else{if("."!==i)break;if(n)break;n=!0,r+=t.read()}i=t.peek()}return r},readString:function(){for(var e=this._reader,t=e.read(),r=t,n=t,i=e.peek();i&&(r+=i=e.read(),i!==t||"\\"===n);){if(k(e.peek())&&"\\"!==i){r="";break}n=i,i=e.peek()}return null===i&&(r=""),r},readURI:function(e){var t=this._reader,r=e,n="",i=t.peek();for(t.mark();i&&S(i);)t.read(),i=t.peek();for(n="'"===i||'"'===i?this.readString():this.readURL(),i=t.peek();i&&S(i);)t.read(),i=t.peek();return""===n||")"!==i?(r=e,t.reset()):r+=n+t.read(),r},readURL:function(){for(var e=this._reader,t="",r=e.peek();/^[!#$%&\\*-~]$/.test(r);)t+=e.read(),r=e.peek();return t},readName:function(e){for(var t=this._reader,r=e||"",n=t.peek();;)if("\\"===n)r+=this.readEscape(t.read()),n=t.peek();else{if(!n||!N(n))break;r+=t.read(),n=t.peek()}return r},readEscape:function(e){var t=this._reader,r=e||"",n=0,i=t.peek();if(w(i))do{r+=t.read(),i=t.peek()}while(i&&w(i)&&++n<6);return 3===r.length&&/\s/.test(i)||7===r.length||1===r.length?t.read():i="",r+i},readComment:function(e){var t=this._reader,r=e||"",n=t.read();if("*"===n){for(;n;){if((r+=n).length>2&&"*"===n&&"/"===t.peek()){r+=t.read();break}n=t.read()}return r}return""}});var A=[{name:"CDO"},{name:"CDC"},{name:"S",whitespace:!0},{name:"COMMENT",comment:!0,hide:!0,channel:"comment"},{name:"INCLUDES",text:"~="},{name:"DASHMATCH",text:"|="},{name:"PREFIXMATCH",text:"^="},{name:"SUFFIXMATCH",text:"$="},{name:"SUBSTRINGMATCH",text:"*="},{name:"STRING"},{name:"IDENT"},{name:"HASH"},{name:"IMPORT_SYM",text:"@import"},{name:"PAGE_SYM",text:"@page"},{name:"MEDIA_SYM",text:"@media"},{name:"FONT_FACE_SYM",text:"@font-face"},{name:"CHARSET_SYM",text:"@charset"},{name:"NAMESPACE_SYM",text:"@namespace"},{name:"VIEWPORT_SYM",text:["@viewport","@-ms-viewport","@-o-viewport"]},{name:"DOCUMENT_SYM",text:["@document","@-moz-document"]},{name:"UNKNOWN_SYM"},{name:"KEYFRAMES_SYM",text:["@keyframes","@-webkit-keyframes","@-moz-keyframes","@-o-keyframes"]},{name:"IMPORTANT_SYM"},{name:"LENGTH"},{name:"ANGLE"},{name:"TIME"},{name:"FREQ"},{name:"DIMENSION"},{name:"PERCENTAGE"},{name:"NUMBER"},{name:"URI"},{name:"FUNCTION"},{name:"UNICODE_RANGE"},{name:"INVALID"},{name:"PLUS",text:"+"},{name:"GREATER",text:">"},{name:"COMMA",text:","},{name:"TILDE",text:"~"},{name:"NOT"},{name:"TOPLEFTCORNER_SYM",text:"@top-left-corner"},{name:"TOPLEFT_SYM",text:"@top-left"},{name:"TOPCENTER_SYM",text:"@top-center"},{name:"TOPRIGHT_SYM",text:"@top-right"},{name:"TOPRIGHTCORNER_SYM",text:"@top-right-corner"},{name:"BOTTOMLEFTCORNER_SYM",text:"@bottom-left-corner"},{name:"BOTTOMLEFT_SYM",text:"@bottom-left"},{name:"BOTTOMCENTER_SYM",text:"@bottom-center"},{name:"BOTTOMRIGHT_SYM",text:"@bottom-right"},{name:"BOTTOMRIGHTCORNER_SYM",text:"@bottom-right-corner"},{name:"LEFTTOP_SYM",text:"@left-top"},{name:"LEFTMIDDLE_SYM",text:"@left-middle"},{name:"LEFTBOTTOM_SYM",text:"@left-bottom"},{name:"RIGHTTOP_SYM",text:"@right-top"},{name:"RIGHTMIDDLE_SYM",text:"@right-middle"},{name:"RIGHTBOTTOM_SYM",text:"@right-bottom"},{name:"RESOLUTION",state:"media"},{name:"IE_FUNCTION"},{name:"CHAR"},{name:"PIPE",text:"|"},{name:"SLASH",text:"/"},{name:"MINUS",text:"-"},{name:"STAR",text:"*"},{name:"LBRACE",endChar:"}",text:"{"},{name:"RBRACE",text:"}"},{name:"LBRACKET",endChar:"]",text:"["},{name:"RBRACKET",text:"]"},{name:"EQUALS",text:"="},{name:"COLON",text:":"},{name:"SEMICOLON",text:";"},{name:"LPAREN",endChar:")",text:"("},{name:"RPAREN",text:")"},{name:"DOT",text:"."}];!function(){var e=[],t=Object.create(null);A.UNKNOWN=-1,A.unshift({name:"EOF"});for(var r=0,n=A.length;r<n;r++)if(e.push(A[r].name),A[A[r].name]=r,A[r].text)if(A[r].text instanceof Array)for(var i=0;i<A[r].text.length;i++)t[A[r].text[i]]=r;else t[A[r].text]=r;A.name=function(t){return e[t]},A.type=function(e){return t[e]||-1}}();var O={validate:function(e,t){var r=e.toString().toLowerCase(),n=new f(t),i=u[r];if(i)"number"!=typeof i&&("string"==typeof i?i.indexOf("||")>-1?this.groupProperty(i,n):this.singleProperty(i,n,1):i.multi?this.multiProperty(i.multi,n,i.comma,i.max||1/0):"function"==typeof i&&i(n));else if(0!==r.indexOf("-"))throw new L("Unknown property '"+e+"'.",e.line,e.col)},singleProperty:function(e,t,r,n){for(var i,o=!1,a=t.value,s=0;t.hasNext()&&s<r&&(o=D.isAny(t,e));)s++;if(!o)throw t.hasNext()&&!t.isFirst()?new L("Expected end of value but found '"+(i=t.peek())+"'.",i.line,i.col):new L("Expected ("+e+") but found '"+a+"'.",a.line,a.col);if(t.hasNext())throw new L("Expected end of value but found '"+(i=t.next())+"'.",i.line,i.col)},multiProperty:function(e,t,r,n){for(var i,o=!1,a=t.value,s=0;t.hasNext()&&!o&&s<n&&D.isAny(t,e);)if(s++,t.hasNext()){if(r){if(","!==String(t.peek()))break;i=t.next()}}else o=!0;if(!o)throw t.hasNext()&&!t.isFirst()?new L("Expected end of value but found '"+(i=t.peek())+"'.",i.line,i.col):(i=t.previous(),r&&","===String(i)?new L("Expected end of value but found '"+i+"'.",i.line,i.col):new L("Expected ("+e+") but found '"+a+"'.",a.line,a.col));if(t.hasNext())throw new L("Expected end of value but found '"+(i=t.next())+"'.",i.line,i.col)},groupProperty:function(e,t,r){for(var n,i,o=!1,a=t.value,s=e.split("||").length,c={count:0},l=!1;t.hasNext()&&!o&&(n=D.isAnyOfGroup(t,e))&&!c[n];)c[n]=1,c.count++,l=!0,c.count!==s&&t.hasNext()||(o=!0);if(!o)throw l&&t.hasNext()?new L("Expected end of value but found '"+(i=t.peek())+"'.",i.line,i.col):new L("Expected ("+e+") but found '"+a+"'.",a.line,a.col);if(t.hasNext())throw new L("Expected end of value but found '"+(i=t.next())+"'.",i.line,i.col)}};function L(e,t,r){this.col=r,this.line=t,this.message=e}L.prototype=new Error;var D={isLiteral:function(e,t){var r,n,i=e.text.toString().toLowerCase(),o=t.split(" | "),a=!1;for(r=0,n=o.length;r<n&&!a;r++)i===o[r].toLowerCase()&&(a=!0);return a},isSimple:function(e){return!!this.simple[e]},isComplex:function(e){return!!this.complex[e]},isAny:function(e,t){var r,n,i=t.split(" | "),o=!1;for(r=0,n=i.length;r<n&&!o&&e.hasNext();r++)o=this.isType(e,i[r]);return o},isAnyOfGroup:function(e,t){var r,n,i=t.split(" || "),o=!1;for(r=0,n=i.length;r<n&&!o;r++)o=this.isType(e,i[r]);return!!o&&i[r-1]},isType:function(e,t){var r=e.peek(),n=!1;return"<"!==t.charAt(0)?(n=this.isLiteral(r,t))&&e.next():this.simple[t]?(n=this.simple[t](r))&&e.next():n=this.complex[t](e),n},simple:{__proto__:null,"<absolute-size>":function(e){return D.isLiteral(e,"xx-small | x-small | small | medium | large | x-large | xx-large")},"<attachment>":function(e){return D.isLiteral(e,"scroll | fixed | local")},"<attr>":function(e){return"function"===e.type&&"attr"===e.name},"<bg-image>":function(e){return this["<image>"](e)||this["<gradient>"](e)||"none"===String(e)},"<gradient>":function(e){return"function"===e.type&&/^(?:\-(?:ms|moz|o|webkit)\-)?(?:repeating\-)?(?:radial\-|linear\-)?gradient/i.test(e)},"<box>":function(e){return D.isLiteral(e,"padding-box | border-box | content-box")},"<content>":function(e){return"function"===e.type&&"content"===e.name},"<relative-size>":function(e){return D.isLiteral(e,"smaller | larger")},"<ident>":function(e){return"identifier"===e.type},"<length>":function(e){return!("function"!==e.type||!/^(?:\-(?:ms|moz|o|webkit)\-)?calc/i.test(e))||("length"===e.type||"number"===e.type||"integer"===e.type||"0"===String(e))},"<color>":function(e){return"color"===e.type||"transparent"===String(e)||"currentColor"===String(e)},"<number>":function(e){return"number"===e.type||this["<integer>"](e)},"<integer>":function(e){return"integer"===e.type},"<line>":function(e){return"integer"===e.type},"<angle>":function(e){return"angle"===e.type},"<uri>":function(e){return"uri"===e.type},"<image>":function(e){return this["<uri>"](e)},"<percentage>":function(e){return"percentage"===e.type||"0"===String(e)},"<border-width>":function(e){return this["<length>"](e)||D.isLiteral(e,"thin | medium | thick")},"<border-style>":function(e){return D.isLiteral(e,"none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset")},"<content-sizing>":function(e){return D.isLiteral(e,"fill-available | -moz-available | -webkit-fill-available | max-content | -moz-max-content | -webkit-max-content | min-content | -moz-min-content | -webkit-min-content | fit-content | -moz-fit-content | -webkit-fit-content")},"<margin-width>":function(e){return this["<length>"](e)||this["<percentage>"](e)||D.isLiteral(e,"auto")},"<padding-width>":function(e){return this["<length>"](e)||this["<percentage>"](e)},"<shape>":function(e){return"function"===e.type&&("rect"===e.name||"inset-rect"===e.name)},"<time>":function(e){return"time"===e.type},"<flex-grow>":function(e){return this["<number>"](e)},"<flex-shrink>":function(e){return this["<number>"](e)},"<width>":function(e){return this["<margin-width>"](e)},"<flex-basis>":function(e){return this["<width>"](e)},"<flex-direction>":function(e){return D.isLiteral(e,"row | row-reverse | column | column-reverse")},"<flex-wrap>":function(e){return D.isLiteral(e,"nowrap | wrap | wrap-reverse")},"<feature-tag-value>":function(e){return"function"===e.type&&/^[A-Z0-9]{4}$/i.test(e)}},complex:{__proto__:null,"<bg-position>":function(e){for(var t=!1,r="<percentage> | <length>",n="left | right",i="top | bottom",o=0;e.peek(o)&&","!==e.peek(o).text;)o++;return o<3?D.isAny(e,n+" | center | "+r)?(t=!0,D.isAny(e,i+" | center | "+r)):D.isAny(e,i)&&(t=!0,D.isAny(e,n+" | center")):D.isAny(e,n)?D.isAny(e,i)?(t=!0,D.isAny(e,r)):D.isAny(e,r)&&(D.isAny(e,i)?(t=!0,D.isAny(e,r)):D.isAny(e,"center")&&(t=!0)):D.isAny(e,i)?D.isAny(e,n)?(t=!0,D.isAny(e,r)):D.isAny(e,r)&&(D.isAny(e,n)?(t=!0,D.isAny(e,r)):D.isAny(e,"center")&&(t=!0)):D.isAny(e,"center")&&D.isAny(e,n+" | "+i)&&(t=!0,D.isAny(e,r)),t},"<bg-size>":function(e){var t=!1,r="<percentage> | <length> | auto";return D.isAny(e,"cover | contain")?t=!0:D.isAny(e,r)&&(t=!0,D.isAny(e,r)),t},"<repeat-style>":function(e){var t,r=!1,n="repeat | space | round | no-repeat";return e.hasNext()&&(t=e.next(),D.isLiteral(t,"repeat-x | repeat-y")?r=!0:D.isLiteral(t,n)&&(r=!0,e.hasNext()&&D.isLiteral(e.peek(),n)&&e.next())),r},"<shadow>":function(e){var t=!1,r=0,n=!1,i=!1;if(e.hasNext()){for(D.isAny(e,"inset")&&(n=!0),D.isAny(e,"<color>")&&(i=!0);D.isAny(e,"<length>")&&r<4;)r++;e.hasNext()&&(i||D.isAny(e,"<color>"),n||D.isAny(e,"inset")),t=r>=2&&r<=4}return t},"<x-one-radius>":function(e){var t=!1,r="<length> | <percentage> | inherit";return D.isAny(e,r)&&(t=!0,D.isAny(e,r)),t},"<flex>":function(e){var t,r=!1;if(D.isAny(e,"none | inherit")?r=!0:D.isType(e,"<flex-grow>")?e.peek()?D.isType(e,"<flex-shrink>")?r=!e.peek()||D.isType(e,"<flex-basis>"):D.isType(e,"<flex-basis>")&&(r=null===e.peek()):r=!0:D.isType(e,"<flex-basis>")&&(r=!0),!r)throw t=e.peek(),new L("Expected (none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]) but found '"+e.value.text+"'.",t.line,t.col);return r}}};n.css={__proto__:null,Colors:o,Combinator:a,Parser:l,PropertyName:p,PropertyValue:h,PropertyValuePart:d,MediaFeature:s,MediaQuery:c,Selector:g,SelectorPart:y,SelectorSubPart:v,Specificity:b,TokenStream:C,Tokens:A,ValidationError:L}}(),function(){for(var e in n)t[e]=n[e]}()},function(e,t,r){"use strict";e.exports=i;var n=r(11);function i(e,t){n.call(this,e,t)}i.prototype=Object.create(n.prototype,{constructor:{value:i}})},function(e,t,r){"use strict";e.exports=s;var n=r(14),i=r(36);function o(e,t,r){return r?i.next(e,t):e===t?null:i.previous(e,null)}function a(e,t){var r,i;for(r=e.referenceNode,i=e.pointerBeforeReferenceNode;;){if(i===t)i=!i;else if(null===(r=o(r,e.root,t)))return null;if(e.filter.acceptNode(r)===n.FILTER_ACCEPT)break}return e.referenceNode=r,e.pointerBeforeReferenceNode=i,r}function s(e,t,r){var i=this,o=!1;if(!e||!e.nodeType)throw new Error("DOMException: NOT_SUPPORTED_ERR");i.root=i.referenceNode=e,i.pointerBeforeReferenceNode=!0,i.whatToShow=Number(t)||0,"function"!=typeof r&&(r=null),i.filter=Object.create(n.prototype),i.filter.acceptNode=function(e){var t;if(o)throw new Error("DOMException: INVALID_STATE_ERR");return 1<<e.nodeType-1&i.whatToShow?null===r?n.FILTER_ACCEPT:(o=!0,t=r(e),o=!1,t):n.FILTER_SKIP}}s.prototype={constructor:s,nextNode:function(){return a(this,!0)},previousNode:function(){return a(this,!1)},detach:function(){}}},function(e,t,r){"use strict";e.exports=l;var n=r(14),i=r(36),o={first:"firstChild",last:"lastChild",next:"firstChild",previous:"lastChild"},a={first:"nextSibling",last:"previousSibling",next:"nextSibling",previous:"previousSibling"};function s(e,t){var r,i,s,c,l;for(i=e.currentNode[o[t]];null!==i;){if((c=e.filter.acceptNode(i))===n.FILTER_ACCEPT)return e.currentNode=i,i;if(c!==n.FILTER_SKIP||null===(r=i[o[t]]))for(;null!==i;){if(null!==(l=i[a[t]])){i=l;break}if(null===(s=i.parentNode)||s===e.root||s===e.currentNode)return null;i=s}else i=r}return null}function c(e,t){var r,i,s;if((r=e.currentNode)===e.root)return null;for(;;){for(s=r[a[t]];null!==s;){if(r=s,(i=e.filter.acceptNode(r))===n.FILTER_ACCEPT)return e.currentNode=r,r;s=r[o[t]],i!==n.FILTER_REJECT&&null!==s||(s=r[a[t]])}if(null===(r=r.parentNode)||r===e.root)return null;if(e.filter.acceptNode(r)===n.FILTER_ACCEPT)return null}}function l(e,t,r){var i=this,o=!1;if(!e||!e.nodeType)throw new Error("DOMException: NOT_SUPPORTED_ERR");i.root=e,i.whatToShow=Number(t)||0,i.currentNode=e,"function"!=typeof r&&(r=null),i.filter=Object.create(n.prototype),i.filter.acceptNode=function(e){var t;if(o)throw new Error("DOMException: INVALID_STATE_ERR");return 1<<e.nodeType-1&i.whatToShow?null===r?n.FILTER_ACCEPT:(o=!0,t=r(e),o=!1,t):n.FILTER_SKIP}}l.prototype={constructor:l,parentNode:function(){for(var e=this.currentNode;null!==e&&e!==this.root;)if(null!==(e=e.parentNode)&&this.filter.acceptNode(e)===n.FILTER_ACCEPT)return this.currentNode=e,e;return null},firstChild:function(){return s(this,"first")},lastChild:function(){return s(this,"last")},previousSibling:function(){return c(this,"previous")},nextSibling:function(){return c(this,"next")},previousNode:function(){var e,t,r;for(e=this.currentNode;e!==this.root;){for(r=e.previousSibling;null!==r;){for(e=r,t=this.filter.acceptNode(e);t!==n.FILTER_REJECT&&null!==e.lastChild;)e=e.lastChild,t=this.filter.acceptNode(e);if(t===n.FILTER_ACCEPT)return this.currentNode=e,e;r=e.previousSibling}if(e===this.root||null===e.parentNode)return null;if(e=e.parentNode,this.filter.acceptNode(e)===n.FILTER_ACCEPT)return this.currentNode=e,e}return null},nextNode:function(){var e,t,r;for(e=this.currentNode,t=n.FILTER_ACCEPT;;){for(;t!==n.FILTER_REJECT&&null!==e.firstChild;)if(e=e.firstChild,(t=this.filter.acceptNode(e))===n.FILTER_ACCEPT)return this.currentNode=e,e;if(null===(r=i.nextSkippingChildren(e,this.root)))return null;if(e=r,(t=this.filter.acceptNode(e))===n.FILTER_ACCEPT)return this.currentNode=e,e}}}},function(e,t,r){"use strict";e.exports=i;var n=r(5);function i(e,t){this.root=e,this.filter=t,this.lastModTime=e.lastModTime,this.done=!1,this.cache=[],this.traverse()}i.prototype={get length(){return this.checkcache(),this.done||this.traverse(),this.cache.length},item:function(e){return this.checkcache(),!this.done&&e>=this.cache.length&&this.traverse(e),this.cache[e]},checkcache:function(){if(this.lastModTime!==this.root.lastModTime){for(var e=this.cache.length-1;e>=0;e--)this[e]=void 0;this.cache.length=0,this.done=!1,this.lastModTime=this.root.lastModTime}},traverse:function(e){var t;for(void 0!==e&&e++;null!==(t=this.next());)if(this[this.cache.length]=t,this.cache.push(t),e&&this.cache.length===e)return;this.done=!0},next:function(){var e,t=0===this.cache.length?this.root:this.cache[this.cache.length-1];for(e=t.nodeType===n.DOCUMENT_NODE?t.documentElement:t.nextElement(this.root);e;){if(this.filter(e))return e;e=e.nextElement(this.root)}return null}}},function(e,t,r){"use strict";var n=r(17),i=r(20),o=r(22);t.createDOMImplementation=function(){return new n},t.createDocument=function(e,t){if(e||t){var r=new i;return r.parse(e||"",!0),r.document()}return(new n).createHTMLDocument("")},t.createWindow=function(e,r){var n=t.createDocument(e);return void 0!==r&&(n._address=r),new o(n)},t.impl=r(31)},function(e,t,r){"use strict";var n=r(12);t.toPromise=n.Observable.prototype.toPromise},function(e,t,r){e.exports=r(2)(20)},function(e,t,r){
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */
!function(e,t,r,n,i){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])};function a(e,t){function r(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}
/**
 * @license Angular v5.2.10
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */var s=function(e){function i(r,n){var i=e.call(this)||this;i._nextAnimationId=0;var o={id:"0",encapsulation:t.ViewEncapsulation.None,styles:[],data:{animation:[]}};return i._renderer=r.createRenderer(n.body,o),i}return a(i,e),i.prototype.build=function(e){var t=this._nextAnimationId.toString();this._nextAnimationId++;var r=Array.isArray(e)?n.sequence(e):e;return u(this._renderer,null,t,"register",[r]),new c(t,this._renderer)},i.decorators=[{type:t.Injectable}],i.ctorParameters=function(){return[{type:t.RendererFactory2},{type:void 0,decorators:[{type:t.Inject,args:[r.DOCUMENT]}]}]},i}(n.AnimationBuilder),c=function(e){function t(t,r){var n=e.call(this)||this;return n._id=t,n._renderer=r,n}return a(t,e),t.prototype.create=function(e,t){return new l(this._id,e,t||{},this._renderer)},t}(n.AnimationFactory),l=function(){function e(e,t,r,n){this.id=e,this.element=t,this._renderer=n,this.parentPlayer=null,this._started=!1,this.totalTime=0,this._command("create",r)}return e.prototype._listen=function(e,t){return this._renderer.listen(this.element,"@@"+this.id+":"+e,t)},e.prototype._command=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return u(this._renderer,this.element,this.id,e,t)},e.prototype.onDone=function(e){this._listen("done",e)},e.prototype.onStart=function(e){this._listen("start",e)},e.prototype.onDestroy=function(e){this._listen("destroy",e)},e.prototype.init=function(){this._command("init")},e.prototype.hasStarted=function(){return this._started},e.prototype.play=function(){this._command("play"),this._started=!0},e.prototype.pause=function(){this._command("pause")},e.prototype.restart=function(){this._command("restart")},e.prototype.finish=function(){this._command("finish")},e.prototype.destroy=function(){this._command("destroy")},e.prototype.reset=function(){this._command("reset")},e.prototype.setPosition=function(e){this._command("setPosition",e)},e.prototype.getPosition=function(){return 0},e}();function u(e,t,r,n,i){return e.setProperty(t,"@@"+r+":"+n,i)}var p=function(){function e(e,t,r){this.delegate=e,this.engine=t,this._zone=r,this._currentId=0,this._microtaskId=1,this._animationCallbacksBuffer=[],this._rendererCache=new Map,this._cdRecurDepth=0,this.promise=Promise.resolve(0),t.onRemovalComplete=function(e,t){t&&t.parentNode(e)&&t.removeChild(e.parentNode,e)}}return e.prototype.createRenderer=function(e,t){var r=this,n=this.delegate.createRenderer(e,t);if(!(e&&t&&t.data&&t.data.animation)){var i=this._rendererCache.get(n);return i||(i=new h("",n,this.engine),this._rendererCache.set(n,i)),i}var o=t.id,a=t.id+"-"+this._currentId;this._currentId++,this.engine.register(a,e);var s=t.data.animation;return s.forEach(function(t){return r.engine.registerTrigger(o,a,e,t.name,t)}),new f(this,a,n,this.engine)},e.prototype.begin=function(){this._cdRecurDepth++,this.delegate.begin&&this.delegate.begin()},e.prototype._scheduleCountTask=function(){var e=this;this.promise.then(function(){e._microtaskId++})},e.prototype.scheduleListenerCallback=function(e,t,r){var n=this;e>=0&&e<this._microtaskId?this._zone.run(function(){return t(r)}):(0==this._animationCallbacksBuffer.length&&Promise.resolve(null).then(function(){n._zone.run(function(){n._animationCallbacksBuffer.forEach(function(e){var t=e[0],r=e[1];t(r)}),n._animationCallbacksBuffer=[]})}),this._animationCallbacksBuffer.push([t,r]))},e.prototype.end=function(){var e=this;this._cdRecurDepth--,0==this._cdRecurDepth&&this._zone.runOutsideAngular(function(){e._scheduleCountTask(),e.engine.flush(e._microtaskId)}),this.delegate.end&&this.delegate.end()},e.prototype.whenRenderingDone=function(){return this.engine.whenRenderingDone()},e.decorators=[{type:t.Injectable}],e.ctorParameters=function(){return[{type:t.RendererFactory2},{type:i.ɵAnimationEngine},{type:t.NgZone}]},e}(),h=function(){function e(e,t,r){this.namespaceId=e,this.delegate=t,this.engine=r,this.destroyNode=this.delegate.destroyNode?function(e){return t.destroyNode(e)}:null}return Object.defineProperty(e.prototype,"data",{get:function(){return this.delegate.data},enumerable:!0,configurable:!0}),e.prototype.destroy=function(){this.engine.destroy(this.namespaceId,this.delegate),this.delegate.destroy()},e.prototype.createElement=function(e,t){return this.delegate.createElement(e,t)},e.prototype.createComment=function(e){return this.delegate.createComment(e)},e.prototype.createText=function(e){return this.delegate.createText(e)},e.prototype.appendChild=function(e,t){this.delegate.appendChild(e,t),this.engine.onInsert(this.namespaceId,t,e,!1)},e.prototype.insertBefore=function(e,t,r){this.delegate.insertBefore(e,t,r),this.engine.onInsert(this.namespaceId,t,e,!0)},e.prototype.removeChild=function(e,t){this.engine.onRemove(this.namespaceId,t,this.delegate)},e.prototype.selectRootElement=function(e){return this.delegate.selectRootElement(e)},e.prototype.parentNode=function(e){return this.delegate.parentNode(e)},e.prototype.nextSibling=function(e){return this.delegate.nextSibling(e)},e.prototype.setAttribute=function(e,t,r,n){this.delegate.setAttribute(e,t,r,n)},e.prototype.removeAttribute=function(e,t,r){this.delegate.removeAttribute(e,t,r)},e.prototype.addClass=function(e,t){this.delegate.addClass(e,t)},e.prototype.removeClass=function(e,t){this.delegate.removeClass(e,t)},e.prototype.setStyle=function(e,t,r,n){this.delegate.setStyle(e,t,r,n)},e.prototype.removeStyle=function(e,t,r){this.delegate.removeStyle(e,t,r)},e.prototype.setProperty=function(e,t,r){"@"==t.charAt(0)&&"@.disabled"==t?this.disableAnimations(e,!!r):this.delegate.setProperty(e,t,r)},e.prototype.setValue=function(e,t){this.delegate.setValue(e,t)},e.prototype.listen=function(e,t,r){return this.delegate.listen(e,t,r)},e.prototype.disableAnimations=function(e,t){this.engine.disableAnimations(e,t)},e}(),f=function(e){function t(t,r,n,i){var o=e.call(this,r,n,i)||this;return o.factory=t,o.namespaceId=r,o}return a(t,e),t.prototype.setProperty=function(e,t,r){"@"==t.charAt(0)?"."==t.charAt(1)&&"@.disabled"==t?(r=void 0===r||!!r,this.disableAnimations(e,r)):this.engine.process(this.namespaceId,e,t.substr(1),r):this.delegate.setProperty(e,t,r)},t.prototype.listen=function(e,t,r){var n,i=this;if("@"==t.charAt(0)){var o=function(e){switch(e){case"body":return document.body;case"document":return document;case"window":return window;default:return e}}(e),a=t.substr(1),s="";return"@"!=a.charAt(0)&&(n=function(e){var t=e.indexOf("."),r=e.substring(0,t),n=e.substr(t+1);return[r,n]}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */(a),a=n[0],s=n[1]),this.engine.listen(this.namespaceId,o,a,s,function(e){var t=e._data||-1;i.factory.scheduleListenerCallback(t,r,e)})}return this.delegate.listen(e,t,r)},t}(h),d=function(e){function r(t,r){return e.call(this,t,r)||this}return a(r,e),r.decorators=[{type:t.Injectable}],r.ctorParameters=function(){return[{type:i.AnimationDriver},{type:i.ɵAnimationStyleNormalizer}]},r}(i.ɵAnimationEngine);function m(){return i.ɵsupportsWebAnimations()?new i.ɵWebAnimationsDriver:new i.ɵNoopAnimationDriver}function g(){return new i.ɵWebAnimationsStyleNormalizer}function y(e,t,r){return new p(e,t,r)}var v=[{provide:n.AnimationBuilder,useClass:s},{provide:i.ɵAnimationStyleNormalizer,useFactory:g},{provide:i.ɵAnimationEngine,useClass:d},{provide:t.RendererFactory2,useFactory:y,deps:[r.ɵDomRendererFactory2,i.ɵAnimationEngine,t.NgZone]}],b=[{provide:i.AnimationDriver,useFactory:m}].concat(v),_=[{provide:i.AnimationDriver,useClass:i.ɵNoopAnimationDriver}].concat(v),E=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{exports:[r.BrowserModule],providers:b}]}],e.ctorParameters=function(){return[]},e}(),w=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{exports:[r.BrowserModule],providers:_}]}],e.ctorParameters=function(){return[]},e}();e.BrowserAnimationsModule=E,e.NoopAnimationsModule=w,e.ɵBrowserAnimationBuilder=s,e.ɵBrowserAnimationFactory=c,e.ɵAnimationRenderer=f,e.ɵAnimationRendererFactory=p,e.ɵa=h,e.ɵf=b,e.ɵg=_,e.ɵb=d,e.ɵd=g,e.ɵe=y,e.ɵc=m,Object.defineProperty(e,"__esModule",{value:!0})}(t,r(0),r(18),r(53),r(54))},function(e,t,r){e.exports=r(2)(39)},function(e,t,r){var n,i,o,a,s,c,l,u,p,h,f,d,m,g,y,v,b;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */!function(r){var _="object"==typeof global?global:"object"==typeof self?self:"object"==typeof this?this:{};function E(e,t){return function(r,n){return e[r]=t?t(r,n):n}}void 0===(n=function(e){var t,r;t=E(_,E(e)),r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},i=function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},a=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var i=0,n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&(r[n[i]]=e[n[i]]);return r},s=function(e,t,r,n){var i,o=arguments.length,a=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,r,a):i(t,r))||a);return o>3&&a&&Object.defineProperty(t,r,a),a},c=function(e,t){return function(r,n){t(r,n,e)}},l=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},u=function(e,t,r,n){return new(r||(r=Promise))(function(i,o){function a(e){try{c(n.next(e))}catch(e){o(e)}}function s(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(a,s)}c((n=n.apply(e,t||[])).next())})},p=function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=n[2&o[0]?"return":o[0]?"throw":"next"])&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[0,i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},h=function(e,t){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])},f=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],r=0;return t?t.call(e):{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}}},d=function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e},g=function(e){return this instanceof g?(this.v=e,this):new g(e)},y=function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise(function(r,n){o.push([e,t,r,n])>1||s(e,t)})})}function s(e,t){try{(r=i[e](t)).value instanceof g?Promise.resolve(r.value.v).then(c,l):u(o[0][2],r)}catch(e){u(o[0][3],e)}var r}function c(e){s("next",e)}function l(e){s("throw",e)}function u(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}},v=function(e){var t,r;return t={},n("next"),n("throw",function(e){throw e}),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,i){e[n]&&(t[n]=function(t){return(r=!r)?{value:g(e[n](t)),done:"return"===n}:i?i(t):t})}},b=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):"function"==typeof f?f(e):e[Symbol.iterator]()},t("__extends",i),t("__assign",o),t("__rest",a),t("__decorate",s),t("__param",c),t("__metadata",l),t("__awaiter",u),t("__generator",p),t("__exportStar",h),t("__values",f),t("__read",d),t("__spread",m),t("__await",g),t("__asyncGenerator",y),t("__asyncDelegator",v),t("__asyncValues",b)}.apply(t,[t]))||(e.exports=n)}()},function(e,t,r){e.exports=r(2)(80)},function(e,t,r){e.exports=r(2)(77)},function(e,t,r){"use strict";var n=r(12),i=r(55);n.Observable.prototype.first=i.first},function(e,t,r){e.exports=r(2)(47)},function(e,t){
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r;!function(e){!function(t){var r="object"==typeof global?global:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),n=i(e);function i(e,t){return function(r,n){"function"!=typeof e[r]&&Object.defineProperty(e,r,{configurable:!0,writable:!0,value:n}),t&&t(r,n)}}void 0===r.Reflect?r.Reflect=e:n=i(r.Reflect,n),function(e){var t=Object.prototype.hasOwnProperty,r="function"==typeof Symbol,n=r&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=r&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",o="function"==typeof Object.create,a={__proto__:[]}instanceof Array,s=!o&&!a,c={create:o?function(){return L(Object.create(null))}:a?function(){return L({__proto__:null})}:function(){return L({})},has:s?function(e,r){return t.call(e,r)}:function(e,t){return t in e},get:s?function(e,r){return t.call(e,r)?e[r]:void 0}:function(e,t){return e[t]}},l=Object.getPrototypeOf(Function),u="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,p=u||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var e={},t=[],r=function(){function e(e,t,r){this._index=0,this._keys=e,this._values=t,this._selector=r}return e.prototype["@@iterator"]=function(){return this},e.prototype[i]=function(){return this},e.prototype.next=function(){var e=this._index;if(e>=0&&e<this._keys.length){var r=this._selector(this._keys[e],this._values[e]);return e+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:r,done:!1}}return{value:void 0,done:!0}},e.prototype.throw=function(e){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),e},e.prototype.return=function(e){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:e,done:!0}},e}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=e,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(e){return this._find(e,!1)>=0},t.prototype.get=function(e){var t=this._find(e,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(e,t){var r=this._find(e,!0);return this._values[r]=t,this},t.prototype.delete=function(t){var r=this._find(t,!1);if(r>=0){for(var n=this._keys.length,i=r+1;i<n;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=e,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=e,this._cacheIndex=-2},t.prototype.keys=function(){return new r(this._keys,this._values,n)},t.prototype.values=function(){return new r(this._keys,this._values,o)},t.prototype.entries=function(){return new r(this._keys,this._values,a)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[i]=function(){return this.entries()},t.prototype._find=function(e,t){return this._cacheKey!==e&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=e)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(e),this._values.push(void 0)),this._cacheIndex},t}();function n(e,t){return e}function o(e,t){return t}function a(e,t){return[e,t]}}():Map,h=u||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function e(){this._map=new p}return Object.defineProperty(e.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.add=function(e){return this._map.set(e,e),this},e.prototype.delete=function(e){return this._map.delete(e)},e.prototype.clear=function(){this._map.clear()},e.prototype.keys=function(){return this._map.keys()},e.prototype.values=function(){return this._map.values()},e.prototype.entries=function(){return this._map.entries()},e.prototype["@@iterator"]=function(){return this.keys()},e.prototype[i]=function(){return this.keys()},e}():Set,f=new(u||"function"!=typeof WeakMap?function(){var e=16,r=c.create(),n=i();return function(){function e(){this._key=i()}return e.prototype.has=function(e){var t=o(e,!1);return void 0!==t&&c.has(t,this._key)},e.prototype.get=function(e){var t=o(e,!1);return void 0!==t?c.get(t,this._key):void 0},e.prototype.set=function(e,t){var r=o(e,!0);return r[this._key]=t,this},e.prototype.delete=function(e){var t=o(e,!1);return void 0!==t&&delete t[this._key]},e.prototype.clear=function(){this._key=i()},e}();function i(){var e;do{e="@@WeakMap@@"+s()}while(c.has(r,e));return r[e]=!0,e}function o(e,r){if(!t.call(e,n)){if(!r)return;Object.defineProperty(e,n,{value:c.create()})}return e[n]}function a(e,t){for(var r=0;r<t;++r)e[r]=255*Math.random()|0;return e}function s(){var t=function(e){if("function"==typeof Uint8Array)return"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(e)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(e)):a(new Uint8Array(e),e);return a(new Array(e),e)}(e);t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var r="",n=0;n<e;++n){var i=t[n];4!==n&&6!==n&&8!==n||(r+="-"),i<16&&(r+="0"),r+=i.toString(16).toLowerCase()}return r}}():WeakMap);function d(e,t,r){var n=f.get(e);if(_(n)){if(!r)return;n=new p,f.set(e,n)}var i=n.get(t);if(_(i)){if(!r)return;i=new p,n.set(t,i)}return i}function m(e,t,r){var n=d(t,r,!1);return!_(n)&&!!n.has(e)}function g(e,t,r){var n=d(t,r,!1);if(!_(n))return n.get(e)}function y(e,t,r,n){var i=d(r,n,!0);i.set(e,t)}function v(e,t){var r=[],n=d(e,t,!1);if(_(n))return r;for(var o=n.keys(),a=function(e){var t=R(e,i);if(!x(t))throw new TypeError;var r=t.call(e);if(!w(r))throw new TypeError;return r}(o),s=0;;){var c=C(a);if(!c)return r.length=s,r;var l=c.value;try{r[s]=l}catch(e){try{A(a)}finally{throw e}}s++}}function b(e){if(null===e)return 1;switch(typeof e){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===e?1:6;default:return 6}}function _(e){return void 0===e}function E(e){return null===e}function w(e){return"object"==typeof e?null!==e:"function"==typeof e}function T(e,t){switch(b(e)){case 0:case 1:case 2:case 3:case 4:case 5:return e}var r=3===t?"string":5===t?"number":"default",i=R(e,n);if(void 0!==i){var o=i.call(e,r);if(w(o))throw new TypeError;return o}return function(e,t){if("string"===t){var r=e.toString;if(x(r)){var n=r.call(e);if(!w(n))return n}var i=e.valueOf;if(x(i)){var n=i.call(e);if(!w(n))return n}}else{var i=e.valueOf;if(x(i)){var n=i.call(e);if(!w(n))return n}var o=e.toString;if(x(o)){var n=o.call(e);if(!w(n))return n}}throw new TypeError}(e,"default"===r?"number":r)}function S(e){var t=T(e,3);return"symbol"==typeof t?t:function(e){return""+e}(t)}function k(e){return Array.isArray?Array.isArray(e):e instanceof Object?e instanceof Array:"[object Array]"===Object.prototype.toString.call(e)}function x(e){return"function"==typeof e}function N(e){return"function"==typeof e}function R(e,t){var r=e[t];if(void 0!==r&&null!==r){if(!x(r))throw new TypeError;return r}}function C(e){var t=e.next();return!t.done&&t}function A(e){var t=e.return;t&&t.call(e)}function O(e){var t=Object.getPrototypeOf(e);if("function"!=typeof e||e===l)return t;if(t!==l)return t;var r=e.prototype,n=r&&Object.getPrototypeOf(r);if(null==n||n===Object.prototype)return t;var i=n.constructor;return"function"!=typeof i?t:i===e?t:i}function L(e){return e.__=void 0,delete e.__,e}e("decorate",function(e,t,r,n){if(_(r)){if(!k(e))throw new TypeError;if(!N(t))throw new TypeError;return function(e,t){for(var r=e.length-1;r>=0;--r){var n=e[r],i=n(t);if(!_(i)&&!E(i)){if(!N(i))throw new TypeError;t=i}}return t}(e,t)}if(!k(e))throw new TypeError;if(!w(t))throw new TypeError;if(!w(n)&&!_(n)&&!E(n))throw new TypeError;return E(n)&&(n=void 0),r=S(r),function(e,t,r,n){for(var i=e.length-1;i>=0;--i){var o=e[i],a=o(t,r,n);if(!_(a)&&!E(a)){if(!w(a))throw new TypeError;n=a}}return n}(e,t,r,n)}),e("metadata",function(e,t){return function(r,n){if(!w(r))throw new TypeError;if(!_(n)&&!function(e){switch(b(e)){case 3:case 4:return!0;default:return!1}}(n))throw new TypeError;y(e,t,r,n)}}),e("defineMetadata",function(e,t,r,n){if(!w(r))throw new TypeError;_(n)||(n=S(n));return y(e,t,r,n)}),e("hasMetadata",function(e,t,r){if(!w(t))throw new TypeError;_(r)||(r=S(r));return function e(t,r,n){var i=m(t,r,n);if(i)return!0;var o=O(r);if(!E(o))return e(t,o,n);return!1}(e,t,r)}),e("hasOwnMetadata",function(e,t,r){if(!w(t))throw new TypeError;_(r)||(r=S(r));return m(e,t,r)}),e("getMetadata",function(e,t,r){if(!w(t))throw new TypeError;_(r)||(r=S(r));return function e(t,r,n){var i=m(t,r,n);if(i)return g(t,r,n);var o=O(r);if(!E(o))return e(t,o,n);return}(e,t,r)}),e("getOwnMetadata",function(e,t,r){if(!w(t))throw new TypeError;_(r)||(r=S(r));return g(e,t,r)}),e("getMetadataKeys",function(e,t){if(!w(e))throw new TypeError;_(t)||(t=S(t));return function e(t,r){var n=v(t,r);var i=O(t);if(null===i)return n;var o=e(i,r);if(o.length<=0)return n;if(n.length<=0)return o;var a=new h;var s=[];for(var c=0,l=n;c<l.length;c++){var u=l[c],p=a.has(u);p||(a.add(u),s.push(u))}for(var f=0,d=o;f<d.length;f++){var u=d[f],p=a.has(u);p||(a.add(u),s.push(u))}return s}(e,t)}),e("getOwnMetadataKeys",function(e,t){if(!w(e))throw new TypeError;_(t)||(t=S(t));return v(e,t)}),e("deleteMetadata",function(e,t,r){if(!w(t))throw new TypeError;_(r)||(r=S(r));var n=d(t,r,!1);if(_(n))return!1;if(!n.delete(e))return!1;if(n.size>0)return!0;var i=f.get(t);return i.delete(r),i.size>0||(f.delete(t),!0)})}(n)}()}(r||(r={}))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,